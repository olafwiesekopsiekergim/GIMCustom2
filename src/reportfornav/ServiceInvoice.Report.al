#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60006 "CCO Service Invoice"
{
	Caption = 'Service Invoice';
	Permissions = TableData "Sales Shipment Buffer" = rimd;
	WordLayout = './Layouts/CCOServiceInvoice.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem("Service Invoice Header";"Service Invoice Header")
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.", "Customer No.", "No. Printed";
			RequestFilterHeading = 'Posted Service Invoice';
			column(ReportForNavId_6248; 6248) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_ServiceInvoiceHeader; ReportForNavWriteDataItem('ServiceInvoiceHeader',"Service Invoice Header")) {}
			column(FirmenAnschr1; FirmenAnschr1)
			{
			}
			column(VATAmtLineVATAmtText; VATAmountLine.VATAmountText)
			{
			}
			column(TotalAmountInclVAT; TotalAmountInclVAT)
			{
			}
			column(TotalInclVATText; TotalInclVATText)
			{
			}
			column(TotalExclVATText; TotalExclVATText)
			{
			}
			column(TotalInvDiscAmount; TotalInvDiscAmount)
			{
			}
			column(TotalAmount; TotalAmount)
			{
			}
			column(DUE001; DUE001)
			{
			}
			column(DUE019; DUE019)
			{
			}
			column(DUE021; DUE021)
			{
			}
			column(DUE022; DUE022)
			{
			}
			column(DUE016; DUE016)
			{
			}
			column(DUE025; DUE025)
			{
			}
			column(USTCpt; USTCpt)
			{
			}
			column(TotalText; TotalText)
			{
			}
			column(ExternalNo; "Service Invoice Header"."External Document No.")
			{
			}
			column(BilltoCustomerNo; "Service Invoice Header"."Bill-to Customer No.")
			{
			}
			column(ContractNo_ServHeader; "Service Invoice Header"."Contract No.")
			{
			}
			column(PODate; "Service Invoice Header"."PO Date")
			{
			}
			column(YourRef; "Service Invoice Header"."Your Reference")
			{
			}
			column(DocDate; "Service Invoice Header"."Document Date")
			{
			}
			column(DueDate; "Service Invoice Header"."Due Date")
			{
			}
			column(UST; "Service Invoice Header"."VAT Registration No.")
			{
			}
			column(OrderNo; "Service Invoice Header"."Order No.")
			{
			}
			column(SubtotalCaption; SubtotalCaptionLbl)
			{
			}
			column(PaymentDiscountonVATCaption; PaymentDiscountonVATCaptionLbl)
			{
			}
			column(UnitPriceCaption; UnitPriceCaptionLbl)
			{
			}
			column(AmountCaption; AmountCaptionLbl)
			{
			}
			column(PostedReceiptDateCaption; PostedReceiptDateCaptionLbl)
			{
			}
			column(ServiceCrMemoLineLineDiscountCaption; ServiceCrMemoLineLineDiscountCaptionLbl)
			{
			}
			column(InvDiscountAmountCaption; InvDiscountAmountCaptionLbl)
			{
			}
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_5701; 5701) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop',CopyLoop)) {}
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number = const(1));
					column(ReportForNavId_6455; 6455) {} // Autogenerated by ForNav - Do not delete
					column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop',PageLoop)) {}
					column(TODAY_0_7; Format(Today, 0, 7))
					{
					}
					column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
					{
					}
					column(STRSUBSTNO_DUE004_SalesHeaderNo; StrSubstNo(DUE004, "Service Invoice Header"."No."))
					{
					}
					column(DUE005; DUE005)
					{
					}
					column(DocumentDate; Format("Service Invoice Header"."Document Date", 0, 7))
					{
					}
					column(KundendienstMail; Kundendienst."E-Mail")
					{
					}
					column(KundendienstPhone; Kundendienst."Phone No.")
					{
					}
					column(CompanyInfoPicture; CompanyInfo.Picture)
					{
					}
					column(CompanyInfoPicture3; CompanyInfo."Picture 2")
					{
					}
					column(CompanyInfo2Picture; CompanyInfo2.Picture)
					{
					}
					column(ReportTitleCopyText; GetDocumentCaption)
					{
					}
					column(CustAddr1; CustAddr[1])
					{
					}
					column(CompanyAddr1; CompanyAddr[1])
					{
					}
					column(CustAddr2; CustAddr[2])
					{
					}
					column(CompanyAddr2; CompanyAddr[2])
					{
					}
					column(CustAddr3; CustAddr[3])
					{
					}
					column(CompanyAddr3; CompanyAddr[3])
					{
					}
					column(CustAddr4; CustAddr[4])
					{
					}
					column(CompanyAddr4; CompanyAddr[4])
					{
					}
					column(CustAddr5; CustAddr[5])
					{
					}
					column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
					{
					}
					column(CustAddr6; CustAddr[6])
					{
					}
					column(CompanyInfoFaxNo; CompanyInfo."Fax No.")
					{
					}
					column(CompanyInfoVATRegNo; CompanyInfo."VAT Registration No.")
					{
					}
					column(CompanyInfoGiroNo; CompanyInfo."Giro No.")
					{
					}
					column(CompanyInfoBankName; CompanyInfo."Bank Name")
					{
					}
					column(CompanyInfoBankAccountNo; CompanyInfo."Bank Account No.")
					{
					}
					column(BillToCustNo_ServiceCrMemoHeader; "Service Invoice Header"."Bill-to Customer No.")
					{
					}
					column(PostingDate_ServiceCrMemoHeader; Format("Service Invoice Header"."Posting Date"))
					{
					}
					column(VATNoText; VATNoText)
					{
					}
					column(VATRegNo_ServiceCrMemoHeader; "Service Invoice Header"."VAT Registration No.")
					{
					}
					column(No1_ServiceCrMemoHeader; "Service Invoice Header"."No.")
					{
					}
					column(SalesPersonText; SalesPersonText)
					{
					}
					column(SalesPurchPersonName; SalesPurchPerson.Name)
					{
					}
					column(AppliedToText; AppliedToText)
					{
					}
					column(ReferenceText; ReferenceText)
					{
					}
					column(YourRef_ServiceCrMemoHeader; "Service Invoice Header"."Your Reference")
					{
					}
					column(CustAddr7; CustAddr[7])
					{
					}
					column(CustAddr8; CustAddr[8])
					{
					}
					column(CompanyAddr5; CompanyAddr[5])
					{
					}
					column(CompanyAddr6; CompanyAddr[6])
					{
					}
					column(DocDate_ServiceCrMemoHeader; Format("Service Invoice Header"."Document Date", 0, 4))
					{
					}
					column(PricesInclVAT_ServiceCrMemoHeader; "Service Invoice Header"."Prices Including VAT")
					{
					}
					column(PageCaption; StrSubstNo(Text006, ''))
					{
					}
					column(OutputNo; OutputNo)
					{
					}
					column(PricesInclVAT1_ServiceCrMemoHeader; Format("Service Invoice Header"."Prices Including VAT"))
					{
					}
					column(CompanyInfoPhoneNoCaption; CompanyInfoPhoneNoCaptionLbl)
					{
					}
					column(CompanyInfoFaxNoCaption; CompanyInfoFaxNoCaptionLbl)
					{
					}
					column(CompanyInfoVATRegistrationNoCaption; CompanyInfoVATRegistrationNoCaptionLbl)
					{
					}
					column(CompanyInfoGiroNoCaption; CompanyInfoGiroNoCaptionLbl)
					{
					}
					column(CompanyInfoBankNameCaption; CompanyInfoBankNameCaptionLbl)
					{
					}
					column(CompanyInfoBankAccountNoCaption; CompanyInfoBankAccountNoCaptionLbl)
					{
					}
					column(ServiceCrMemoHeaderNoCaption; GetDocumentNoLbl)
					{
					}
					column(ServiceCrMemoHeaderPostingDateCaption; ServiceCrMemoHeaderPostingDateCaptionLbl)
					{
					}
					column(BillToCustNo_ServiceCrMemoHeaderCaption; "Service Invoice Header".FieldCaption("Bill-to Customer No."))
					{
					}
					column(PricesInclVAT_ServiceCrMemoHeaderCaption; "Service Invoice Header".FieldCaption("Prices Including VAT"))
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemLinkReference = "Service Invoice Header";
						DataItemTableView = sorting(Number);
						column(ReportForNavId_7574; 7574) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1',DimensionLoop1)) {}
						column(DimText; DimText)
						{
						}
						column(Number_IntegerLine; DimensionLoop1.Number)
						{
						}
						column(HeaderDimensionsCaption; HeaderDimensionsCaptionLbl)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
								CurrReport.Break;
							FindDimTxt("Service Invoice Header"."Dimension Set ID");
							SetRange(Number, 1, DimTxtArrLength);
							ReportForNav.OnPreDataItem('DimensionLoop1',DimensionLoop1);
						end;
						
						trigger OnAfterGetRecord();
						begin
							DimText := DimTxtArr[Number];
						end;
						
					}
					dataitem("Service Invoice Line";"Service Invoice Line")
					{
						DataItemLink = "Document No." = FIELD("No.");
						DataItemLinkReference = "Service Invoice Header";
						DataItemTableView = sorting("Document No.", "Line No.");
						column(ReportForNavId_4594; 4594) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_ServiceInvoiceLine; ReportForNavWriteDataItem('ServiceInvoiceLine',"Service Invoice Line")) {}
						column(TypeInt; TypeInt)
						{
						}
						column(ServiceItemNo; "Service Invoice Line"."Service Item No.")
						{
						}
						column(ServiceItemNoCpt; ServiceItemNoCpt)
						{
						}
						column(LineNo_ServCrMemoLine; "Service Invoice Line"."Line No.")
						{
						}
						column(VAtBaseDisc_ServiceCrMemoHeader; "Service Invoice Header"."VAT Base Discount %")
						{
						}
						column(TotalLineAmount; TotalLineAmount)
						{
							DecimalPlaces = 2 : 2;
						}
						column(LineAmt_ServCrMemoLine; "Service Invoice Line"."Line Amount")
						{
							AutoFormatExpression = GetCurrencyCode;
							AutoFormatType = 0;
							DecimalPlaces = 2 : 2;
						}
						column(Desc2_ServCrMemoLine; "Service Invoice Line"."Description 2")
						{
						}
						column(Desc_ServCrMemoLine; "Service Invoice Line".Description)
						{
						}
						column(Position; "Service Invoice Line".Position)
						{
						}
						column(PosCpt; PosCpt)
						{
						}
						column(No_ServCrMemoLine; "Service Invoice Line"."No.")
						{
						}
						column(Quantity_ServCrMemoLine; "Service Invoice Line".Quantity)
						{
						}
						column(UOM_ServCrMemoLine; "Service Invoice Line"."Unit of Measure")
						{
						}
						column(UnitPrice_ServCrMemoLine; "Service Invoice Line"."Unit Price")
						{
							AutoFormatExpression = GetCurrencyCode;
							AutoFormatType = 2;
							DecimalPlaces = 2 : 2;
						}
						column(LineDisc_ServCrMemoLine; "Service Invoice Line"."Line Discount %")
						{
						}
						column(VATIdentifier_ServCrMemoLine; "Service Invoice Line"."VAT Identifier")
						{
						}
						column(PostedRcptDate; Format(PostedReceiptDate))
						{
						}
						column(TotalAmountInvDiscAmount; "Service Invoice Line".Amount)
						{
							DecimalPlaces = 2 : 2;
						}
						column(Amt_ServCrMemoLine; "Service Invoice Line".Amount)
						{
							AutoFormatExpression = GetCurrencyCode;
							AutoFormatType = 1;
							DecimalPlaces = 2 : 2;
						}
						column(InvDiscountAmount; -"Inv. Discount Amount")
						{
							AutoFormatExpression = GetCurrencyCode;
							AutoFormatType = 0;
							DecimalPlaces = 2 : 2;
						}
						column(AmtInclVAT_ServCrMemoLine; "Service Invoice Line"."Amount Including VAT")
						{
							AutoFormatExpression = GetCurrencyCode;
							AutoFormatType = 1;
						}
						column(AmtInclVATAmt; "Amount Including VAT" - Amount)
						{
							AutoFormatExpression = GetCurrencyCode;
							AutoFormatType = 0;
							DecimalPlaces = 2 : 2;
						}
						column(LineAmtInvDiscAmtInclVAT; -("Line Amount" - "Inv. Discount Amount" - "Amount Including VAT"))
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(Desc_ServCrMemoLineCaption; FieldCaption(Description))
						{
						}
						column(No_ServCrMemoLineCaption; FieldCaption("No."))
						{
						}
						column(Quantity_ServCrMemoLineCaption; FieldCaption(Quantity))
						{
						}
						column(UOM_ServCrMemoLineCaption; FieldCaption("Unit of Measure"))
						{
						}
						column(VATIdentifier_ServCrMemoLineCaption; FieldCaption("VAT Identifier"))
						{
						}
						column(TotalAmountInclVAT2; TotalAmountInclVAT)
						{
						}
						column(TotalInvDiscAmount2; TotalInvDiscAmount)
						{
						}
						column(TotalAmount2; TotalAmount)
						{
						}
						dataitem(TMLine;Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_5060603; 5060603) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_TMLine; ReportForNavWriteDataItem('TMLine',TMLine)) {}
							column(TMLine_Number; TMLine.Number)
							{
							}
							column(TMLine_Text; TempTMLine.Text)
							{
							}
							column(TMLine_Italic; TempTMLine.Italic)
							{
							}
							column(TMLine_Bold; TempTMLine.Bold)
							{
							}
							column(TMLine_Underline; TempTMLine.Underline)
							{
							}
							column(TMLine_Color; TempTMLine.Color)
							{
							}
							trigger OnPreDataItem();
							begin
								// >> #TMW17.00:A001
								if TestLicPermissionTM then begin
									// >> #TMW17.10.01:T100
									// TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Service Cr.Memo Line",
									//									"Service Cr.Memo Line", CurrReport.OBJECTID(FALSE));
									TMEngine.GetTextSetForReport(TempTMLine, "Service Invoice Line"."CCS TM Text Set ID", CurrReport.ObjectId(false));
									// << #TMW17.10.01:T100
									SetRange(Number, 1, TempTMLine.Count);
								end else begin
									CurrReport.Break;
								end;
								// << #TMW17.00:A001
								ReportForNav.OnPreDataItem('TMLine',TMLine);
							end;
							
							trigger OnAfterGetRecord();
							begin
								// >> #TMW17.00:A001
								if Number = 1 then
									TempTMLine.FindFirst
								else
									TempTMLine.Next;
								// << #TMW17.00:A001
							end;
							
						}
						dataitem("Service Shipment Buffer";Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_9516; 9516) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_ServiceShipmentBuffer; ReportForNavWriteDataItem('ServiceShipmentBuffer',"Service Shipment Buffer")) {}
							column(ServShptBuffPostingDate; Format(ServiceShipmentBuffer."Posting Date"))
							{
							}
							column(ServShptBuffQty; ServiceShipmentBuffer.Quantity)
							{
								DecimalPlaces = 0 : 5;
							}
							column(ReturnReceiptCaption; ReturnReceiptCaptionLbl)
							{
							}
							column(Description_PaymentTerms; PaymentTerms.Description)
							{
							}
							trigger OnPreDataItem();
							begin
								SetRange(Number, 1, ServiceShipmentBuffer.Count);
								ReportForNav.OnPreDataItem('ServiceShipmentBuffer',"Service Shipment Buffer");
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then
									ServiceShipmentBuffer.Find('-')
								else
									ServiceShipmentBuffer.Next;
							end;
							
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_3591; 3591) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2',DimensionLoop2)) {}
							column(DimText1; DimText)
							{
							}
							column(LineDimensionsCaption; LineDimensionsCaptionLbl)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
									CurrReport.Break;
								FindDimTxt("Service Invoice Line"."Dimension Set ID");
								SetRange(Number, 1, DimTxtArrLength);
								ReportForNav.OnPreDataItem('DimensionLoop2',DimensionLoop2);
							end;
							
							trigger OnAfterGetRecord();
							begin
								DimText := DimTxtArr[Number];
							end;
							
						}
						trigger OnPreDataItem();
						begin
							VATAmountLine.DeleteAll;
							ServiceShipmentBuffer.Reset;
							ServiceShipmentBuffer.DeleteAll;
							FirstValueEntryNo := 0;
							MoreLines := Find('+');
							while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
								MoreLines := Next(-1) <> 0;
							if not MoreLines then
								CurrReport.Break;
							SetRange("Line No.", 0, "Line No.");
							TotalAmount := 0;
							TotalAmountInclVAT := 0;
							TotalInvDiscAmount := 0;
							TotalLineAmount := 0;
							ReportForNav.OnPreDataItem('ServiceInvoiceLine',"Service Invoice Line");
						end;
						
						trigger OnAfterGetRecord();
						begin
							ServiceShipmentBuffer.DeleteAll;
							PostedReceiptDate := 0D;
							if Quantity <> 0 then
								PostedReceiptDate := FindPostedShipmentDate;
						
							if (Type = Type::"G/L Account") and not ShowInternalInfo then
								"No." := '';
						
							VATAmountLine.Init;
							VATAmountLine."VAT Identifier" := "VAT Identifier";
							VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
							VATAmountLine."Tax Group Code" := "Tax Group Code";
							VATAmountLine."VAT %" := "VAT %";
							VATAmountLine."VAT Base" := Amount;
							VATAmountLine."Amount Including VAT" := "Amount Including VAT";
							VATAmountLine."Line Amount" := "Line Amount";
							if "Allow Invoice Disc." then
								VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
							VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
							VATAmountLine."VAT Clause Code" := "VAT Clause Code";
							VATAmountLine.InsertLine;
							TotalAmount += "Line Amount";
						
							// zum testen geändert:
							// TotalAmountInclVAT += "Line Amount" * 1.19;
						
							// Original: TotalAmountInclVAT
							TotalAmountInclVAT += "Amount Including VAT";
							TotalInvDiscAmount += "Inv. Discount Amount";
							TotalLineAmount += "Line Amount";
							TypeInt := Type.AsInteger();
						
							// zur Beschreibung
							// TotalLineAmount					   - Total Netto
							// TotalAmountInclVAT-TotalLineAmount	- Total MWST -> wird im Report berechnet
							// TotalAmountInclVAT					- Total Brutto
						end;
						
					}
					dataitem(VATCounter;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_6558; 6558) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter',VATCounter)) {}
						column(VATAmtLineVATBase; VATAmountLine."VAT Base")
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmtLineVATAmt; VATAmountLine."VAT Amount")
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmtLineLineAmt; VATAmountLine."Line Amount")
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmtLineInvDiscBaseAmt; VATAmountLine."Inv. Disc. Base Amount")
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmtLineInvoiceDisctAmt; VATAmountLine."Invoice Discount Amount")
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATAmtLineVAT; VATAmountLine."VAT %")
						{
							DecimalPlaces = 0 : 5;
						}
						column(VATAmtLineVATIdentifier; VATAmountLine."VAT Identifier")
						{
						}
						column(VATAmountLineVATCaption; VATAmountLineVATCaptionLbl)
						{
						}
						column(VATBaseCaption; VATBaseCaptionLbl)
						{
						}
						column(VATAmountLineVATAmnCaption; VATAmountLineVATAmnCaptionLbl)
						{
						}
						column(VATAmountSpecificationCaption; VATAmountSpecificationCaptionLbl)
						{
						}
						column(VATAmountLineVATIdentifierCaption; VATAmountLineVATIdentifierCaptionLbl)
						{
						}
						column(VATAmountLineInvDiscBaseAmtCaption; VATAmountLineInvDiscBaseAmtCaptionLbl)
						{
						}
						column(VATAmountLineLineAmntCaption; VATAmountLineLineAmntCaptionLbl)
						{
						}
						trigger OnPreDataItem();
						begin
							if VATAmountLine.GetTotalVATAmount = 0 then
								CurrReport.Break;
							SetRange(Number, 1, VATAmountLine.Count);
							ReportForNav.OnPreDataItem('VATCounter',VATCounter);
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
						end;
						
					}
					dataitem(VATClauseEntryCounter;Integer)
					{
						DataItemTableView = sorting(Number);
						column(ReportForNavId_250; 250) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_VATClauseEntryCounter; ReportForNavWriteDataItem('VATClauseEntryCounter',VATClauseEntryCounter)) {}
						column(VATClauseVATIdentifier; VATAmountLine."VAT Identifier")
						{
						}
						column(VATClauseCode; VATAmountLine."VAT Clause Code")
						{
						}
						column(VATClauseDescription; VATClause.Description)
						{
						}
						column(VATClauseDescription2; VATClause."Description 2")
						{
						}
						column(VATClauseAmount; VATAmountLine."VAT Amount")
						{
							AutoFormatExpression = "Service Invoice Header"."Currency Code";
							AutoFormatType = 1;
						}
						column(VATClausesCaption; VATClausesCap)
						{
						}
						column(VATClauseVATIdentifierCaption; VATAmountLineVATIdentifierCaptionLbl)
						{
						}
						column(VATClauseVATAmtCaption; VATAmountLineVATAmnCaptionLbl)
						{
						}
						column(TotalCaption; TotalCaptionLbl)
						{
						}
						trigger OnPreDataItem();
						begin
							Clear(VATClause);
							SetRange(Number, 1, VATAmountLine.Count);
							ReportForNav.OnPreDataItem('VATClauseEntryCounter',VATClauseEntryCounter);
						end;
						
						trigger OnAfterGetRecord();
						begin
							VATAmountLine.GetLine(Number);
							if not VATClause.Get(VATAmountLine."VAT Clause Code") then
								CurrReport.Skip;
							VATClause.TranslateDescription("Service Invoice Header"."Language Code");
						end;
						
					}
					dataitem(Total;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = const(1));
						column(ReportForNavId_3476; 3476) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_Total; ReportForNavWriteDataItem('Total',Total)) {}
						trigger OnPreDataItem();
						begin
							ReportForNav.OnPreDataItem('Total',Total);
						end;
					}
					dataitem(Total2;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = const(1));
						column(ReportForNavId_3363; 3363) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2',Total2)) {}
						column(Cust_ServCrMemoHeader; "Service Invoice Header"."Customer No.")
						{
						}
						column(ShipToAddr1; ShipToAddr[1])
						{
						}
						column(ShipToAddr2; ShipToAddr[2])
						{
						}
						column(ShipToAddr3; ShipToAddr[3])
						{
						}
						column(ShipToAddr4; ShipToAddr[4])
						{
						}
						column(ShipToAddr5; ShipToAddr[5])
						{
						}
						column(ShipToAddr6; ShipToAddr[6])
						{
						}
						column(ShipToAddr7; ShipToAddr[7])
						{
						}
						column(ShipToAddr8; ShipToAddr[8])
						{
						}
						column(ShiptoAddressCaption; ShiptoAddressCaptionLbl)
						{
						}
						column(Cust_ServCrMemoHeaderCaption; "Service Invoice Header".FieldCaption("Customer No."))
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowShippingAddr then
								CurrReport.Break;
							ReportForNav.OnPreDataItem('Total2',Total2);
						end;
						
					}
					trigger OnPreDataItem();
					begin
						ReportForNav.OnPreDataItem('PageLoop',PageLoop);
					end;
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := Abs(NoOfCopies) + 1;
					CopyText := '';
					SetRange(Number, 1, NoOfLoops);
					OutputNo := 1;
					ReportForNav.OnPreDataItem('CopyLoop',CopyLoop);
				end;
				
				trigger OnAfterGetRecord();
				begin
				
					if Number > 1 then begin
						CopyText := Text004;
						OutputNo += 1;
					end;
				end;
				
				trigger OnPostDataItem();
				begin
					if not CurrReport.Preview then
						ServiceCrMemoCountPrinted.Run("Service Invoice Header");
				end;
				
			}
			trigger OnPreDataItem();
			begin
				ReportForNav.OnPreDataItem('ServiceInvoiceHeader',"Service Invoice Header");
			end;
			trigger OnAfterGetRecord();
			begin
				CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
				if RespCenter.Get("Responsibility Center") then begin
					FormatAddr.RespCenter(CompanyAddr, RespCenter);
					if RespCenter.Get("Responsibility Center") then begin
						FirmenAnschr1 := RespCenter.Name + ' | ' + RespCenter."Address 2" + ' | ' + RespCenter."Post Code" + ' ' + RespCenter.City;
						CompanyInfo."Phone No." := RespCenter."Phone No.";
						CompanyInfo."Fax No." := RespCenter."Fax No.";
					end else
						FormatAddr.Company(CompanyAddr, CompanyInfo);
					if "Salesperson Code" = '' then begin
						SalesPurchPerson.Init;
						SalesPersonText := '';
					end else begin
						SalesPurchPerson.Get("Salesperson Code");
						SalesPersonText := Text000;
					end;
					if "Your Reference" = '' then
						ReferenceText := ''
					else
						ReferenceText := FieldCaption("Your Reference");
					if "VAT Registration No." = '' then
						VATNoText := ''
					else
						VATNoText := FieldCaption("VAT Registration No.");
					if "Currency Code" = '' then begin
						GLSetup.TestField("LCY Code");
						TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
						TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
						TotalExclVATText := StrSubstNo(Text007, GLSetup."LCY Code");
					end else begin
						TotalText := StrSubstNo(Text001, "Currency Code");
						TotalInclVATText := StrSubstNo(Text002, "Currency Code");
						TotalExclVATText := StrSubstNo(Text007, "Currency Code");
					end;
					FormatAddr.ServiceInvBillTo(CustAddr, "Service Invoice Header");
					if not Cust.Get("Bill-to Customer No.") then
						Clear(Cust);
					if "Applies-to Doc. No." = '' then
						AppliedToText := ''
					else
						AppliedToText := StrSubstNo(Text003, "Applies-to Doc. Type", "Applies-to Doc. No.");
					FormatAddr.ServiceInvShipTo(ShipToAddr, CustAddr, "Service Invoice Header");
					ShowShippingAddr := "Customer No." <> "Bill-to Customer No.";
					for i := 1 to ArrayLen(ShipToAddr) do
						if ShipToAddr[i] <> CustAddr[i] then
							ShowShippingAddr := true;
				end;
				if "Service Invoice Header"."Service Salesperson Code" <> '' then
					if not Kundendienst.Get("Service Invoice Header"."Service Salesperson Code") then Kundendienst.Init;
				DebitorR.Get("Service Invoice Header"."Customer No.");
				if "Payment Terms Code" = '' then
					PaymentTerms.Init
				else
					PaymentTerms.Get("Payment Terms Code");
			
				if "Service Invoice Header"."VAT Registration No." <> '' then
					USTCpt := 'USt.-ID-Nr.:'
				else
					USTCpt := '';
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies; NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowInternalInfo; ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		GLSetup.Get;
		CompanyInfo.Get;
		ServiceSetup.Get;
		CompanyInfo.CalcFields(Picture, "Picture 2");
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Salesperson';
		Text001: label 'Total %1';
		Text002: label 'Total %1 Incl. VAT';
		Text003: label '(Applies to %1 %2)';
		Text004: label 'COPY';
		DocCreditMemoCap: label 'Service -Invoice %1', Comment = 'Substitute can be COPY or blank. E.g. "Sales -Invoice COPY" or "Sales - Invoice"';
		DocDECap: label 'Service - Corrective Invoice %1', Comment = 'Substitute can be COPY or blank. E.g. "Sales - Corrective Invoice COPY" or "Sales - Corrective Invoice"';
		Text006: label 'Page %1';
		Text007: label 'Total %1 Excl. VAT';
		PaymentTerms: Record "Payment Terms";
		GLSetup: Record "General Ledger Setup";
		SalesPurchPerson: Record "Salesperson/Purchaser";
		CompanyInfo: Record "Company Information";
		CompanyInfo1: Record "Company Information";
		CompanyInfo2: Record "Company Information";
		ServiceSetup: Record "Service Mgt. Setup";
		VATAmountLine: Record "VAT Amount Line" temporary;
		VATClause: Record "VAT Clause";
		DimSetEntry: Record "Dimension Set Entry";
		Language2: Codeunit Language;
		ServiceShipmentBuffer: Record "Service Shipment Buffer" temporary;
		RespCenter: Record "Responsibility Center";
		Cust: Record Customer;
		ServiceCrMemoCountPrinted: Codeunit "Service Inv.-Printed";
		FormatAddr: Codeunit "Format Address";
		CustAddr: array[8] of Text[50];
		ShipToAddr: array[8] of Text[50];
		CompanyAddr: array[8] of Text[50];
		SalesPersonText: Text[30];
		VATNoText: Text[80];
		ReferenceText: Text[80];
		AppliedToText: Text;
		TotalText: Text[50];
		TotalExclVATText: Text[50];
		TotalInclVATText: Text[50];
		MoreLines: Boolean;
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		OutputNo: Integer;
		TypeInt: Integer;
		CopyText: Text[30];
		ShowShippingAddr: Boolean;
		i: Integer;
		DimText: Text[120];
		ShowInternalInfo: Boolean;
		FirstValueEntryNo: Integer;
		PostedReceiptDate: Date;
		NextEntryNo: Integer;
		TotalAmount: Decimal;
		TotalAmountInclVAT: Decimal;
		TotalInvDiscAmount: Decimal;
		TotalLineAmount: Decimal;
		DimTxtArrLength: Integer;
		DimTxtArr: array[500] of Text[50];
		SubtotalCaptionLbl: label 'Subtotal';
		PaymentDiscountonVATCaptionLbl: label 'Payment Discount on VAT';
		UnitPriceCaptionLbl: label 'Unit Price';
		AmountCaptionLbl: label 'Amount';
		PostedReceiptDateCaptionLbl: label 'Posted Service Date';
		ServiceCrMemoLineLineDiscountCaptionLbl: label 'Disc. %';
		CompanyInfoPhoneNoCaptionLbl: label 'Phone No.';
		CompanyInfoFaxNoCaptionLbl: label 'Fax No.';
		CompanyInfoVATRegistrationNoCaptionLbl: label 'VAT Reg. No.';
		CompanyInfoGiroNoCaptionLbl: label 'Giro No.';
		CompanyInfoBankNameCaptionLbl: label 'Bank';
		CompanyInfoBankAccountNoCaptionLbl: label 'Account No.';
		ServiceHeaderNoLbl: label 'Invoice No.';
		DEServiceHeaderNoLbl: label 'Corrective Invoice No.';
		ServiceCrMemoHeaderPostingDateCaptionLbl: label 'Posting Date';
		HeaderDimensionsCaptionLbl: label 'Header Dimensions';
		ReturnReceiptCaptionLbl: label 'Return Receipt';
		LineDimensionsCaptionLbl: label 'Line Dimensions';
		VATClausesCap: label 'VAT Clause';
		VATAmountLineVATCaptionLbl: label 'VAT %';
		VATBaseCaptionLbl: label 'VAT Base';
		VATAmountLineVATAmnCaptionLbl: label 'VAT Amount';
		VATAmountSpecificationCaptionLbl: label 'VAT Amount Specification';
		VATAmountLineVATIdentifierCaptionLbl: label 'VAT Identifier';
		VATAmountLineInvDiscBaseAmtCaptionLbl: label 'Inv. Disc. Base Amount';
		VATAmountLineLineAmntCaptionLbl: label 'Line Amount';
		TotalCaptionLbl: label 'Total';
		ShiptoAddressCaptionLbl: label 'Ship-to Address';
		InvDiscountAmountCaptionLbl: label 'Invoice Discount Amount';
		"--- TM glob. Vars. ---": Integer;
		LicPermission: Record "License Permission";
		TMEngine: Codeunit "CCS TM Engine";
		TempTMLine: Record "CCS TM Line Document" temporary;
		FirmenAnschr1: Text[120];
		DUE001: label 'Delivery Address:';
		DUE019: label 'Your Contact:';
		Kundendienst: Record "Salesperson/Purchaser";
		DebitorR: Record Customer;
		DUE004: label 'Invoice %1';
		DUE005: label 'Always mention.';
		DUE021: label 'Our general terms and conditions of sale apply.';
		DUE022: label 'You will find our general terms and conditions following www.dueperthal.com or receive them by e-mail upon request';
		DUE016: label 'The value added tax current at the time of the delivery applies.';
		PosCpt: label 'Pos.';
		DUE025: label 'Lieferanschrift = Leistungsempfänger und Lieferdatum = Leistungsdatum';
		USTCpt: Text[20];
		ServiceItemNoCpt: label 'Service Item';

	procedure FindPostedShipmentDate(): Date
	var
		ServiceShipmentBuffer2: Record "Service Shipment Buffer" temporary;
	begin
		NextEntryNo := 1;
		case "Service Invoice Line".Type of
			"Service Invoice Line".Type::Item:
				GenerateBufferFromValueEntry("Service Invoice Line");
			"Service Invoice Line".Type::" ":
				exit(0D);
		end;
		ServiceShipmentBuffer.Reset;
		ServiceShipmentBuffer.SetRange("Document No.", "Service Invoice Line"."Document No.");
		ServiceShipmentBuffer.SetRange("Line No.", "Service Invoice Line"."Line No.");
		if ServiceShipmentBuffer.Find('-') then begin
			ServiceShipmentBuffer2 := ServiceShipmentBuffer;
			if ServiceShipmentBuffer.Next = 0 then begin
				ServiceShipmentBuffer.Get(ServiceShipmentBuffer2."Document No.", ServiceShipmentBuffer2."Line No.", ServiceShipmentBuffer2.
				  "Entry No.");
				ServiceShipmentBuffer.Delete;
				exit(ServiceShipmentBuffer2."Posting Date");
			end;
			ServiceShipmentBuffer.CalcSums(Quantity);
			if ServiceShipmentBuffer.Quantity <> "Service Invoice Line".Quantity then begin
				ServiceShipmentBuffer.DeleteAll;
				exit("Service Invoice Header"."Posting Date");
			end;
		end else
			exit("Service Invoice Header"."Posting Date");
	end;

	procedure GenerateBufferFromValueEntry(ServiceInvoiceLine2: Record "Service Invoice Line")
	var
		ValueEntry: Record "Value Entry";
		ItemLedgerEntry: Record "Item Ledger Entry";
		TotalQuantity: Decimal;
		Quantity: Decimal;
	begin
		TotalQuantity := ServiceInvoiceLine2."Quantity (Base)";
		ValueEntry.SetCurrentkey("Document No.");
		ValueEntry.SetRange("Document No.", ServiceInvoiceLine2."Document No.");
		ValueEntry.SetRange("Posting Date", "Service Invoice Header"."Posting Date");
		ValueEntry.SetRange("Item Charge No.", '');
		ValueEntry.SetFilter("Entry No.", '%1..', FirstValueEntryNo);
		if ValueEntry.Find('-') then
			repeat
				if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
					if ServiceInvoiceLine2."Qty. per Unit of Measure" <> 0 then
						Quantity := ValueEntry."Invoiced Quantity" / ServiceInvoiceLine2."Qty. per Unit of Measure"
					else
						Quantity := ValueEntry."Invoiced Quantity";
					AddBufferEntry(
					  ServiceInvoiceLine2,
					  -Quantity,
					  ItemLedgerEntry."Posting Date");
					TotalQuantity := TotalQuantity - ValueEntry."Invoiced Quantity";
				end;
				FirstValueEntryNo := ValueEntry."Entry No." + 1;
			until (ValueEntry.Next = 0) or (TotalQuantity = 0);
	end;

	procedure AddBufferEntry(ServiceInvoiceLine: Record "Service Invoice Line"; QtyOnShipment: Decimal; PostingDate: Date)
	begin
		ServiceShipmentBuffer.SetRange("Document No.", ServiceInvoiceLine."Document No.");
		ServiceShipmentBuffer.SetRange("Line No.", ServiceInvoiceLine."Line No.");
		ServiceShipmentBuffer.SetRange("Posting Date", PostingDate);
		if ServiceShipmentBuffer.Find('-') then begin
			ServiceShipmentBuffer.Quantity := ServiceShipmentBuffer.Quantity - QtyOnShipment;
			ServiceShipmentBuffer.Modify;
			exit;
		end;
		with ServiceShipmentBuffer do begin
			Init;
			"Document No." := ServiceInvoiceLine."Document No.";
			"Line No." := ServiceInvoiceLine."Line No.";
			"Entry No." := NextEntryNo;
			Type := ServiceInvoiceLine.Type;
			"No." := ServiceInvoiceLine."No.";
			Quantity := -QtyOnShipment;
			"Posting Date" := PostingDate;
			Insert;
			NextEntryNo := NextEntryNo + 1
		end;
	end;

	procedure FindDimTxt(DimSetID: Integer)
	var
		Separation: Text[5];
		i: Integer;
		TxtToAdd: Text[120];
		StartNewLine: Boolean;
	begin
		DimSetEntry.SetRange("Dimension Set ID", DimSetID);
		DimTxtArrLength := 0;
		for i := 1 to ArrayLen(DimTxtArr) do
			DimTxtArr[i] := '';
		if not DimSetEntry.FindSet then
			exit;
		Separation := '; ';
		repeat
			TxtToAdd := DimSetEntry."Dimension Code" + ' - ' + DimSetEntry."Dimension Value Code";
			if DimTxtArrLength = 0 then
				StartNewLine := true
			else
				StartNewLine := StrLen(DimTxtArr[DimTxtArrLength]) + StrLen(Separation) + StrLen(TxtToAdd) > MaxStrLen(DimTxtArr[1]);
			if StartNewLine then begin
				DimTxtArrLength += 1;
				DimTxtArr[DimTxtArrLength] := TxtToAdd
			end else
				DimTxtArr[DimTxtArrLength] := DimTxtArr[DimTxtArrLength] + Separation + TxtToAdd;
		until DimSetEntry.Next = 0;
	end;

	procedure InitializeRequest(NewShowInternalInfo: Boolean)
	begin
		ShowInternalInfo := NewShowInternalInfo;
	end;

	local procedure GetDocumentNoLbl(): Text
	begin
		if CompanyInfo."Country/Region Code" = 'DE' then
			exit(DEServiceHeaderNoLbl);
		exit(ServiceHeaderNoLbl);
	end;

	local procedure GetDocumentCaption(): Text
	begin
		if CompanyInfo."Country/Region Code" = 'DE' then
			exit(StrSubstNo(DocDECap, CopyText));
		exit(StrSubstNo(DocCreditMemoCap, CopyText));
	end;

	procedure "--- Text Module ---"()
	begin
	end;

	procedure TestLicPermissionTM(): Boolean
	begin
		// >> #TMW17.00:A001
		if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
		   (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
		then begin
			LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
		end;
		if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
			exit(true);
		end else begin
			exit(false);
		end;
		// << #TMW17.00:A001
	end;

	local procedure OnPreSectionPageLoop_Footer3(var PageLoop : Record Integer);
	begin
		with PageLoop do begin
			ReportForNavSetShowOutput("Service Invoice Line"."Inv. Discount Amount" <> 0);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceInvoiceLine_Body96(var "Service Invoice Line" : Record "Service Invoice Line");
	begin
		with "Service Invoice Line" do begin
			ReportForNavSetShowOutput("Service Invoice Line".Type = "Service Invoice Line".Type::" ");
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceInvoiceLine_Body97(var "Service Invoice Line" : Record "Service Invoice Line");
	begin
		with "Service Invoice Line" do begin
			ReportForNavSetShowOutput(("Service Invoice Line".Type = "Service Invoice Line".Type::Item) or
			("Service Invoice Line".Type = "Service Invoice Line".Type::"G/L Account"));
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceInvoiceLine_Body1(var "Service Invoice Line" : Record "Service Invoice Line");
	begin
		with "Service Invoice Line" do begin
			ReportForNavSetShowOutput("Service Invoice Line"."Description 2" <> '');
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceInvoiceLine_Body2(var "Service Invoice Line" : Record "Service Invoice Line");
	begin
		with "Service Invoice Line" do begin
			ReportForNavSetShowOutput("Service Invoice Line".Type = "Service Invoice Line".Type::Resource);
		end;// Autogenerated by ForNav;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'ServiceInvoiceHeader':
				begin
					jsonObject.Add('CurrReport$Language$Integer',CurrReport.Language);
				end;
			'PageLoop':
				begin
						ReportForNavShowOutput := true; OnPreSectionPageLoop_Footer3(PageLoop); jsonObject.Add('$Footer3$Pre',ReportForNavShowOutput);
				end;
			'ServiceInvoiceLine':
				begin
					ReportForNavShowOutput := true; OnPreSectionServiceInvoiceLine_Body96("Service Invoice Line"); jsonObject.Add('$Body96$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceInvoiceLine_Body97("Service Invoice Line"); jsonObject.Add('$Body97$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceInvoiceLine_Body1("Service Invoice Line"); jsonObject.Add('$Body1$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceInvoiceLine_Body2("Service Invoice Line"); jsonObject.Add('$Body2$Pre',ReportForNavShowOutput);
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
