#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60032 "CCO Sales Invoice S4W"
{
    Caption = 'Sales Invoice S4W';
    Permissions = TableData "Sales Shipment Buffer" = rimd;
    WordLayout = './Layouts/CCOSalesInvoiceS4W.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Sales Invoice Header"; "Sales Invoice Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Posted Sales Invoice';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_SalesInvoiceHeader; ReportForNavWriteDataItem('SalesInvoiceHeader', "Sales Invoice Header")) { }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005, Format(ReportForNav.PagePlaceHolder)))
                {
                    IncludeCaption = false;
                }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_34; 34) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 2")
                    {
                        IncludeCaption = false;
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(E_Mail_BenutzerER; Kundendienst."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(CopyText; CopyText)
                    {
                        IncludeCaption = false;
                    }
                    column(SalesInvoiceHeaderDueDate_0_7; Format("Sales Invoice Header"."Due Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(VATRegistrationNo_SalesInvoiceHeader; "Sales Invoice Header"."VAT Registration No.")
                    {
                        IncludeCaption = false;
                    }
                    column(DUE019; DUE019)
                    {
                        IncludeCaption = false;
                    }
                    column(OrderNo_SalesInvoiceHeader; "Sales Invoice Header"."Order No.")
                    {
                        IncludeCaption = false;
                    }
                    column(SalesInvoiceHeaderDocumentDate_0_7; Format("Sales Invoice Header"."Document Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(UstIDText; UstIDText)
                    {
                        IncludeCaption = false;
                    }
                    column(Sell_toCustomerNo_SalesInvoiceHeader; "Sales Invoice Header"."Sell-to Customer No.")
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_SalesInvoiceHeader; "Sales Invoice Header"."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
                    {
                        IncludeCaption = false;
                    }
                    column(SalesInvoiceHeaderOrderDate_0_7; Format("Sales Invoice Header"."Order Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(ExternalDocumentNo_SalesInvoiceHeader; "Sales Invoice Header"."External Document No.")
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Telefonnr_BenutzerER; Kundendienst."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; Kundendienst.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(EMail_SalesPurchPerson; SalesPurchPerson."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_SalesPurchPerson; SalesPurchPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_SalesPurchPerson; SalesPurchPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE001; DUE001)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr8; CustAddr[8])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr7; CustAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE005; DUE005)
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_DUE004_SalesInvoiceHeaderNo; InvName)
                    {
                        IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Sales Invoice Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_76; 76) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not PostedDocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 %2', PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (PostedDocDim1.Next = 0);
                        end;

                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_78; 78) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Invoice Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem("Sales Invoice Line"; "Sales Invoice Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemLinkReference = "Sales Invoice Header";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_80; 80) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesInvoiceLine; ReportForNavWriteDataItem('SalesInvoiceLine', "Sales Invoice Line")) { }
                        column(AusgUbSchrEinzelpreis_PE; "AusgÜbSchrEinzelpreis/P.E.")
                        {
                            IncludeCaption = false;
                        }
                        column(WahrTxt; WährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(LineAmount_GesKorrSumme; "Line Amount" - GesKorrSumme)
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(PosZusammenzahlungsSumme; PosZusammenzählungsSumme)
                        {
                            IncludeCaption = false;
                        }
                        column(ZusammenzahlungsText; ZusammenzählungsText)
                        {
                            IncludeCaption = false;
                        }
                        column(Position_SalesInvoiceLine; "Sales Invoice Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_SalesInvoiceLine; "Sales Invoice Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(BelegZwNetto; BelegZwNetto)
                        {
                            IncludeCaption = false;
                        }
                        column(PostedShipmentDate; PostedShipmentDate)
                        {
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_SalesInvoiceLine; "Sales Invoice Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_SalesInvoiceLine; "Sales Invoice Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(No_SalesInvoiceLine; "Sales Invoice Line"."No.")
                        {
                            IncludeCaption = false;
                        }
                        column(AusgWahrTxt; AusgWährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgVKPreis; AusgVKPreis)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgBetragRechnsUndRabBetrag; AusgBetragRechnsUndRabBetrag)
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE010_DebArtikelnr; StrSubstNo(DUE010, ''))
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_SalesInvoiceLine; "Sales Invoice Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(LetztePosZusammenzahlungsSumme; LetztePosZusammenzählungsSumme)
                        {
                            IncludeCaption = false;
                        }
                        column(LetzterZusammenzahlungsText; LetzterZusammenzählungsText)
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE011_FORMAT_LineDiscountPct_; StrSubstNo(DUE011, Format("Line Discount %")))
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE011_SalesInvoiceHeaderInvoiceDiscCode; StrSubstNo(DUE011, "Sales Invoice Header"."Invoice Disc. Code"))
                        {
                            IncludeCaption = false;
                        }
                        column(InvDiscountAmount_SalesInvoiceLine; -"Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VerpackKost; VerpackKost)
                        {
                            IncludeCaption = false;
                        }
                        column(FrachtKost; FrachtKost)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE015; DUE015)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE014; DUE014)
                        {
                            IncludeCaption = false;
                        }
                        column(AmountIncludingVAT_SalesInvoiceLine; "Sales Invoice Line"."Amount Including VAT")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(AmountIncludingVAT_Amount; "Amount Including VAT" - Amount)
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(LineAmount_InvDiscountAmount; "Line Amount" - "Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalInclVATText; TotalInclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalExclVATText; TotalExclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
                        {
                            IncludeCaption = false;
                        }
                        column(Vorrauscpt1; VorauscptGesamt)
                        {
                            IncludeCaption = false;
                        }
                        column(Vorrauscpt2; VorauscptMWst)
                        {
                            IncludeCaption = false;
                        }
                        column(Vorrauscpt3; Vorauscptincl)
                        {
                            IncludeCaption = false;
                        }
                        column(Rechnungcpt3; Rechnungincl)
                        {
                            IncludeCaption = false;
                        }
                        column(REchnungcpt2; RechnungMWst)
                        {
                            IncludeCaption = false;
                        }
                        column(Rechnungcpt1; RechnungGesamt)
                        {
                            IncludeCaption = false;
                        }
                        column(ItemAmountIncludingVAT_Amount; ItemAmountIncludingVAT - ItemAmount)
                        {
                            IncludeCaption = false;
                        }
                        column(ItemAmountIncludingVAT; ItemAmountIncludingVAT)
                        {
                            IncludeCaption = false;
                        }
                        column(ItemLineAmount_InvDiscountAmount; ItemLineAmount - ItemInvDiscountAmount)
                        {
                            IncludeCaption = false;
                        }
                        column(GLAccAmountIncludingVAT_Amount; GLAccAmountIncludingVAT - GLAccAmount)
                        {
                            IncludeCaption = false;
                        }
                        column(GLAccAmountIncludingVAT; GLAccAmountIncludingVAT)
                        {
                            IncludeCaption = false;
                        }
                        column(GLAccLineAmount_InvDiscountAmount; GLAccLineAmount - GLAccInvDiscountAmount)
                        {
                            IncludeCaption = false;
                        }
                        column(Zusatzcapt; Zusatz)
                        {
                            IncludeCaption = false;
                        }
                        dataitem("Sales Shipment Buffer"; Integer)
                        {
                            DataItemTableView = sorting(Number);
                            column(ReportForNavId_113; 113) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_SalesShipmentBuffer; ReportForNavWriteDataItem('SalesShipmentBuffer', "Sales Shipment Buffer")) { }
                            column(Quantity_SalesShipmentBuffer; SalesShipmentBuffer.Quantity)
                            {
                                DecimalPlaces = 0 : 5;
                                IncludeCaption = false;
                            }
                            column(PostingDate_SalesShipmentBuffer; SalesShipmentBuffer."Posting Date")
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                SalesShipmentBuffer.SetRange("Document No.", "Sales Invoice Line"."Document No.");
                                SalesShipmentBuffer.SetRange("Line No.", "Sales Invoice Line"."Line No.");
                                SetRange(Number, 1, SalesShipmentBuffer.Count);
                                ReportForNav.OnPreDataItem('SalesShipmentBuffer', "Sales Shipment Buffer");
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then
                                    SalesShipmentBuffer.Find('-')
                                else
                                    SalesShipmentBuffer.Next;
                            end;

                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_116; 116) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText3; DimText)
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                // PostedDocDim2.SETRANGE("Table ID",DATABASE::"Sales Invoice Line");
                                // PostedDocDim2.SETRANGE("Document No.","Sales Invoice Line"."Document No.");
                                // PostedDocDim2.SETRANGE("Line No.","Sales Invoice Line"."Line No.");
                                PostedDocDim2.SetRange("Dimension Set ID", "Sales Invoice Line"."Dimension Set ID");

                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not PostedDocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 %2', PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (PostedDocDim2.Next = 0);
                            end;

                        }
                        dataitem(GesSu; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = const(1));
                            column(ReportForNavId_118; 118) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_GesSu; ReportForNavWriteDataItem('GesSu', GesSu)) { }
                            trigger OnPreDataItem();
                            begin
                                ReportForNav.OnPreDataItem('GesSu', GesSu);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                /*IF "Sales Invoice Line".Zwischensumme THEN
															  BelegZwNetto := 0;*/

                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            VATAmountLine.DeleteAll;
                            SalesShipmentBuffer.Reset;
                            SalesShipmentBuffer.DeleteAll;
                            FirstValueEntryNo := 0;
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            VerpackKost := 0;
                            FrachtKost := 0;
                            //GW180401
                            DruckEs := true;
                            //c/gw/160502: - Stichwort: PositonsZusammenzählung
                            if not "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" then
                                "AusgÜbSchrEinzelpreis/P.E." := DUE007
                            else
                                MarkZeilenDuplikatErstellen("Sales Invoice Line"); // siehe Komentar dort besonders betreff Fracht-Artikel
                            ReportForNav.OnPreDataItem('SalesInvoiceLine', "Sales Invoice Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            PostedShipmentDate := 0D;
                            if Quantity <> 0 then
                                PostedShipmentDate := FindPostedShipmentDate;
                            if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
                                "No." := '';
                            //DUE
                            /*FrachtJN := FALSE;
													IF "No." <> '' THEN
													  CASE "No." OF
														SalesSetup."Artikel Fracht1": BEGIN
															FrachtKost   := FrachtKost + Amount;
															FrachtJN	 := TRUE;
															GesKorrSumme := GesKorrSumme + Amount + "Inv. Discount Amount";
														  END;
														SalesSetup."Artikel Fracht2": BEGIN
															FrachtKost := FrachtKost + Amount;
															FrachtJN := TRUE;
															GesKorrSumme := GesKorrSumme + Amount + "Inv. Discount Amount";
														  END;
														SalesSetup."Artikel Verpackung": BEGIN
															VerpackKost := VerpackKost + Amount;
															FrachtJN := TRUE;
															GesKorrSumme := GesKorrSumme + Amount + "Inv. Discount Amount";
														  END;
													  END;*/
                            BelegZwNetto := BelegZwNetto + Amount + "Inv. Discount Amount";
                            //c/gw/150502: - Stichwort: PositonsZusammenzählung
                            if "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" then
                                ErmittlungPosZusammenzählung("Sales Invoice Line");
                            VATAmountLine.Init;
                            VATAmountLine."VAT Identifier" := "VAT Identifier";
                            VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                            VATAmountLine."Tax Group Code" := "Tax Group Code";
                            VATAmountLine."VAT %" := "VAT %";
                            VATAmountLine."VAT Base" := Amount;
                            VATAmountLine."Amount Including VAT" := "Amount Including VAT";
                            VATAmountLine."Line Amount" := "Line Amount";
                            if "Allow Invoice Disc." then
                                VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
                            VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
                            VATAmountLine.InsertLine;
                            //gw180401													  // AUSSCHLUSS ZEILEN	Art::Artikel,Menge=0
                            if ((Type <> Type::Item) and (Type <> Type::" ")) then    //	UND ZUGERÖRIGE	Art::" "
                                DruckEs := true                                         // Sachkonto und Ressourcen immer drucken
                            else                                                            //
                                if (Quantity <> 0) or (Amount + "Inv. Discount Amount" <> 0) then  // Betrag+Rechnungsrabattbetrag <> 0 immer drucken
                                    DruckEs := true                                      // Menge<>0 immer drucken
                                else                                                          //
                                    if (Type = Type::Item) then // und die Menge = 0		   //
                                        DruckEs := false                                          // nur bei Artikel mit Menge=0  "DruckEs" := false
                                    else                                                        //
                                        if Description = '' then                                 //
                                            DruckEs := true;                                      // Bei Art::" " Erst bei Beschreibung = '' DruckEs := true


                            // >> Total
                            if "Sales Invoice Line".Type <> "Sales Invoice Line".Type::"G/L Account" then begin
                                ItemAmount += "Sales Invoice Line".Amount;
                                ItemAmountIncludingVAT += "Sales Invoice Line"."Amount Including VAT";
                                ItemInvDiscountAmount += "Sales Invoice Line"."Inv. Discount Amount";
                                ItemLineAmount += "Sales Invoice Line"."Line Amount";
                            end else begin
                                GLAccAmount += "Sales Invoice Line".Amount;
                                GLAccAmountIncludingVAT += "Sales Invoice Line"."Amount Including VAT";
                                GLAccInvDiscountAmount += "Sales Invoice Line"."Inv. Discount Amount";
                                GLAccLineAmount += "Sales Invoice Line"."Line Amount";
                                GLAccReaded := true;
                            end;
                            // << Total

                        end;

                        trigger OnPostDataItem();
                        begin
                            //c/gw/160502: - Stichwort: PositonsZusammenzählung
                            if "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" then
                                ZeilenDuplikatRecSet.ClearMarks;
                        end;

                    }
                    dataitem(VATCounter; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_119; 119) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter', VATCounter)) { }
                        column(InvoiceDiscountAmount_VATAmountLine; VATAmountLine."Invoice Discount Amount")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(InvDiscBaseAmount_VATAmountLine; VATAmountLine."Inv. Disc. Base Amount")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(LineAmount_VATAmountLine; VATAmountLine."Line Amount")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATAmount_VATAmountLine; VATAmountLine."VAT Amount")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATBase_VATAmountLine; VATAmountLine."VAT Base")
                        {
                            AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATIdentifier_VATAmountLine; VATAmountLine."VAT Identifier")
                        {
                            IncludeCaption = false;
                        }
                        column(VATBase_VATAmountLine2; VATAmountLine."VAT Base")
                        {
                            AutoFormatExpression = "Sales Invoice Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATPct_VATAmountLine; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if VATAmountLine.GetTotalVATAmount = 0 then
                                CurrReport.Break;
                            if VATAmountLine.Count = 1 then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            ReportForNav.OnPreDataItem('VATCounter', VATCounter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                        end;

                    }
                    dataitem(VatCounterLCY; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_128; 128) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VatCounterLCY; ReportForNavWriteDataItem('VatCounterLCY', VatCounterLCY)) { }
                        column(VALExchRate; VALExchRate)
                        {
                            IncludeCaption = false;
                        }
                        column(VALSpecLCYHeader; VALSpecLCYHeader)
                        {
                            IncludeCaption = false;
                        }
                        column(VALVATAmountLCY; VALVATAmountLCY)
                        {
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VALVATBaseLCY; VALVATBaseLCY)
                        {
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATIdentifier_VATAmountLine2; VATAmountLine."VAT Identifier")
                        {
                            IncludeCaption = false;
                        }
                        column(VATPct_VATAmountLine2; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if (not GLSetup."Print VAT specification in LCY") or
                               ("Sales Invoice Header"."Currency Code" = '') or
                               (VATAmountLine.GetTotalVATAmount = 0) then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            if GLSetup."LCY Code" = '' then
                                VALSpecLCYHeader := Text007 + Text008
                            else
                                VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Sales Invoice Header"."Posting Date", "Sales Invoice Header"."Currency Code", 1);
                            CalculatedExchRate := ROUND(1 / "Sales Invoice Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount", 0.000001);
                            VALExchRate := StrSubstNo(Text009, CalculatedExchRate, CurrExchRate."Exchange Rate Amount");
                            ReportForNav.OnPreDataItem('VatCounterLCY', VatCounterLCY);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Invoice Header"."Currency Factor");
                            VALVATAmountLCY := ROUND(VATAmountLine."VAT Amount" / "Sales Invoice Header"."Currency Factor");
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_135; 135) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        column(VATText; VATText)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE041; DUE041)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE023; DUE023)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE022; DUE022)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE021; DUE021)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE020; DUE020)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE035; DUE035)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE034; DUE034)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_PaymentTerms; PaymentTerms.Description)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_ShipmentMethod; ShipmentMethod.Description)
                        {
                        }
                        column(LiefInnerg_DrittlandText; LiefInnerg_DrittlandText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_147; 147) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
                        trigger OnPreDataItem();
                        begin
                            if not ShowShippingAddr then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total2', Total2);
                        end;

                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_148; 148) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Invoice Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;

                    trigger OnAfterGetRecord();
                    begin

                    end;

                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + Cust."Invoice Copies" + 1;
                    if NoOfLoops <= 0 then
                        NoOfLoops := 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then
                        CopyText := Text003;

                    //gws+++
                    ClearPosZusammenzählung;
                    GesKorrSumme := 0;

                    // >> Total
                    GLAccReaded := false;
                    ItemAmount := 0;
                    ItemAmountIncludingVAT := 0;
                    ItemInvDiscountAmount := 0;
                    ItemLineAmount := 0;
                    GLAccAmount := 0;
                    GLAccAmountIncludingVAT := 0;
                    GLAccInvDiscountAmount := 0;
                    GLAccLineAmount := 0;
                    // << Total
                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        SalesInvCountPrinted.Run("Sales Invoice Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                EMailTxt := '';
                wwwTxt := '';
                if MitLogo then
                    CompanyInfo.CalcFields("Picture 2");
                CompanyInfo.CalcFields(Picture);
                ReportForNav.OnPreDataItem('SalesInvoiceHeader', "Sales Invoice Header");
            end;

            trigger OnAfterGetRecord();
            var
                TextVAT2010: label 'The tax liability is shifted to the recipient of the supply (Reverse-Charge) Art. 196 MwStSystRL.';
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //DUE

                if UpperCase(CopyStr("No.", 1, 4)) = 'VRKR' then
                    InvName := StrSubstNo(Profo)
                else
                    InvName := StrSubstNo(DUE004);

                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := CompanyInfo.Name + ' | ' + CompanyInfo.Address + ' | ' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter."Address 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + ' | ' + CompanyInfo.Address + ' | ' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get("Salesperson Code 2") then
                    Clear(BenutzerER);
                DebitorR.Get("Sell-to Customer No.");
                //c/gw/160502: - Stichwort: PositonsZusammenzählung
                if not "Pos.-Zus.-Zähl-Summen drucken" then
                    "AusgÜbSchrEinzelpreis/P.E." := DUE007
                else
                    "AusgÜbSchrEinzelpreis/P.E." := '';
                if "Currency Code" = '' then begin
                    GLSetup.Get;
                    GLSetup.TestField("LCY Code");
                    WährTxt := GLSetup."LCY Code";
                end else begin
                    WährTxt := "Currency Code";
                end;

                //UstID bei Innergemeinschaftlichen versand
                if "VAT Registration No." <> '' then
                    UstIDText := DUE031
                else
                    UstIDText := '';
                //Innergemeinschaflt. Lieferung (Steuerhinweis)
                LiefInnerg_DrittlandText := '';
                case "Sales Invoice Header"."VAT Bus. Posting Group" of
                    'AUSL.':
                        LiefInnerg_DrittlandText := DUE033;
                    'EU':
                        LiefInnerg_DrittlandText := DUE032;
                end;
                //DUE Ende
                // PostedDocDim1.SETRANGE("Table ID",DATABASE::"Sales Invoice Header");
                // PostedDocDim1.SETRANGE("Document No.","Sales Invoice Header"."No.");
                PostedDocDim1.SetRange("Dimension Set ID", "Sales Invoice Header"."Dimension Set ID");

                if "Order No." = '' then
                    OrderNoText := ''
                else
                    OrderNoText := FieldCaption("Order No.");
                if "Salesperson Code" = '' then begin
                    SalesPurchPerson.Init;
                    SalesPersonText := '';
                end else begin
                    SalesPurchPerson.Get("Salesperson Code");
                    SalesPersonText := Text000;
                    if BenutzerER."E-Mail" = '' then
                        BenutzerER."E-Mail" := SalesPurchPerson."E-Mail";
                    //Düperthal
                    /*IF SalesPurchPerson.Kundendienstverantwortlicher<>'' THEN
					  IF Kundendienst.GET(SalesPurchPerson.Kundendienstverantwortlicher) THEN BEGIN
						SalesPurchPerson.Name := Kundendienst.Name;
						SalesPurchPerson."Phone No." := Kundendienst."Phone No.";
						SalesPurchPerson."E-Mail" := Kundendienst."E-Mail";*/
                    if "Sales Invoice Header"."Salesperson Code 2" <> '' then
                        if not Kundendienst.Get("Sales Invoice Header"."Salesperson Code 2") then Kundendienst.Init;
                end;

                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text006, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text001, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text002, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text006, "Currency Code");
                end;
                FormatAddr.SalesInvBillTo(CustAddr, "Sales Invoice Header");
                if not Cust.Get("Bill-to Customer No.") then
                    Clear(Cust);
                if "Payment Terms Code" = '' then
                    PaymentTerms.Init
                else
                    PaymentTerms.Get("Payment Terms Code");
                if "Shipment Method Code" = '' then
                    ShipmentMethod.Init
                else
                    ShipmentMethod.Get("Shipment Method Code");
                //c/mt/03.09.10 START
                if SalesInvEuService("Sales Invoice Header") then begin
                    VATText := TextVAT2010;
                    //c/mt/15.09.11 START
                    LiefInnerg_DrittlandText := '';
                    //c/mt/15.09.11 STOP
                end else begin
                    VATText := '';
                end;
                //c/mt/03.09.10 STOP
                FormatAddr.SalesInvShipTo(ShipToAddr, CustAddr, "Sales Invoice Header");
                ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
                for i := 1 to ArrayLen(ShipToAddr) do
                    if ShipToAddr[i] <> CustAddr[i] then
                        ShowShippingAddr := true;
                if LogInteraction then
                    if not CurrReport.Preview then begin
                        if "Bill-to Contact No." <> '' then
                            SegManagement.LogDocument(
                              4, "No.", 0, 0, Database::Contact, "Bill-to Contact No.", "Salesperson Code",
                              "Campaign No.", "Posting Description", '')
                        else
                            SegManagement.LogDocument(
                              4, "No.", 0, 0, Database::Customer, "Bill-to Customer No.", "Salesperson Code",
                              "Campaign No.", "Posting Description", '');
                    end;


                // >> CC
                // IF "Sales Invoice Header"."VAT Bus. Posting Group" = '1' THEN BEGIN
                //  PrintVereinbarung := TRUE;
                //  END
                //  ELSE BEGIN
                //  PrintVereinbarung := FALSE;
                // END;
                // << CC

            end;

            trigger OnPostDataItem();
            begin

                // >> CC
                if PrintVereinbarung then begin
                    CertificateofSupply.SetRange(Rechnungsnummer, "Sales Invoice Header"."No.");
                    CertificateofSupply.SetRange("Document Type", CertificateofSupply."document type"::"Sales Shipment");
                    CertificateofSupply.FindFirst;
                    Report.RunModal(780, true, false, CertificateofSupply);
                end;
                // << CC
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                    }
                    field("Epost versenden"; EPOST)
                    {
                        ApplicationArea = Basic;
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            InitLogInteraction;

        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        CompanyInfo.Get;
        SalesSetup.Get;
        CompanyInfo.CalcFields(Picture, "Picture 2");
        ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo1.Get;
                    CompanyInfo1.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo2.Get;
                    CompanyInfo2.CalcFields(Picture);
                end;
        end;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        if not CurrReport.UseRequestPage then
            InitLogInteraction;
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Salesperson';
        Text001: label 'Total %1';
        Text002: label 'Total %1 incl. VAT';
        Text003: label 'COPY';
        Text004: label 'Sales - Invoice %1';
        Text005: label 'Page %1';
        Text006: label 'Total %1 excl. VAT';
        CertificateofSupply: Record "Certificate of Supply";
        EPOST: Boolean;
        Laender: Record "Country/Region";
        GLSetup: Record "General Ledger Setup";
        ShipmentMethod: Record "Shipment Method";
        PaymentTerms: Record "Payment Terms";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInfo: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        Cust: Record Customer;
        VATAmountLine: Record "VAT Amount Line" temporary;
        PostedDocDim1: Record "Dimension Set Entry";
        PostedDocDim2: Record "Dimension Set Entry";
        RespCenter: Record "Responsibility Center";
        Language2: Codeunit Language;
        CurrExchRate: Record "Currency Exchange Rate";
        SalesInvCountPrinted: Codeunit "Sales Inv.-Printed";
        FormatAddr: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
        PostedShipmentDate: Date;
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        OrderNoText: Text[30];
        SalesPersonText: Text[30];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        TotalText: Text[50];
        TotalExclVATText: Text[50];
        TotalInclVATText: Text[50];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        ShowShippingAddr: Boolean;
        i: Integer;
        NextEntryNo: Integer;
        FirstValueEntryNo: Integer;
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        VALSpecLCYHeader: Text[80];
        Text007: label 'VAT Amount Specification in ';
        Text008: label 'Local Currency';
        VALExchRate: Text[50];
        Text009: label 'Exchange rate: %1/%2';
        CalculatedExchRate: Decimal;
        "---DUE...": Integer;
        BenutzerER: Record "User Setup";
        DebitorR: Record Customer;
        Kundendienst: Record "Salesperson/Purchaser";
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WährTxt": Text[10];
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        LieferTerminK: Text[20];
        LieferTerminZ: Text[30];
        AusgKalkStatus: Text[30];
        AusgAngKalkStatus: Text[30];
        "AusgÜbSchrEinzelpreis/P.E.": Text[30];
        MitLogo: Boolean;
        FormOpened: Boolean;
        verwenden: Boolean;
        FrachtJN: Boolean;
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        GesKorrSumme: Decimal;
        BelegZwNetto: Decimal;
        AusgVKPreis: Decimal;
        "AusgWährTxt": Text[10];
        AusgBetragRechnsUndRabBetrag: Decimal;
        DUE001: label 'Delivery Address:';
        DUE002: label 'E-mail:';
        DUE003: label 'Web:';
        DUE004: label 'Invoice';
        DUE005: label 'Always mention.';
        DUE006: label 'Thank you for your inquiry. We are pleased to submit our quotation as follows:';
        DUE007: label 'Unit Price';
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'The value added tax current at the time of the delivery applies.';
        DUE017: label 'We hope our offer meets your expectations. For all change requests or further questions and queries, we will be glad to';
        DUE018: label 'assist you. You may rest assured that your order will be executed with all due diligence.';
        DUE019: label 'Your Contact:';
        UstIDText: Text[30];
        DUE031: label 'VAT Registration No.';
        DUE032: label 'Tax-free intra-Community supply of goods';
        DUE033: label 'Steuerfreie Auslandslieferung in ein Drittland.';
        DUE034: label 'For discounts and reductions see our current conditions of payment and contract conditions.';
        DUE035: label 'The goods remain our property until full payment has been received.';
        LiefInnerg_DrittlandText: Text[250];
        DruckEs: Boolean;
        ZeilenDuplikatRecSet_: Record "Sales Invoice Line";
        AktuellerPosWert_: Decimal;
        "xPos.-Zus.-Zähl-Summen drucken": Boolean;
        "ZusammenzählungsText_": Text[50];
        "NächsterZusammenzählungsText_": Text[50];
        "PosZusammenzählungsSumme_": Decimal;
        "LetzterZusammenzählungsText_": Text[50];
        "LetztePosZusammenzählungsSumm_": Decimal;
        "ZusammenzählungsText": Text[50];
        "NächsterZusammenzählungsText": Text[50];
        "PosZusammenzählungsSumme": Decimal;
        "LetzterZusammenzählungsText": Text[50];
        "LetztePosZusammenzählungsSumme": Decimal;
        ZeilenDuplikatRecSet: Record "Sales Invoice Line";
        AktuellerPosWert: Decimal;
        VKEinrR: Record "Sales & Receivables Setup";
        DUE020: label 'Our general terms and counditions of sale apply.';
        DUE021: label 'You will find our general terms and conditions following www.safety-4-work.com.';
        DUE022: label 'Our tip: Web-enquiry with www.dueperthal.com. Every click pays!';
        DUE023: label 'For all payments please indicate the below stated bank details.';
        VATText: Text[250];
        DUE041: label 'Delivery address = Recipient of service/delivery and Delivery date = Date of service/delivery rendered';
        "---TFS---": Integer;
        CountryRegion: Record "Country/Region";
        TempServiceShipmentHeader: Record "Service Shipment Header" temporary;
        TempServiceShipmentLine: Record "Service Shipment Line" temporary;
        PrintLineDetails: Boolean;
        BillToFullAddress: Text[250];
        ShipToFullAddress: Text[250];
        TempSalesShptLine: Record "Sales Shipment Line" temporary;
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";
        TempTMLine: Record "CCS TM Line Document" temporary;
        InvName: Text;
        Profo: label 'Proforma invoice %1';
        ItemLineAmount: Decimal;
        ItemAmount: Decimal;
        ItemAmountIncludingVAT: Decimal;
        ItemInvDiscountAmount: Decimal;
        GLAccLineAmount: Decimal;
        GLAccAmount: Decimal;
        GLAccAmountIncludingVAT: Decimal;
        GLAccInvDiscountAmount: Decimal;
        GLAccReaded: Boolean;
        DUE030: label 'Umsatzsteuerfreie Innergemeinschaftliche Lieferung gem. § 4 Nr. 1b UStG';
        DUE029: label 'Umsatzsteuerfreie Ausfuhrlieferung gem. § 4 Nr. 1a UStG';
        Zusatz: Text[60];
        VorauscptGesamt: label 'Prepayment';
        VorauscptMWst: label 'Prepayment VAT';
        Vorauscptincl: label 'Prepayment incl. VAT';
        RechnungGesamt: label 'Invoice Amount';
        RechnungMWst: label 'Invoice VAT';
        Rechnungincl: label 'Invoice Amount incl. VAT';
        PrintVereinbarung: Boolean;

    procedure InitLogInteraction()
    var
        DocumentType: Enum "Interaction Log Entry Document Type";
    begin
        LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Inv.") <> '';
    end;

    procedure FindPostedShipmentDate(): Date
    var
        SalesShipmentHeader: Record "Sales Shipment Header";
        SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
    begin
        NextEntryNo := 1;
        if "Sales Invoice Line"."Shipment No." <> '' then
            if SalesShipmentHeader.Get("Sales Invoice Line"."Shipment No.") then
                exit(SalesShipmentHeader."Posting Date");
        if "Sales Invoice Header"."Order No." = '' then
            exit("Sales Invoice Header"."Posting Date");
        case "Sales Invoice Line".Type of
            "Sales Invoice Line".Type::Item:
                GenerateBufferFromValueEntry("Sales Invoice Line");
            "Sales Invoice Line".Type::"G/L Account", "Sales Invoice Line".Type::Resource,
          "Sales Invoice Line".Type::"Charge (Item)", "Sales Invoice Line".Type::"Fixed Asset":
                GenerateBufferFromShipment("Sales Invoice Line");
            "Sales Invoice Line".Type::" ":
                exit(0D);
        end;
        SalesShipmentBuffer.Reset;
        SalesShipmentBuffer.SetRange("Document No.", "Sales Invoice Line"."Document No.");
        SalesShipmentBuffer.SetRange("Line No.", "Sales Invoice Line"."Line No.");
        if SalesShipmentBuffer.Find('-') then begin
            SalesShipmentBuffer2 := SalesShipmentBuffer;
            if SalesShipmentBuffer.Next = 0 then begin
                SalesShipmentBuffer.Get(
                  SalesShipmentBuffer2."Document No.", SalesShipmentBuffer2."Line No.", SalesShipmentBuffer2."Entry No.");
                SalesShipmentBuffer.Delete;
                exit(SalesShipmentBuffer2."Posting Date");
                ;
            end;
            SalesShipmentBuffer.CalcSums(Quantity);
            if SalesShipmentBuffer.Quantity <> "Sales Invoice Line".Quantity then begin
                SalesShipmentBuffer.DeleteAll;
                exit("Sales Invoice Header"."Posting Date");
            end;
        end else
            exit("Sales Invoice Header"."Posting Date");
    end;

    procedure GenerateBufferFromValueEntry(SalesInvoiceLine2: Record "Sales Invoice Line")
    var
        ValueEntry: Record "Value Entry";
        ItemLedgerEntry: Record "Item Ledger Entry";
        TotalQuantity: Decimal;
        Quantity: Decimal;
    begin
        TotalQuantity := SalesInvoiceLine2."Quantity (Base)";
        ValueEntry.SetCurrentkey("Document No.");
        ValueEntry.SetRange("Document No.", SalesInvoiceLine2."Document No.");
        ValueEntry.SetRange("Posting Date", "Sales Invoice Header"."Posting Date");
        ValueEntry.SetRange("Item Charge No.", '');
        ValueEntry.SetFilter("Entry No.", '%1..', FirstValueEntryNo);
        if ValueEntry.Find('-') then
            repeat
                if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
                    if SalesInvoiceLine2."Qty. per Unit of Measure" <> 0 then
                        Quantity := ValueEntry."Invoiced Quantity" / SalesInvoiceLine2."Qty. per Unit of Measure"
                    else
                        Quantity := ValueEntry."Invoiced Quantity";
                    AddBufferEntry(
                      SalesInvoiceLine2,
                      -Quantity,
                      ItemLedgerEntry."Posting Date");
                    TotalQuantity := TotalQuantity + ValueEntry."Invoiced Quantity";
                end;
                FirstValueEntryNo := ValueEntry."Entry No." + 1;
            until (ValueEntry.Next = 0) or (TotalQuantity = 0);
    end;

    procedure GenerateBufferFromShipment(SalesInvoiceLine: Record "Sales Invoice Line")
    var
        SalesInvoiceHeader: Record "Sales Invoice Header";
        SalesInvoiceLine2: Record "Sales Invoice Line";
        SalesShipmentHeader: Record "Sales Shipment Header";
        SalesShipmentLine: Record "Sales Shipment Line";
        TotalQuantity: Decimal;
        Quantity: Decimal;
    begin
        TotalQuantity := 0;
        SalesInvoiceHeader.SetCurrentkey("Order No.");
        SalesInvoiceHeader.SetFilter("No.", '..%1', "Sales Invoice Header"."No.");
        SalesInvoiceHeader.SetRange("Order No.", "Sales Invoice Header"."Order No.");
        if SalesInvoiceHeader.Find('-') then
            repeat
                SalesInvoiceLine2.SetRange("Document No.", SalesInvoiceHeader."No.");
                SalesInvoiceLine2.SetRange("Line No.", SalesInvoiceLine."Line No.");
                SalesInvoiceLine2.SetRange(Type, SalesInvoiceLine.Type);
                SalesInvoiceLine2.SetRange("No.", SalesInvoiceLine."No.");
                SalesInvoiceLine2.SetRange("Unit of Measure Code", SalesInvoiceLine."Unit of Measure Code");
                if SalesInvoiceLine2.Find('-') then
                    repeat
                        TotalQuantity := TotalQuantity + SalesInvoiceLine2.Quantity;
                    until SalesInvoiceLine2.Next = 0;
            until SalesInvoiceHeader.Next = 0;
        SalesShipmentLine.SetCurrentkey("Order No.", "Order Line No.");
        SalesShipmentLine.SetRange("Order No.", "Sales Invoice Header"."Order No.");
        SalesShipmentLine.SetRange("Order Line No.", SalesInvoiceLine."Line No.");
        SalesShipmentLine.SetRange("Line No.", SalesInvoiceLine."Line No.");
        SalesShipmentLine.SetRange(Type, SalesInvoiceLine.Type);
        SalesShipmentLine.SetRange("No.", SalesInvoiceLine."No.");
        SalesShipmentLine.SetRange("Unit of Measure Code", SalesInvoiceLine."Unit of Measure Code");
        SalesShipmentLine.SetFilter(Quantity, '<>%1', 0);
        if SalesShipmentLine.Find('-') then
            repeat
                if "Sales Invoice Header"."Get Shipment Used" then
                    CorrectShipment(SalesShipmentLine);
                if Abs(SalesShipmentLine.Quantity) <= Abs(TotalQuantity - SalesInvoiceLine.Quantity) then
                    TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity
                else begin
                    if Abs(SalesShipmentLine.Quantity) > Abs(TotalQuantity) then
                        SalesShipmentLine.Quantity := TotalQuantity;
                    Quantity :=
                      SalesShipmentLine.Quantity - (TotalQuantity - SalesInvoiceLine.Quantity);
                    TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity;
                    SalesInvoiceLine.Quantity := SalesInvoiceLine.Quantity - Quantity;
                    if SalesShipmentHeader.Get(SalesShipmentLine."Document No.") then begin
                        AddBufferEntry(
                          SalesInvoiceLine,
                          Quantity,
                          SalesShipmentHeader."Posting Date");
                    end;
                end;
            until (SalesShipmentLine.Next = 0) or (TotalQuantity = 0);
    end;

    procedure CorrectShipment(var SalesShipmentLine: Record "Sales Shipment Line")
    var
        SalesInvoiceLine: Record "Sales Invoice Line";
    begin
        SalesInvoiceLine.SetCurrentkey("Shipment No.", "Shipment Line No.");
        SalesInvoiceLine.SetRange("Shipment No.", SalesShipmentLine."Document No.");
        SalesInvoiceLine.SetRange("Shipment Line No.", SalesShipmentLine."Line No.");
        if SalesInvoiceLine.Find('-') then
            repeat
                SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
            until SalesInvoiceLine.Next = 0;
    end;

    procedure AddBufferEntry(SalesInvoiceLine: Record "Sales Invoice Line"; QtyOnShipment: Decimal; PostingDate: Date)
    begin
        SalesShipmentBuffer.SetRange("Document No.", SalesInvoiceLine."Document No.");
        SalesShipmentBuffer.SetRange("Line No.", SalesInvoiceLine."Line No.");
        SalesShipmentBuffer.SetRange("Posting Date", PostingDate);
        if SalesShipmentBuffer.Find('-') then begin
            SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity + QtyOnShipment;
            SalesShipmentBuffer.Modify;
            exit;
        end;
        with SalesShipmentBuffer do begin
            "Document No." := SalesInvoiceLine."Document No.";
            "Line No." := SalesInvoiceLine."Line No.";
            "Entry No." := NextEntryNo;
            Type := SalesInvoiceLine.Type;
            "No." := SalesInvoiceLine."No.";
            Quantity := QtyOnShipment;
            "Posting Date" := PostingDate;
            Insert;
            NextEntryNo := NextEntryNo + 1
        end;
    end;

    procedure "--DUE..."()
    begin
    end;

    procedure MarkZeilenDuplikatErstellen_(var Zeile: Record "Sales Invoice Line")
    var
        Satz: Text[1];
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        /*---
		ZeilenDuplikatRecSet.COPYFILTERS(Zeile);							  // Somit  ist wirklich ein Duplikat dieses RecordSet
		WHILE ZeilenDuplikatRecSet.FIND(NächstenPlausiblen(Satz)) DO
		  CASE ZeilenDuplikatRecSet.Type OF
			ZeilenDuplikatRecSet.Type:: Item:
			  ZeilenDuplikatRecSet.MARK(
				(ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Fracht1") AND
				(ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Fracht2") AND
				(ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Verpackung"));
			ELSE
			  ZeilenDuplikatRecSet.MARK(TRUE);
		  END;																// Signifikant ist nur was MARKiert ist !!!
		---*/

    end;

    procedure IstMarkiert_(var Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        /*---
		ZeilenDuplikatRecSet."Document No." := Zeile."Document No.";
		ZeilenDuplikatRecSet."Line No." := Zeile."Line No.";
		ZeilenDuplikatRecSet.FIND('=');
		EXIT(ZeilenDuplikatRecSet.MARK);
		---*/

    end;

    procedure "NächstenPlausiblen_"(var VorhergehenderSuchOperator: Text[1]) RetVal: Text[1]
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        /*---
		IF VorhergehenderSuchOperator = '' THEN
		  RetVal := '-'
		ELSE
		  RetVal := '>';
		VorhergehenderSuchOperator := RetVal;
		---*/

    end;

    procedure "ErmittlungPosZusammenzählung_"(var Zeile: Record "Sales Invoice Line")
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        /*---
		IF IstImRecSetErste(Zeile) THEN BEGIN
		  AktuellerPosWert := 0;
		  LetztePosZusammenzählungsSumme := 0;
		  NächsterZusammenzählungsText := 'Summe Position ' + Zeile.Position;
		END;
		//CLEAR(PosZusammenzählungsSumme);	gws
		PosZusammenzählungsSumme := GetPosZusammenzählungsSummen(Zeile);	 // gws {}  Array?
		IF IstImRecSetLetzte(Zeile) THEN  BEGIN
		  //gws
		  LetztePosZusammenzählungsSumme := AktuellerPosWert;
		  LetzterZusammenzählungsText := NächsterZusammenzählungsText;
		END;
		---*/

    end;

    procedure "GetPosZusammenzählungsSummen_"(Zeile: Record "Sales Invoice Line") RetVal: Decimal
    var
        Pos: Text[5];
        PosBetrag: Decimal;
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        /*---
		Pos := DELCHR(Zeile.Position, '<>', ' ');
		IF IstImRecSetFolge(Zeile) THEN BEGIN
		  IF STRPOS(Pos,'.') > 0 THEN BEGIN
			IF (Pos[STRLEN(Pos)] = '.') THEN BEGIN
			  RetVal := AktuellerPosWert;
			  ZusammenzählungsText := NächsterZusammenzählungsText;
			  NächsterZusammenzählungsText := 'Summe Position ' + Zeile.Position;
			  //CLEAR(AktuellerPosWert);
			END;
		  END;
		END;
		IF IstMarkiert(Zeile) THEN
		  AktuellerPosWert := AktuellerPosWert + Zeile.Amount+Zeile."Inv. Discount Amount";
		---*/

    end;

    procedure IstImRecSetErste_(Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        /*---
		IF ZeilenDuplikatRecSet.FIND('-') THEN
		  EXIT(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
		---*/

    end;

    procedure IstImRecSetFolge_(Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        /*---
		IF ZeilenDuplikatRecSet.FIND('-') THEN
		  EXIT(ZeilenDuplikatRecSet."Line No." <> Zeile."Line No.")
		---*/

    end;

    procedure IstImRecSetLetzte_(Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        /*---
		IF ZeilenDuplikatRecSet.FIND('+') THEN
		  EXIT(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
		---*/

    end;

    procedure "ClearPosZusammenzählung_"()
    begin
        /*---
		//c/gw/020903: - Problem bei Stapeldruck
		CLEAR(ZusammenzählungsText);
		CLEAR(NächsterZusammenzählungsText);
		CLEAR(PosZusammenzählungsSumme);
		CLEAR(LetzterZusammenzählungsText);
		CLEAR(LetztePosZusammenzählungsSumme);
		CLEAR(ZeilenDuplikatRecSet);
		CLEAR(AktuellerPosWert);
		---*/

    end;

    procedure "c/gw150502 Functions ** BEGINN"()
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
    end;

    procedure "ClearPosZusammenzählung"()
    begin
        //c/gw/020903: - Problem bei Stapeldruck
        Clear(ZusammenzählungsText);
        Clear(NächsterZusammenzählungsText);
        Clear(PosZusammenzählungsSumme);
        Clear(LetzterZusammenzählungsText);
        Clear(LetztePosZusammenzählungsSumme);
        Clear(ZeilenDuplikatRecSet);
        Clear(AktuellerPosWert);
    end;

    procedure "ErmittlungPosZusammenzählung"(var Zeile: Record "Sales Invoice Line")
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        if IstImRecSetErste(Zeile) then begin
            AktuellerPosWert := 0;
            LetztePosZusammenzählungsSumme := 0;
            NächsterZusammenzählungsText := 'Summe Position ' + Zeile.Position;
        end;
        PosZusammenzählungsSumme := GetPosZusammenzählungsSummen(Zeile);
        if IstImRecSetLetzte(Zeile) then begin
            LetztePosZusammenzählungsSumme := AktuellerPosWert;
            LetzterZusammenzählungsText := NächsterZusammenzählungsText
        end;
    end;

    procedure "GetPosZusammenzählungsSummen"(var Zeile: Record "Sales Invoice Line") RetVal: Decimal
    var
        Pos: Text[5];
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        Pos := DelChr(Zeile.Position, '<>', ' ');
        if IstImRecSetFolge(Zeile) then begin
            if StrPos(Pos, '.') > 0 then begin
                if (Pos[StrLen(Pos)] = '.') then begin
                    RetVal := AktuellerPosWert;
                    ZusammenzählungsText := NächsterZusammenzählungsText;
                    NächsterZusammenzählungsText := 'Summe Position ' + Zeile.Position;
                    AktuellerPosWert := 0;
                end;
            end;
        end;
        if IstMarkiert(Zeile) then
            AktuellerPosWert := AktuellerPosWert + Zeile.Amount + Zeile."Inv. Discount Amount";
    end;

    procedure IstImRecSetErste(Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('-') then
            exit(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
    end;

    procedure IstImRecSetFolge(Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('-') then
            exit(ZeilenDuplikatRecSet."Line No." <> Zeile."Line No.")
    end;

    procedure IstImRecSetLetzte(Zeile: Record "Sales Invoice Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('+') then
            exit(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
    end;

    procedure MarkZeilenDuplikatErstellen(var Zeile: Record "Sales Invoice Line")
    var
        Satz: Text[1];
    begin
        VKEinrR.Get;
        ZeilenDuplikatRecSet.CopyFilters(Zeile);                              // Somit  ist wirklich ein Duplikat dieses RecordSet
        while ZeilenDuplikatRecSet.Find(NächstenPlausiblen(Satz)) do
            case ZeilenDuplikatRecSet.Type of
                ZeilenDuplikatRecSet.Type::Item:
                    ZeilenDuplikatRecSet.Mark(
                      (ZeilenDuplikatRecSet."No." <> VKEinrR."Artikel Fracht1") and
                      (ZeilenDuplikatRecSet."No." <> VKEinrR."Artikel Fracht2") and
                      (ZeilenDuplikatRecSet."No." <> VKEinrR."Artikel Verpackung"));
                else
                    ZeilenDuplikatRecSet.Mark(true);
            end;                                                                // Signifikant ist nur was MARKiert ist !!!
    end;

    procedure IstMarkiert(var Zeile: Record "Sales Invoice Line"): Boolean
    begin
        ZeilenDuplikatRecSet."Document No." := Zeile."Document No.";
        ZeilenDuplikatRecSet."Line No." := Zeile."Line No.";
        ZeilenDuplikatRecSet.Find('=');
        exit(ZeilenDuplikatRecSet.Mark);
    end;

    procedure "NächstenPlausiblen"(var VorhergehenderSuchOperator: Text[1]) RetVal: Text[1]
    begin
        if VorhergehenderSuchOperator = '' then
            RetVal := '-'
        else
            RetVal := '>';
        VorhergehenderSuchOperator := RetVal;
    end;

    procedure "---VAT2010---"()
    begin
    end;

    procedure SalesInvEuService(pSalesInvHeader: Record "Sales Invoice Header") eEuService: Boolean
    var
        lSalesInvLine: Record "Sales Invoice Line";
        lVatPostSetup: Record "VAT Posting Setup";
    begin
        // SalesInvEuService - Test, ob auf gebuchter Rechnung der Hinweis auf Reverse Charge erfolgen muss
        eEuService := false;
        lSalesInvLine.Reset;
        lSalesInvLine.SetRange("Document No.", pSalesInvHeader."No.");
        lSalesInvLine.SetFilter(Type, '> %1', lSalesInvLine.Type::" ");
        lSalesInvLine.SetFilter(Quantity, '<> %1', 0);
        if lSalesInvLine.FindSet() then begin
            repeat
                if lVatPostSetup.Get(lSalesInvLine."VAT Bus. Posting Group", lSalesInvLine."VAT Prod. Posting Group") then
                    //  IF lVatPostSetup."Reverse Charge Text" THEN
                    eEuService := true;
            until (lSalesInvLine.Next = 0) or eEuService;
        end;
    end;

    procedure "---TFS FUNC---"()
    begin
    end;

    local procedure SetSource(CertificateOfSupply: Record "Certificate of Supply")
    var
        SalesShipmentHeader: Record "Sales Shipment Header";
        ServiceShipmentHeader: Record "Service Shipment Header";
        ReturnShipmentHeader: Record "Return Shipment Header";
        "---DUE---": Integer;
        SalesInvHeader: Record "Sales Invoice Header";
    begin
        case CertificateOfSupply."Document Type" of
            CertificateOfSupply."document type"::"Sales Shipment":
                begin
                    SalesShipmentHeader.Get(CertificateOfSupply."Document No.");
                    SetSourceSales(SalesShipmentHeader);
                end;
            CertificateOfSupply."document type"::"Service Shipment":
                begin
                    ServiceShipmentHeader.Get(CertificateOfSupply."Document No.");
                    SetSourceService(ServiceShipmentHeader);
                end;
            CertificateOfSupply."document type"::"Return Shipment":
                begin
                    ReturnShipmentHeader.Get(CertificateOfSupply."Document No.");
                    SetSourcePurchase(ReturnShipmentHeader);
                end;
        //c/mt/17.12.13 START
        /* CertificateOfSupply."Document Type"::"Sales Invoice":
		   BEGIN
			 SalesInvHeader.GET(CertificateOfSupply."Document No.");
			 SetSourceSalesInv(SalesInvHeader);
		   END;*/
        //c/mt/17.12.13 STOP
        end;
        with TempServiceShipmentHeader do begin
            BillToFullAddress := FormatAddress("Bill-to Name", "Bill-to Address",
              "Bill-to Address 2", "Bill-to City", "Bill-to Country/Region Code")
              + ' ' + "E-Mail";
            ShipToFullAddress := FormatAddress("Ship-to Name", "Ship-to Address",
              "Ship-to Address 2", "Ship-to City", "Ship-to Country/Region Code")
        end;

    end;

    local procedure SetSourceSales(SalesShipmentHeader: Record "Sales Shipment Header")
    var
        Customer: Record Customer;
    begin
        // bill to details
        Customer.Get(SalesShipmentHeader."Bill-to Customer No.");
        TempServiceShipmentHeader."Bill-to Name" := SalesShipmentHeader."Bill-to Name";
        TempServiceShipmentHeader."Bill-to Customer No." := SalesShipmentHeader."Bill-to Customer No.";
        TempServiceShipmentHeader."Bill-to Address" := SalesShipmentHeader."Bill-to Address";
        TempServiceShipmentHeader."Bill-to Address 2" := SalesShipmentHeader."Bill-to Address 2";
        TempServiceShipmentHeader."Bill-to City" := SalesShipmentHeader."Bill-to City";
        TempServiceShipmentHeader."Bill-to Country/Region Code" := SalesShipmentHeader."Bill-to Country/Region Code";
        TempServiceShipmentHeader."E-Mail" := Customer."E-Mail";
        TempServiceShipmentHeader."No." := SalesShipmentHeader."No.";
        // ship contact details
        TempServiceShipmentHeader."Ship-to Name" := SalesShipmentHeader."Ship-to Name";
        TempServiceShipmentHeader."Ship-to Address" := SalesShipmentHeader."Ship-to Address";
        TempServiceShipmentHeader."Ship-to Address 2" := SalesShipmentHeader."Ship-to Address 2";
        TempServiceShipmentHeader."Ship-to City" := SalesShipmentHeader."Ship-to City";
        TempServiceShipmentHeader."Ship-to Country/Region Code" := SalesShipmentHeader."Ship-to Country/Region Code";
    end;

    local procedure SetSourceService(ServiceShipmentHeader: Record "Service Shipment Header")
    begin
        TempServiceShipmentHeader := ServiceShipmentHeader;
    end;

    local procedure SetSourcePurchase(ReturnShipmentHeader: Record "Return Shipment Header")
    var
        Vendor: Record Vendor;
    begin
        Vendor.Get(ReturnShipmentHeader."Buy-from Vendor No.");
        // bill to details
        TempServiceShipmentHeader."Bill-to Name" := ReturnShipmentHeader."Buy-from Vendor Name";
        TempServiceShipmentHeader."Bill-to Address" := ReturnShipmentHeader."Buy-from Address";
        TempServiceShipmentHeader."Bill-to Address 2" := ReturnShipmentHeader."Buy-from Address 2";
        TempServiceShipmentHeader."Bill-to City" := ReturnShipmentHeader."Buy-from City";
        TempServiceShipmentHeader."Bill-to Country/Region Code" := ReturnShipmentHeader."Buy-from Country/Region Code";
        TempServiceShipmentHeader."E-Mail" := Vendor."E-Mail";
        TempServiceShipmentHeader."No." := ReturnShipmentHeader."No.";
        // ship contact details
        TempServiceShipmentHeader."Ship-to Name" := ReturnShipmentHeader."Ship-to Name";
        TempServiceShipmentHeader."Ship-to Address" := ReturnShipmentHeader."Ship-to Address";
        TempServiceShipmentHeader."Ship-to Address 2" := ReturnShipmentHeader."Ship-to Address 2";
        TempServiceShipmentHeader."Ship-to City" := ReturnShipmentHeader."Ship-to City";
        TempServiceShipmentHeader."Ship-to Country/Region Code" := ReturnShipmentHeader."Ship-to Country/Region Code";
    end;

    local procedure GetLines(CertificateOfSupply: Record "Certificate of Supply")
    var
        SalesShipmentHeader: Record "Sales Shipment Header";
        ServiceShipmentHeader: Record "Service Shipment Header";
        ReturnShipmentHeader: Record "Return Shipment Header";
        SalesInvHeader: Record "Sales Invoice Header";
    begin
        case CertificateOfSupply."Document Type" of
            CertificateOfSupply."document type"::"Sales Shipment":
                begin
                    SalesShipmentHeader.Get(CertificateOfSupply."Document No.");
                    GetSalesLines(SalesShipmentHeader."No.");
                end;
            CertificateOfSupply."document type"::"Service Shipment":
                begin
                    ServiceShipmentHeader.Get(CertificateOfSupply."Document No.");
                    GetServiceLines(ServiceShipmentHeader."No.");
                end;
            CertificateOfSupply."document type"::"Return Shipment":
                begin
                    ReturnShipmentHeader.Get(CertificateOfSupply."Document No.");
                    GetPurchaseLines(ReturnShipmentHeader."No.");
                end;
        //c/mt/17.12.13 START
        /* CertificateOfSupply."Document Type"::"Sales Invoice":
		   BEGIN
			 SalesInvHeader.GET(CertificateOfSupply."Document No.");
			 GetSalesLinesInv(SalesInvHeader."No.");
		   END;*/
        //c/mt/17.12.13 STOP
        end;
        TempServiceShipmentLine.FindSet;

    end;

    local procedure GetSalesLines(SalesShipmentHeaderNo: Code[20])
    var
        SalesShipmentLine: Record "Sales Shipment Line";
    begin
        SalesShipmentLine.SetRange("Document No.", SalesShipmentHeaderNo);
        if SalesShipmentLine.FindSet then
            repeat
                TempServiceShipmentLine."Line No." := SalesShipmentLine."Line No.";
                TempServiceShipmentLine."No." := SalesShipmentLine."No.";
                TempServiceShipmentLine.Description := SalesShipmentLine.Description;
                TempServiceShipmentLine.Quantity := SalesShipmentLine.Quantity;
                TempServiceShipmentLine."Unit of Measure Code" := SalesShipmentLine."Unit of Measure";
                TempServiceShipmentLine.Insert;
            until SalesShipmentLine.Next = 0;
    end;

    local procedure GetServiceLines(ServiceShipmentHeaderNo: Code[20])
    var
        ServiceShipmentLine: Record "Service Shipment Line";
    begin
        ServiceShipmentLine.SetRange("Document No.", ServiceShipmentHeaderNo);
        if ServiceShipmentLine.FindSet then
            repeat
                TempServiceShipmentLine := ServiceShipmentLine;
                TempServiceShipmentLine.Insert;
            until ServiceShipmentLine.Next = 0;
    end;

    local procedure GetPurchaseLines(ReturnShipmentHeaderNo: Code[20])
    var
        ReturnShipmentLine: Record "Return Shipment Line";
    begin
        ReturnShipmentLine.SetRange("Document No.", ReturnShipmentHeaderNo);
        if ReturnShipmentLine.FindSet then
            repeat
                TempServiceShipmentLine."Line No." := ReturnShipmentLine."Line No.";
                TempServiceShipmentLine."No." := ReturnShipmentLine."No.";
                TempServiceShipmentLine.Description := ReturnShipmentLine.Description;
                TempServiceShipmentLine.Quantity := ReturnShipmentLine.Quantity;
                TempServiceShipmentLine."Unit of Measure Code" := ReturnShipmentLine."Unit of Measure";
                TempServiceShipmentLine.Insert;
            until ReturnShipmentLine.Next = 0;
    end;

    local procedure GetLanguageCode(CertificateOfSupply: Record "Certificate of Supply"): Code[10]
    var
        SalesShipmentHeader: Record "Sales Shipment Header";
        ServiceShipmentHeader: Record "Service Shipment Header";
        ReturnShipmentHeader: Record "Return Shipment Header";
        SalesInvHeader: Record "Sales Invoice Header";
    begin
        case CertificateOfSupply."Document Type" of
            CertificateOfSupply."document type"::"Sales Shipment":
                begin
                    SalesShipmentHeader.Get(CertificateOfSupply."Document No.");
                    exit(SalesShipmentHeader."Language Code");
                end;
            CertificateOfSupply."document type"::"Service Shipment":
                begin
                    ServiceShipmentHeader.Get(CertificateOfSupply."Document No.");
                    exit(ServiceShipmentHeader."Language Code");
                end;
            CertificateOfSupply."document type"::"Return Shipment":
                begin
                    ReturnShipmentHeader.Get(CertificateOfSupply."Document No.");
                    exit(ReturnShipmentHeader."Language Code");
                end;
        //c/mt/17.12.13 START
        /*CertificateOfSupply."Document Type"::"Sales Invoice":
		  BEGIN
			SalesInvHeader.GET(CertificateOfSupply."Document No.");
			EXIT(SalesInvHeader."Language Code");
		  END;*/
        //c/mt/17.12.13 STOP
        end;

    end;

    procedure FormatAddress(Name: Text[50]; Address: Text[50]; Address2: Text[50]; City: Text[30]; Country: Text[10]) FullAddress: Text[250]
    begin
        FullAddress := Name;
        if Address <> '' then
            FullAddress += ', ' + Address;
        if Address2 <> '' then
            FullAddress += ', ' + Address2;
        if City <> '' then
            FullAddress += ', ' + City;
        if Country <> '' then
            FullAddress += ', ' + Country;
        exit(FullAddress);
    end;

    local procedure SetSourceSalesInv(SalesInvHeader: Record "Sales Invoice Header")
    var
        Customer: Record Customer;
    begin
        // bill to details
        Customer.Get(SalesInvHeader."Bill-to Customer No.");
        TempServiceShipmentHeader."Bill-to Name" := SalesInvHeader."Bill-to Name";
        TempServiceShipmentHeader."Bill-to Customer No." := SalesInvHeader."Bill-to Customer No.";
        TempServiceShipmentHeader."Bill-to Address" := SalesInvHeader."Bill-to Address";
        TempServiceShipmentHeader."Bill-to Address 2" := SalesInvHeader."Bill-to Address 2";
        TempServiceShipmentHeader."Bill-to City" := SalesInvHeader."Bill-to City";
        TempServiceShipmentHeader."Bill-to Country/Region Code" := SalesInvHeader."Bill-to Country/Region Code";
        TempServiceShipmentHeader."E-Mail" := Customer."E-Mail";
        TempServiceShipmentHeader."No." := SalesInvHeader."No.";
        // ship contact details
        TempServiceShipmentHeader."Ship-to Name" := SalesInvHeader."Ship-to Name";
        TempServiceShipmentHeader."Ship-to Address" := SalesInvHeader."Ship-to Address";
        TempServiceShipmentHeader."Ship-to Address 2" := SalesInvHeader."Ship-to Address 2";
        TempServiceShipmentHeader."Ship-to City" := SalesInvHeader."Ship-to City";
        TempServiceShipmentHeader."Ship-to Country/Region Code" := SalesInvHeader."Ship-to Country/Region Code";
    end;

    local procedure GetSalesLinesInv(SalesInvHeaderNo: Code[20])
    var
        SalesInvLine: Record "Sales Invoice Line";
        SalesShptLine: Record "Sales Shipment Line";
        ValueEntry: Record "Value Entry";
        ItemLedgEntry: Record "Item Ledger Entry";
    begin
        SalesInvLine.SetRange("Document No.", SalesInvHeaderNo);
        if SalesInvLine.FindSet then
            repeat
                if (SalesInvLine.Type = SalesInvLine.Type::Item) and (SalesInvLine.Quantity > 0) then begin
                    TempServiceShipmentLine."Line No." := SalesInvLine."Line No.";
                    TempServiceShipmentLine."No." := SalesInvLine."No.";
                    TempServiceShipmentLine.Description := SalesInvLine.Description;
                    TempServiceShipmentLine.Quantity := SalesInvLine.Quantity;
                    TempServiceShipmentLine."Unit of Measure Code" := SalesInvLine."Unit of Measure";
                    TempServiceShipmentLine."Order No." := SalesInvLine."Document No.";
                    TempServiceShipmentLine."Order Line No." := SalesInvLine."Line No.";
                    TempServiceShipmentLine.Insert;
                    //Lieferscheinzeile finden
                    ValueEntry.Reset;
                    ValueEntry.SetCurrentkey("Document No.");
                    ValueEntry.SetRange("Document No.", SalesInvHeaderNo);
                    ValueEntry.SetRange("Document Type", ValueEntry."document type"::"Sales Invoice");
                    ValueEntry.SetRange("Document Line No.", SalesInvLine."Line No.");
                    ValueEntry.SetFilter("Invoiced Quantity", '<>0');
                    if ValueEntry.FindSet then begin
                        repeat
                            ItemLedgEntry.Get(ValueEntry."Item Ledger Entry No.");
                            if SalesShptLine.Get(ItemLedgEntry."Document No.", ItemLedgEntry."Document Line No.") then begin
                                if not TempSalesShptLine.Get(ItemLedgEntry."Document No.", ItemLedgEntry."Document Line No.") then begin
                                    TempSalesShptLine.Init;
                                    TempSalesShptLine."Document No." := SalesShptLine."Document No.";
                                    TempSalesShptLine."Line No." := SalesShptLine."Line No.";
                                    TempSalesShptLine."Posting Date" := SalesShptLine."Posting Date";
                                    TempSalesShptLine."Order No." := SalesShptLine."Order No.";
                                    TempSalesShptLine."Purchase Order No." := SalesInvLine."Document No.";
                                    TempSalesShptLine."Purch. Order Line No." := SalesInvLine."Line No.";
                                    TempSalesShptLine.Insert;
                                end;
                            end;
                        until ValueEntry.Next = 0;
                    end;
                end;
            until SalesInvLine.Next = 0;
    end;

    procedure SetEPOST(NewEPOST: Boolean)
    begin
        EPOST := NewEPOST;
    end;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionPageLoop_Header5(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput((CurrReport.PageNo = 1) and
                                    not EPOST);
        end;
    end;

    local procedure OnPreSectionPageLoop_Header2(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput((CurrReport.PageNo = 1) and
                                    EPOST);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body8(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body9(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_TransHeader12(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            //c/gw/160502: - Stichwort: PositonsZusammenzählung
            //ReportForNavSetShowOutput(NOT "Sales Invoice Header"."")
            //ReportForNavSetShowOutput(NOT "Sales Invoice Header"."nur kompl. Preis drucken");
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body13(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput(PosZusammenzählungsSumme > 0);
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body14(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput("Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" and
            ("Sales Invoice Line".Type.AsInteger() > 1));
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body22(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput(not "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" and
            ("Sales Invoice Line".Type.AsInteger() <> 0));
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ReportForNavShowOutput and not "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" then begin
                AusgVKPreis := "Sales Invoice Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Invoice Line".Amount + "Sales Invoice Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Invoice Header"."Zeilenrabatt ausblenden" then begin
                AusgVKPreis := "Sales Invoice Line"."Line Amount" / "Sales Invoice Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Invoice Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
            if "Sales Invoice Line".Type = "Sales Invoice Line".Type::" " then
                AusgWährTxt := '';
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body23(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput("Sales Invoice Line".Type.AsInteger() = 0);
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body24(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput(("Description 2" <> '') and DruckEs);
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body25(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput(LetztePosZusammenzählungsSumme > 0);
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_TransFooter26(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            //c/gw/160502: - Stichwort: PositonsZusammenzählung
            ReportForNavSetShowOutput(not "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken");
            if ReportForNavShowOutput then;
            //ReportForNavSetShowOutput(NOT "Sales Invoice Header"."nur kompl. Preis drucken");
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Footer28(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput("Inv. Discount Amount" <> 0);
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Footer30(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            //ReportForNavSetShowOutput(
            //  (NOT "Sales Invoice Header"."Prices Including VAT") AND ("Amount Including VAT" <> Amount));
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body1(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput(("Sales Invoice Line"."Line Discount %" <> 0) and not
            ("Sales Invoice Header"."Zeilenrabatt ausblenden" = true));
        end;
    end;

    local procedure OnPreSectionSalesInvoiceLine_Body2(var "Sales Invoice Line": Record "Sales Invoice Line");
    begin
        with "Sales Invoice Line" do begin
            ReportForNavSetShowOutput("Sales Invoice Line".Type.AsInteger() = 1);
            if ReportForNavShowOutput and not "Sales Invoice Header"."Pos.-Zus.-Zähl-Summen drucken" then begin
                AusgVKPreis := "Sales Invoice Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Invoice Line".Amount + "Sales Invoice Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Invoice Header"."Zeilenrabatt ausblenden" then begin
                AusgVKPreis := "Sales Invoice Line"."Line Amount" / "Sales Invoice Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Invoice Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
            if "Sales Invoice Line".Type = "Sales Invoice Line".Type::" " then
                AusgWährTxt := '';
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionTotal_Body43(var Total: Record Integer);
    begin
        with Total do begin
            //c/mt/030910-
            ReportForNavSetShowOutput(VATText <> '');
            //c/mt/030910+
        end;
    end;

    local procedure OnPreSectionTotal_Body45(var Total: Record Integer);
    begin
        with Total do begin
            ReportForNavSetShowOutput("Sales Invoice Header"."Ship-to Country/Region Code" <> 'DE');
            if Laender.IsEUCountry("Sales Invoice Header"."Ship-to Country/Region Code") = true then begin
                Zusatz := DUE030;
            end
            else begin
                Zusatz := DUE029;
            end;
        end;
    end;

    local procedure OnPreSectionTotal_Body3(var Total: Record Integer);
    begin
        with Total do begin
        end;// Autogenerated by ForNav;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavSalesInvoiceLineBuffer: Array[4] of Decimal;
        ReportForNavSalesInvoiceLineTotals: Array[4] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'SalesInvoiceHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'PageLoop':
                begin
                    ReportForNavSalesInvoiceLineTotals[1] := 0;
                    ReportForNavSalesInvoiceLineTotals[2] := 0;
                    ReportForNavSalesInvoiceLineTotals[3] := 0;
                    ReportForNavSalesInvoiceLineTotals[4] := 0;
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header5(PageLoop);
                    jsonObject.Add('$Header5$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header2(PageLoop);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop1':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body8(DimensionLoop1);
                    jsonObject.Add('$Body8$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body9(DimensionLoop1);
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                end;
            'SalesInvoiceLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body13("Sales Invoice Line");
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body14("Sales Invoice Line");
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body22("Sales Invoice Line");
                    jsonObject.Add('$Body22$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body23("Sales Invoice Line");
                    jsonObject.Add('$Body23$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body24("Sales Invoice Line");
                    jsonObject.Add('$Body24$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body25("Sales Invoice Line");
                    jsonObject.Add('$Body25$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body1("Sales Invoice Line");
                    jsonObject.Add('$Body1$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesInvoiceLine_Body2("Sales Invoice Line");
                    jsonObject.Add('$Body2$Pre', ReportForNavShowOutput);
                    with "Sales Invoice Line" do begin
                        ReportForNavSalesInvoiceLineTotals[1] += "Line Amount";
                        ReportForNavSalesInvoiceLineBuffer[1] := "Line Amount";
                        "Line Amount" := ReportForNavSalesInvoiceLineTotals[1];
                        ReportForNavSalesInvoiceLineTotals[2] += Amount;
                        ReportForNavSalesInvoiceLineBuffer[2] := Amount;
                        Amount := ReportForNavSalesInvoiceLineTotals[2];
                        ReportForNavSalesInvoiceLineTotals[3] += "Amount Including VAT";
                        ReportForNavSalesInvoiceLineBuffer[3] := "Amount Including VAT";
                        "Amount Including VAT" := ReportForNavSalesInvoiceLineTotals[3];
                        ReportForNavSalesInvoiceLineTotals[4] += "Inv. Discount Amount";
                        ReportForNavSalesInvoiceLineBuffer[4] := "Inv. Discount Amount";
                        "Inv. Discount Amount" := ReportForNavSalesInvoiceLineTotals[4];
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesInvoiceLine_TransHeader12("Sales Invoice Line");
                        jsonObject.Add('$TransHeader12$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesInvoiceLine_TransFooter26("Sales Invoice Line");
                        jsonObject.Add('$TransFooter26$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesInvoiceLine_Footer28("Sales Invoice Line");
                        jsonObject.Add('$Footer28$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesInvoiceLine_Footer30("Sales Invoice Line");
                        jsonObject.Add('$Footer30$Pre', ReportForNavShowOutput);
                        "Line Amount" := ReportForNavSalesInvoiceLineBuffer[1];
                        Amount := ReportForNavSalesInvoiceLineBuffer[2];
                        "Amount Including VAT" := ReportForNavSalesInvoiceLineBuffer[3];
                        "Inv. Discount Amount" := ReportForNavSalesInvoiceLineBuffer[4];
                    end;
                end;
            'Total':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionTotal_Body43(Total);
                    jsonObject.Add('$Body43$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionTotal_Body45(Total);
                    jsonObject.Add('$Body45$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionTotal_Body3(Total);
                    jsonObject.Add('$Body3$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
