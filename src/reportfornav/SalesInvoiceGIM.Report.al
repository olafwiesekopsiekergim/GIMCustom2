// #pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
// Report 60018 "CCO Sales Invoice GIM"
// {
//     Caption = 'Sales Invoice GIM';
//     Permissions = TableData "Sales Shipment Buffer" = rimd;
//     WordLayout = './Layouts/CCOSalesInvoiceGIM.docx';
//     DefaultLayout = Word;

//     dataset
//     {
//         dataitem("Sales Invoice Header"; "Sales Invoice Header")
//         {
//             DataItemTableView = sorting("No.");
//             RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
//             RequestFilterHeading = 'Posted Sales Invoice';
//             column(ReportForNavId_5581; 5581) { } // Autogenerated by ForNav - Do not delete
//             column(ReportForNav_SalesInvoiceHeader; ReportForNavWriteDataItem('SalesInvoiceHeader', "Sales Invoice Header")) { }
//             column(Firmendaten; CompanyInfo.Name + ', ' + CompanyInfo.Address + ', ' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City)
//             {
//             }
//             column(No_SalesInvHdr; "Sales Invoice Header"."No.")
//             {
//             }
//             column(EMailCaption; EMailCaptionLbl)
//             {
//             }
//             column(InvDiscountAmountCaption; InvDiscountAmountCaptionLbl)
//             {
//             }
//             column(VATCaption; VATCaptionLbl)
//             {
//             }
//             column(VATBaseCaption; VATBaseCaptionLbl)
//             {
//             }
//             column(VATAmountCaption; VATAmountCaptionLbl)
//             {
//             }
//             column(VATIdentifierCaption; VATIdentifierCaptionLbl)
//             {
//             }
//             column(TotalCaption; TotalCaptionLbl)
//             {
//             }
//             column(PaymentTermsCaption; PaymentTermsCaptionLbl)
//             {
//             }
//             column(ShipmentMethodCaption; ShipmentMethodCaptionLbl)
//             {
//             }
//             column(DisplayAdditionalFeeNote; DisplayAdditionalFeeNote)
//             {
//             }
//             column(DocumentDateCaption; DocumentDateCaptionLbl)
//             {
//             }
//             dataitem(CopyLoop; Integer)
//             {
//                 DataItemTableView = sorting(Number);
//                 column(ReportForNavId_5701; 5701) { } // Autogenerated by ForNav - Do not delete
//                 column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
//                 dataitem(PageLoop; Integer)
//                 {
//                     DataItemTableView = sorting(Number) where(Number = const(1));
//                     column(ReportForNavId_6455; 6455) { } // Autogenerated by ForNav - Do not delete
//                     column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
//                     column(CustomerNo; "Sales Invoice Header"."Sell-to Customer No.")
//                     {
//                     }
//                     column(CompanyInfoPicture2; CompanyInfo."Picture 2")
//                     {
//                     }
//                     column(ReportforNavPageNo; Format(ReportForNav.PagePlaceHolder))
//                     {
//                     }
//                     column(CompanyInfoPicture; CompanyInfo.Picture)
//                     {
//                     }
//                     column(CompanyInfo3Picture; CompanyInfo3.Picture)
//                     {
//                     }
//                     column(DocumentCaption; StrSubstNo(DocumentCaption, CopyText))
//                     {
//                     }
//                     column(CustAddr1; CustAddr[1])
//                     {
//                     }
//                     column(CompanyAddr1; CompanyAddr[1])
//                     {
//                     }
//                     column(CustAddr2; CustAddr[2])
//                     {
//                     }
//                     column(CompanyAddr2; CompanyAddr[2])
//                     {
//                     }
//                     column(CustAddr3; CustAddr[3])
//                     {
//                     }
//                     column(CompanyAddr3; CompanyAddr[3])
//                     {
//                     }
//                     column(CustAddr4; CustAddr[4])
//                     {
//                     }
//                     column(CompanyAddr4; CompanyAddr[4])
//                     {
//                     }
//                     column(CustAddr5; CustAddr[5])
//                     {
//                     }
//                     column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
//                     {
//                     }
//                     column(CustAddr6; CustAddr[6])
//                     {
//                     }
//                     column(SalesPurchPersonMail; SalesPurchPerson."E-Mail")
//                     {
//                     }
//                     column(SalesPurchPersonPhone; SalesPurchPerson."Phone No.")
//                     {
//                     }
//                     column(CompanyInfoHomePage; CompanyInfo."Home Page")
//                     {
//                     }
//                     column(CompanyInfoEMail; CompanyInfo."E-Mail")
//                     {
//                     }
//                     column(CompanyInfoVATRegNo; CompanyInfo."VAT Registration No.")
//                     {
//                     }
//                     column(CompanyInfoGiroNo; CompanyInfo."Giro No.")
//                     {
//                     }
//                     column(CompanyInfoBankName; CompanyInfo."Bank Name")
//                     {
//                     }
//                     column(CompanyInfoBankAccountNo; CompanyInfo."Bank Account No.")
//                     {
//                     }
//                     column(PaymentTermsDescription; PaymentTerms.Description)
//                     {
//                     }
//                     column(ShipmentMethodDescription; ShipmentMethod.Description)
//                     {
//                     }
//                     column(BillToCustNo_SalesInvHdr; "Sales Invoice Header"."Bill-to Customer No.")
//                     {
//                     }
//                     column(PostingDate_SalesInvHdr; Format("Sales Invoice Header"."Posting Date", 0, 4))
//                     {
//                     }
//                     column(VATNoText; VATNoText)
//                     {
//                     }
//                     column(VATRegNo_SalesInvHeader; "Sales Invoice Header"."VAT Registration No.")
//                     {
//                     }
//                     column(DueDate_SalesInvHeader; Format("Sales Invoice Header"."Due Date", 0, 4))
//                     {
//                     }
//                     column(SalesPersonText; SalesPersonText)
//                     {
//                     }
//                     column(SalesPurchPersonName; SalesPurchPerson.Name)
//                     {
//                     }
//                     column(ReferenceText; ReferenceText)
//                     {
//                     }
//                     column(YourReference_SalesInvHdr; "Sales Invoice Header"."Your Reference")
//                     {
//                     }
//                     column(OrderNoText; OrderNoText)
//                     {
//                     }
//                     column(OrderNo_SalesInvHeader; "Sales Invoice Header"."Order No.")
//                     {
//                     }
//                     column(CustAddr7; CustAddr[7])
//                     {
//                     }
//                     column(CustAddr8; CustAddr[8])
//                     {
//                     }
//                     column(CompanyAddr5; CompanyAddr[5])
//                     {
//                     }
//                     column(CompanyAddr6; CompanyAddr[6])
//                     {
//                     }
//                     column(DocDate_SalesInvoiceHdr; Format("Sales Invoice Header"."Document Date", 0, 4))
//                     {
//                     }
//                     column(PricesInclVAT_SalesInvHdr; "Sales Invoice Header"."Prices Including VAT")
//                     {
//                     }
//                     column(OutputNo; OutputNo)
//                     {
//                     }
//                     column(PricesInclVATYesNo; Format("Sales Invoice Header"."Prices Including VAT"))
//                     {
//                     }
//                     column(PageCaption; PageCaptionCap)
//                     {
//                     }
//                     column(CompanyInfoRegNo; CompanyInfo.GetRegistrationNumber)
//                     {
//                     }
//                     column(PhoneNoCaption; PhoneNoCaptionLbl)
//                     {
//                     }
//                     column(HomePageCaption; HomePageCaptionCap)
//                     {
//                     }
//                     column(VATRegNoCaption; VATRegNoCaptionLbl)
//                     {
//                     }
//                     column(GiroNoCaption; GiroNoCaptionLbl)
//                     {
//                     }
//                     column(BankNameCaption; BankNameCaptionLbl)
//                     {
//                     }
//                     column(BankAccountNoCaption; BankAccountNoCaptionLbl)
//                     {
//                     }
//                     column(DueDateCaption; DueDateCaptionLbl)
//                     {
//                     }
//                     column(InvoiceNoCaption; InvoiceNoCaptionLbl)
//                     {
//                     }
//                     column(PostingDateCaption; PostingDateCaptionLbl)
//                     {
//                     }
//                     column(RegNoCaption; CompanyInfo.GetRegistrationNumberLbl)
//                     {
//                     }
//                     column(BillToCustNo_SalesInvHdrCaption; "Sales Invoice Header".FieldCaption("Bill-to Customer No."))
//                     {
//                     }
//                     column(PricesInclVAT_SalesInvHdrCaption; "Sales Invoice Header".FieldCaption("Prices Including VAT"))
//                     {
//                     }
//                     dataitem(DimensionLoop1; Integer)
//                     {
//                         DataItemLinkReference = "Sales Invoice Header";
//                         DataItemTableView = sorting(Number) where(Number = filter(1 ..));
//                         column(ReportForNavId_7574; 7574) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
//                         column(DimText; DimText)
//                         {
//                         }
//                         column(Number_Integer; DimensionLoop1.Number)
//                         {
//                         }
//                         column(DimensionsCaption; DimensionsCaptionLbl)
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             if not ShowInternalInfo then
//                                 CurrReport.Break;
//                             ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             if Number = 1 then begin
//                                 if not DimSetEntry1.FindSet then
//                                     CurrReport.Break;
//                             end else
//                                 if not Continue then
//                                     CurrReport.Break;
//                             Clear(DimText);
//                             Continue := false;
//                             repeat
//                                 OldDimText := DimText;
//                                 if DimText = '' then
//                                     DimText := StrSubstNo('%1 %2', DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code")
//                                 else
//                                     DimText :=
//                                       StrSubstNo(
//                                         '%1, %2 %3', DimText,
//                                         DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code");
//                                 if StrLen(DimText) > MaxStrLen(OldDimText) then begin
//                                     DimText := OldDimText;
//                                     Continue := true;
//                                     exit;
//                                 end;
//                             until DimSetEntry1.Next = 0;
//                         end;

//                     }
//                     dataitem(TMHeader; Integer)
//                     {
//                         DataItemTableView = sorting(Number);
//                         column(ReportForNavId_5060602; 5060602) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
//                         column(TMHeader_Number; TMHeader.Number)
//                         {
//                         }
//                         column(TMHeader_Text; TempTMLine.Text)
//                         {
//                         }
//                         column(TMHeader_Italic; TempTMLine.Italic)
//                         {
//                         }
//                         column(TMHeader_Bold; TempTMLine.Bold)
//                         {
//                         }
//                         column(TMHeader_Underline; TempTMLine.Underline)
//                         {
//                         }
//                         column(TMHeader_Color; TempTMLine.Color)
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             // >> #TMW17.00:A001
//                             if TestLicPermissionTM then begin
//                                 // >> #TMW17.10.01:T100
//                                 // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Sales Invoice Header",
//                                 //									"Sales Invoice Header", CurrReport.OBJECTID(FALSE));
//                                 TMEngine.GetTextSetForReport(TempTMLine, "Sales Invoice Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
//                                 // << #TMW17.10.01:T100
//                                 SetRange(Number, 1, TempTMLine.Count);
//                             end else begin
//                                 CurrReport.Break;
//                             end;
//                             // << #TMW17.00:A001
//                             ReportForNav.OnPreDataItem('TMHeader', TMHeader);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             // >> #TMW17.00:A001
//                             if Number = 1 then
//                                 TempTMLine.FindFirst
//                             else
//                                 TempTMLine.Next;
//                             // << #TMW17.00:A001
//                         end;

//                     }
//                     dataitem("Sales Invoice Line"; "Sales Invoice Line")
//                     {
//                         DataItemLink = "Document No." = FIELD("No.");
//                         DataItemLinkReference = "Sales Invoice Header";
//                         DataItemTableView = sorting("Document No.", "Line No.");
//                         column(ReportForNavId_1570; 1570) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_SalesInvoiceLine; ReportForNavWriteDataItem('SalesInvoiceLine', "Sales Invoice Line")) { }
//                         column(Position; "Sales Invoice Line".Position)
//                         {
//                         }
//                         column(LineAmt_SalesInvoiceLine; "Sales Invoice Line"."Line Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 1;
//                         }
//                         column(Description2_SalesInvLine; "Sales Invoice Line"."Description 2")
//                         {
//                         }
//                         column(Description_SalesInvLine; "Sales Invoice Line".Description)
//                         {
//                         }
//                         column(No_SalesInvoiceLine; ItemNo)
//                         {
//                         }
//                         column(AusgUnitPrice; AusgUnitPrice)
//                         {
//                         }
//                         column(AusgLAmount; AusgLAmount)
//                         {
//                         }
//                         column(Quantity_SalesInvoiceLine; "Sales Invoice Line".Quantity)
//                         {
//                         }
//                         column(UOM_SalesInvoiceLine; "Sales Invoice Line"."Unit of Measure")
//                         {
//                         }
//                         column(UnitPrice_SalesInvLine; "Sales Invoice Line"."Unit Price")
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 2;
//                         }
//                         column(LineDisc_SalesInvoiceLine; "Sales Invoice Line"."Line Discount %")
//                         {
//                         }
//                         column(VATIdent_SalesInvLine; "Sales Invoice Line"."VAT Identifier")
//                         {
//                         }
//                         column(PostedShipmentDate; Format(PostedShipmentDate))
//                         {
//                         }
//                         column(SalesLineType; Format("Sales Invoice Line".Type))
//                         {
//                         }
//                         column(InvDiscountAmount; -"Inv. Discount Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 1;
//                         }
//                         column(TotalSubTotal; TotalSubTotal)
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(TotalInvoiceDiscountAmt; TotalInvoiceDiscountAmt)
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(TotalText; TotalText)
//                         {
//                         }
//                         column(Amount_SalesInvoiceLine; "Sales Invoice Line".Amount)
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 1;
//                         }
//                         column(TotalAmount; TotalAmount)
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(AmountIncludingVATAmount; "Amount Including VAT" - Amount)
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 1;
//                         }
//                         column(AmtInclVAT_SalesInvLine; "Sales Invoice Line"."Amount Including VAT")
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 1;
//                         }
//                         column(VATCpt; VATCpt)
//                         {
//                         }
//                         column(VATAmtLineVATAmtText; VATAmountLine."VAT %")
//                         {
//                         }
//                         column(TotalExclVATText; TotalExclVATText)
//                         {
//                         }
//                         column(TotalInclVATText; TotalInclVATText)
//                         {
//                         }
//                         column(TotalAmountInclVAT; TotalAmountInclVAT)
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(TotalAmountVAT; TotalAmountVAT)
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(VATBaseDisc_SalesInvHdr; "Sales Invoice Header"."VAT Base Discount %")
//                         {
//                             AutoFormatType = 1;
//                         }
//                         column(TotalPaymentDiscountOnVAT; TotalPaymentDiscountOnVAT)
//                         {
//                             AutoFormatType = 1;
//                         }
//                         column(LineNo_SalesInvoiceLine; "Sales Invoice Line"."Line No.")
//                         {
//                         }
//                         column(UnitPriceCaption; UnitPriceCaptionLbl)
//                         {
//                         }
//                         column(DiscountCaption; DiscountCaptionLbl)
//                         {
//                         }
//                         column(AmountCaption; AmountCaptionLbl)
//                         {
//                         }
//                         column(PostedShipmentDateCaption; PostedShipmentDateCaptionLbl)
//                         {
//                         }
//                         column(SubtotalCaption; SubtotalCaptionLbl)
//                         {
//                         }
//                         column(PaymentDiscVATCaption; PaymentDiscVATCaptionLbl)
//                         {
//                         }
//                         column(Description_SalesInvLineCaption; FieldCaption(Description))
//                         {
//                         }
//                         column(No_SalesInvoiceLineCaption; FieldCaption("No."))
//                         {
//                         }
//                         column(Quantity_SalesInvoiceLineCaption; FieldCaption(Quantity))
//                         {
//                         }
//                         column(UOM_SalesInvoiceLineCaption; FieldCaption("Unit of Measure"))
//                         {
//                         }
//                         column(VATIdent_SalesInvLineCaption; FieldCaption("VAT Identifier"))
//                         {
//                         }
//                         dataitem(TMLine; Integer)
//                         {
//                             DataItemTableView = sorting(Number);
//                             column(ReportForNavId_5060605; 5060605) { } // Autogenerated by ForNav - Do not delete
//                             column(ReportForNav_TMLine; ReportForNavWriteDataItem('TMLine', TMLine)) { }
//                             column(TMLine_Number; TMLine.Number)
//                             {
//                             }
//                             column(TMLine_Text; TempTMLine.Text)
//                             {
//                             }
//                             column(TMLine_Italic; TempTMLine.Italic)
//                             {
//                             }
//                             column(TMLine_Bold; TempTMLine.Bold)
//                             {
//                             }
//                             column(TMLine_Underline; TempTMLine.Underline)
//                             {
//                             }
//                             column(TMLine_Color; TempTMLine.Color)
//                             {
//                             }
//                             trigger OnPreDataItem();
//                             begin
//                                 // >> #TMW17.00:A001
//                                 if TestLicPermissionTM then begin
//                                     // >> #TMW17.10.01:T100
//                                     // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Sales Invoice Line",
//                                     //									"Sales Invoice Line", CurrReport.OBJECTID(FALSE));
//                                     TMEngine.GetTextSetForReport(TempTMLine, "Sales Invoice Line"."CCS TM Text Set ID", CurrReport.ObjectId(false));
//                                     // << #TMW17.10.01:T100
//                                     SetRange(Number, 1, TempTMLine.Count);
//                                 end else begin
//                                     CurrReport.Break;
//                                 end;
//                                 // << #TMW17.00:A001
//                                 ReportForNav.OnPreDataItem('TMLine', TMLine);
//                             end;

//                             trigger OnAfterGetRecord();
//                             begin
//                                 // >> #TMW17.00:A001
//                                 if Number = 1 then
//                                     TempTMLine.FindFirst
//                                 else
//                                     TempTMLine.Next;
//                                 // << #TMW17.00:A001
//                             end;

//                         }
//                         dataitem("Sales Shipment Buffer"; Integer)
//                         {
//                             DataItemTableView = sorting(Number);
//                             column(ReportForNavId_1484; 1484) { } // Autogenerated by ForNav - Do not delete
//                             column(ReportForNav_SalesShipmentBuffer; ReportForNavWriteDataItem('SalesShipmentBuffer', "Sales Shipment Buffer")) { }
//                             column(SalesShpBufferPostingDate; Format(SalesShipmentBuffer."Posting Date"))
//                             {
//                             }
//                             column(SalesShpBufferQuantity; SalesShipmentBuffer.Quantity)
//                             {
//                                 DecimalPlaces = 0 : 5;
//                             }
//                             column(ShipmentCaption; ShipmentCaptionLbl)
//                             {
//                             }
//                             trigger OnPreDataItem();
//                             begin
//                                 SalesShipmentBuffer.SetRange("Document No.", "Sales Invoice Line"."Document No.");
//                                 SalesShipmentBuffer.SetRange("Line No.", "Sales Invoice Line"."Line No.");
//                                 SetRange(Number, 1, SalesShipmentBuffer.Count);
//                                 ReportForNav.OnPreDataItem('SalesShipmentBuffer', "Sales Shipment Buffer");
//                             end;

//                             trigger OnAfterGetRecord();
//                             begin
//                                 if Number = 1 then
//                                     SalesShipmentBuffer.Find('-')
//                                 else
//                                     SalesShipmentBuffer.Next;
//                             end;

//                         }
//                         dataitem(DimensionLoop2; Integer)
//                         {
//                             DataItemTableView = sorting(Number) where(Number = filter(1 ..));
//                             column(ReportForNavId_3591; 3591) { } // Autogenerated by ForNav - Do not delete
//                             column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
//                             column(DimText_DimensionLoop2; DimText)
//                             {
//                             }
//                             column(LineDimensionsCaption; LineDimensionsCaptionLbl)
//                             {
//                             }
//                             trigger OnPreDataItem();
//                             begin
//                                 if not ShowInternalInfo then
//                                     CurrReport.Break;
//                                 DimSetEntry2.SetRange("Dimension Set ID", "Sales Invoice Line"."Dimension Set ID");
//                                 ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
//                             end;

//                             trigger OnAfterGetRecord();
//                             begin
//                                 if Number = 1 then begin
//                                     if not DimSetEntry2.FindSet then
//                                         CurrReport.Break;
//                                 end else
//                                     if not Continue then
//                                         CurrReport.Break;
//                                 Clear(DimText);
//                                 Continue := false;
//                                 repeat
//                                     OldDimText := DimText;
//                                     if DimText = '' then
//                                         DimText := StrSubstNo('%1 %2', DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code")
//                                     else
//                                         DimText :=
//                                           StrSubstNo(
//                                             '%1, %2 %3', DimText,
//                                             DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code");
//                                     if StrLen(DimText) > MaxStrLen(OldDimText) then begin
//                                         DimText := OldDimText;
//                                         Continue := true;
//                                         exit;
//                                     end;
//                                 until DimSetEntry2.Next = 0;
//                             end;

//                         }
//                         dataitem(AsmLoop; Integer)
//                         {
//                             column(ReportForNavId_9462; 9462) { } // Autogenerated by ForNav - Do not delete
//                             column(ReportForNav_AsmLoop; ReportForNavWriteDataItem('AsmLoop', AsmLoop)) { }
//                             column(TempPostedAsmLineUOMCode; GetUOMText(TempPostedAsmLine."Unit of Measure Code"))
//                             {
//                             }
//                             column(TempPostedAsmLineQuantity; TempPostedAsmLine.Quantity)
//                             {
//                                 DecimalPlaces = 0 : 5;
//                             }
//                             column(TempPostedAsmLineVariantCode; BlanksForIndent + TempPostedAsmLine."Variant Code")
//                             {
//                             }
//                             column(TempPostedAsmLineDesc; BlanksForIndent + TempPostedAsmLine.Description)
//                             {
//                             }
//                             column(TempPostedAsmLineNo; BlanksForIndent + TempPostedAsmLine."No.")
//                             {
//                             }
//                             trigger OnPreDataItem();
//                             begin
//                                 Clear(TempPostedAsmLine);
//                                 if not DisplayAssemblyInformation then
//                                     CurrReport.Break;
//                                 CollectAsmInformation;
//                                 Clear(TempPostedAsmLine);
//                                 SetRange(Number, 1, TempPostedAsmLine.Count);
//                                 ReportForNav.OnPreDataItem('AsmLoop', AsmLoop);
//                             end;

//                             trigger OnAfterGetRecord();
//                             var
//                                 ItemTranslation: Record "Item Translation";
//                             begin
//                                 if Number = 1 then
//                                     TempPostedAsmLine.FindSet
//                                 else
//                                     TempPostedAsmLine.Next;
//                                 if ItemTranslation.Get(TempPostedAsmLine."No.",
//                                      TempPostedAsmLine."Variant Code",
//                                      "Sales Invoice Header"."Language Code")
//                                 then
//                                     TempPostedAsmLine.Description := ItemTranslation.Description;
//                             end;

//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             VATAmountLine.DeleteAll;
//                             SalesShipmentBuffer.Reset;
//                             SalesShipmentBuffer.DeleteAll;
//                             FirstValueEntryNo := 0;
//                             MoreLines := Find('+');
//                             while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
//                                 MoreLines := Next(-1) <> 0;
//                             if not MoreLines then
//                                 CurrReport.Break;
//                             SetRange("Line No.", 0, "Line No.");
//                             ReportForNav.OnPreDataItem('SalesInvoiceLine', "Sales Invoice Line");
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             // >> CC02
//                             if (("Sales Invoice Line".Type = "Sales Invoice Line".Type::Item) or ("Sales Invoice Line".Type = "Sales Invoice Line".Type::"G/L Account")) and ("Sales Invoice Line".Quantity = 0) then begin
//                                 CurrReport.Skip;
//                             end;
//                             // << CC02
//                             PostedShipmentDate := 0D;
//                             if Quantity <> 0 then
//                                 PostedShipmentDate := FindPostedShipmentDate;
//                             if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
//                                 "No." := '';
//                             VATAmountLine.Init;
//                             VATAmountLine."VAT Identifier" := "VAT Identifier";
//                             VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
//                             VATAmountLine."Tax Group Code" := "Tax Group Code";
//                             if "VAT %" <> 0 then
//                                 VATAmountLine."VAT %" := "VAT %";
//                             VATAmountLine."VAT Base" := Amount;
//                             VATAmountLine."Amount Including VAT" := "Amount Including VAT";
//                             VATAmountLine."Line Amount" := "Line Amount";
//                             if "Allow Invoice Disc." then
//                                 VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
//                             VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
//                             VATAmountLine."VAT Clause Code" := "VAT Clause Code";
//                             VATAmountLine.InsertLine;
//                             TotalSubTotal += "Line Amount";
//                             TotalInvoiceDiscountAmt -= "Inv. Discount Amount";
//                             TotalAmount += Amount;
//                             TotalAmountVAT += "Amount Including VAT" - Amount;
//                             TotalAmountInclVAT += "Amount Including VAT";
//                             TotalPaymentDiscountOnVAT += -("Line Amount" - "Inv. Discount Amount" - "Amount Including VAT");
//                         end;

//                     }
//                     dataitem(VATCounter; Integer)
//                     {
//                         DataItemTableView = sorting(Number);
//                         column(ReportForNavId_6558; 6558) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter', VATCounter)) { }
//                         column(VATAmountLineVATBase; VATAmountLine."VAT Base")
//                         {
//                             AutoFormatExpression = "Sales Invoice Line".GetCurrencyCode;
//                             AutoFormatType = 1;
//                         }
//                         column(VATAmountLineVATAmount; VATAmountLine."VAT Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(VATAmountLineLineAmount; VATAmountLine."Line Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(VATAmtLineInvDiscBaseAmt; VATAmountLine."Inv. Disc. Base Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(VATAmtLineInvDiscountAmt; VATAmountLine."Invoice Discount Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(VATAmountLineVAT; VATAmountLine."VAT %")
//                         {
//                             DecimalPlaces = 0 : 5;
//                         }
//                         column(VATAmtLineVATIdentifier; VATAmountLine."VAT Identifier")
//                         {
//                         }
//                         column(VATAmntSpecificCaption; VATAmntSpecificCaptionLbl)
//                         {
//                         }
//                         column(InvDiscBaseAmtCaption; InvDiscBaseAmtCaptionLbl)
//                         {
//                         }
//                         column(LineAmountCaption; LineAmountCaptionLbl)
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             SetRange(Number, 1, VATAmountLine.Count);
//                             ReportForNav.OnPreDataItem('VATCounter', VATCounter);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             VATAmountLine.GetLine(Number);
//                         end;

//                     }
//                     dataitem(VATClauseEntryCounter; Integer)
//                     {
//                         DataItemTableView = sorting(Number);
//                         column(ReportForNavId_250; 250) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_VATClauseEntryCounter; ReportForNavWriteDataItem('VATClauseEntryCounter', VATClauseEntryCounter)) { }
//                         column(VATClauseVATIdentifier; VATAmountLine."VAT Identifier")
//                         {
//                         }
//                         column(VATClauseCode; VATAmountLine."VAT Clause Code")
//                         {
//                         }
//                         column(VATClauseDescription; VATClause.Description)
//                         {
//                         }
//                         column(VATClauseDescription2; VATClause."Description 2")
//                         {
//                         }
//                         column(VATClauseAmount; VATAmountLine."VAT Amount")
//                         {
//                             AutoFormatExpression = "Sales Invoice Header"."Currency Code";
//                             AutoFormatType = 1;
//                         }
//                         column(VATClausesCaption; VATClausesCap)
//                         {
//                         }
//                         column(VATClauseVATIdentifierCaption; VATIdentifierCaptionLbl)
//                         {
//                         }
//                         column(VATClauseVATAmtCaption; VATAmountCaptionLbl)
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             Clear(VATClause);
//                             SetRange(Number, 1, VATAmountLine.Count);
//                             ReportForNav.OnPreDataItem('VATClauseEntryCounter', VATClauseEntryCounter);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             VATAmountLine.GetLine(Number);
//                             if not VATClause.Get(VATAmountLine."VAT Clause Code") then
//                                 CurrReport.Skip;
//                             VATClause.TranslateDescription("Sales Invoice Header"."Language Code");
//                         end;

//                     }
//                     dataitem(VatCounterLCY; Integer)
//                     {
//                         DataItemTableView = sorting(Number);
//                         column(ReportForNavId_9347; 9347) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_VatCounterLCY; ReportForNavWriteDataItem('VatCounterLCY', VatCounterLCY)) { }
//                         column(VALSpecLCYHeader; VALSpecLCYHeader)
//                         {
//                         }
//                         column(VALExchRate; VALExchRate)
//                         {
//                         }
//                         column(VALVATBaseLCY; VALVATBaseLCY)
//                         {
//                             AutoFormatType = 1;
//                         }
//                         column(VALVATAmountLCY; VALVATAmountLCY)
//                         {
//                             AutoFormatType = 1;
//                         }
//                         column(VATAmountLineVAT_VatCounterLCY; VATAmountLine."VAT %")
//                         {
//                             DecimalPlaces = 0 : 5;
//                         }
//                         column(VATAmtLineVATIdentifier_VatCounterLCY; VATAmountLine."VAT Identifier")
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             if (not GLSetup."Print VAT specification in LCY") or
//                                ("Sales Invoice Header"."Currency Code" = '')
//                             then
//                                 CurrReport.Break;
//                             SetRange(Number, 1, VATAmountLine.Count);
//                             if GLSetup."LCY Code" = '' then
//                                 VALSpecLCYHeader := Text007 + Text008
//                             else
//                                 VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
//                             CurrExchRate.FindCurrency("Sales Invoice Header"."Posting Date", "Sales Invoice Header"."Currency Code", 1);
//                             CalculatedExchRate := ROUND(1 / "Sales Invoice Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount", 0.000001);
//                             VALExchRate := StrSubstNo(Text009, CalculatedExchRate, CurrExchRate."Exchange Rate Amount");
//                             ReportForNav.OnPreDataItem('VatCounterLCY', VatCounterLCY);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             VATAmountLine.GetLine(Number);
//                             VALVATBaseLCY :=
//                               VATAmountLine.GetBaseLCY(
//                                 "Sales Invoice Header"."Posting Date", "Sales Invoice Header"."Currency Code",
//                                 "Sales Invoice Header"."Currency Factor");
//                             VALVATAmountLCY :=
//                               VATAmountLine.GetAmountLCY(
//                                 "Sales Invoice Header"."Posting Date", "Sales Invoice Header"."Currency Code",
//                                 "Sales Invoice Header"."Currency Factor");
//                         end;

//                     }
//                     dataitem(Total; Integer)
//                     {
//                         DataItemTableView = sorting(Number) where(Number = const(1));
//                         column(ReportForNavId_3476; 3476) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
//                         trigger OnPreDataItem();
//                         begin
//                             ReportForNav.OnPreDataItem('Total', Total);
//                         end;
//                     }
//                     dataitem(Total2; Integer)
//                     {
//                         DataItemTableView = sorting(Number) where(Number = const(1));
//                         column(ReportForNavId_3363; 3363) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
//                         column(SellToCustNo_SalesInvHdr; "Sales Invoice Header"."Sell-to Customer No.")
//                         {
//                         }
//                         column(ShipToAddr1; ShipToAddr[1])
//                         {
//                         }
//                         column(ShipToAddr2; ShipToAddr[2])
//                         {
//                         }
//                         column(ShipToAddr3; ShipToAddr[3])
//                         {
//                         }
//                         column(ShipToAddr4; ShipToAddr[4])
//                         {
//                         }
//                         column(ShipToAddr5; ShipToAddr[5])
//                         {
//                         }
//                         column(ShipToAddr6; ShipToAddr[6])
//                         {
//                         }
//                         column(ShipToAddr7; ShipToAddr[7])
//                         {
//                         }
//                         column(ShipToAddr8; ShipToAddr[8])
//                         {
//                         }
//                         column(ShipToAddressCaption; ShipToAddressCaptionLbl)
//                         {
//                         }
//                         column(SellToCustNo_SalesInvHdrCaption; "Sales Invoice Header".FieldCaption("Sell-to Customer No."))
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             if not ShowShippingAddr then
//                                 CurrReport.Break;
//                             ReportForNav.OnPreDataItem('Total2', Total2);
//                         end;

//                     }
//                     dataitem(LineFee; Integer)
//                     {
//                         DataItemTableView = sorting(Number) order(ascending) where(Number = filter(1 ..));
//                         column(ReportForNavId_300; 300) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_LineFee; ReportForNavWriteDataItem('LineFee', LineFee)) { }
//                         column(LineFeeCaptionLbl; TempLineFeeNoteOnReportHist.ReportText)
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             ReportForNav.OnPreDataItem('LineFee', LineFee);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             if not DisplayAdditionalFeeNote then
//                                 CurrReport.Break;
//                             if Number = 1 then begin
//                                 if not TempLineFeeNoteOnReportHist.FindSet then
//                                     CurrReport.Break
//                             end else
//                                 if TempLineFeeNoteOnReportHist.Next = 0 then
//                                     CurrReport.Break;
//                         end;

//                     }
//                     dataitem(AdvancePaymentEntries; "Cust. Ledger Entry")
//                     {
//                         DataItemTableView = sorting("Document No.", "Document Type", "Customer No.") order(ascending);
//                         column(ReportForNavId_5013500; 5013500) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_AdvancePaymentEntries; ReportForNavWriteDataItem('AdvancePaymentEntries', AdvancePaymentEntries)) { }
//                         dataitem(DtldAdvancePaymentEntries; "Detailed Cust. Ledg. Entry")
//                         {
//                             DataItemLink = "Cust. Ledger Entry No." = FIELD("Entry No."), "Posting Date" = FIELD("Posting Date");
//                             DataItemTableView = sorting("Cust. Ledger Entry No.", "Entry Type", "Posting Date") order(ascending) where("Entry Type" = const(Application));
//                             column(ReportForNavId_5013501; 5013501) { } // Autogenerated by ForNav - Do not delete
//                             column(ReportForNav_DtldAdvancePaymentEntries; ReportForNavWriteDataItem('DtldAdvancePaymentEntries', DtldAdvancePaymentEntries)) { }
//                             column(APTReceivedAdvancePaymentsCaption; APTReceivedAdvancePaymentsCaptionLbl)
//                             {
//                             }
//                             column(APTDateCaption; APTDateCaptionLbl)
//                             {
//                             }
//                             column(APTDocumentNoCaption; APTDocumentNoCaptionLbl)
//                             {
//                             }
//                             column(APTDescriptionCaption; APTDescriptionCaptionLbl)
//                             {
//                             }
//                             column(APTVATPercentCaption; APTVATPercentCaptionLbl)
//                             {
//                             }
//                             column(APTAmountCaption; APTAmountCaptionLbl)
//                             {
//                             }
//                             column(APTVATBaseCaption; APTVATBaseCaptionLbl)
//                             {
//                             }
//                             column(APTVATAmountCaption; APTVATAmountCaptionLbl)
//                             {
//                             }
//                             dataitem(AdvPmtVATCounter; Integer)
//                             {
//                                 DataItemTableView = sorting(Number);
//                                 column(ReportForNavId_5013502; 5013502) { } // Autogenerated by ForNav - Do not delete
//                                 column(ReportForNav_AdvPmtVATCounter; ReportForNavWriteDataItem('AdvPmtVATCounter', AdvPmtVATCounter)) { }
//                                 column(Number_AdvPmtVATCounter; AdvPmtVATCounter.Number)
//                                 {
//                                 }
//                                 column(AdvPmtCLE_PostingDate; AdvPmtCLE."Posting Date")
//                                 {
//                                 }
//                                 column(AdvPmtCLE_DocumentNo; AdvPmtCLE."Document No.")
//                                 {
//                                 }
//                                 column(AdvPmtCLE_Description; AdvPmtCLE.Description)
//                                 {
//                                 }
//                                 column(TempVATAmountLine_VATPercent; TempVATAmountLine."VAT %")
//                                 {
//                                 }
//                                 column(TempVATAmountLine_AmountIncludingVAT; TempVATAmountLine."Amount Including VAT")
//                                 {
//                                 }
//                                 column(TempVATAmountLine_VATBase; TempVATAmountLine."VAT Base")
//                                 {
//                                 }
//                                 column(TempVATAmountLine_VATAmount; TempVATAmountLine."VAT Amount")
//                                 {
//                                 }
//                                 trigger OnPreDataItem();
//                                 begin
//                                     // >> #APTW17.00:A001
//                                     if (TempVATAmountLine.Count = 0) or (not FoundAdvPmt) then
//                                         CurrReport.Break;
//                                     SetRange(Number, 1, TempVATAmountLine.Count);
//                                     // << #APTW17.00:A001
//                                     ReportForNav.OnPreDataItem('AdvPmtVATCounter', AdvPmtVATCounter);
//                                 end;

//                                 trigger OnAfterGetRecord();
//                                 begin
//                                     // >> #APTW17.00:A001
//                                     TempVATAmountLine.GetLine(Number);
//                                     // << #APTW17.00:A001
//                                 end;

//                             }
//                             trigger OnPreDataItem();
//                             begin
//                                 // >> #APTW17.00:A001
//                                 SetRange("Transaction No.", AdvancePaymentEntries."Transaction No." + 2);
//                                 // << #APTW17.00:A001
//                                 ReportForNav.OnPreDataItem('DtldAdvancePaymentEntries', DtldAdvancePaymentEntries);
//                             end;

//                             trigger OnAfterGetRecord();
//                             var
//                                 VATEntry: Record "VAT Entry";
//                                 VPS: Record "VAT Posting Setup";
//                             begin
//                                 // >> #APTW17.00:A001
//                                 Clear(TempVATAmountLine);
//                                 TempVATAmountLine.DeleteAll;
//                                 FoundAdvPmt := true;
//                                 AdvPmtRemAmt := Amount;
//                                 AdvPmtCLE.Get("Applied Cust. Ledger Entry No.");
//                                 if AdvPmtCLE."CCS APT Adevance Payment Type" = AdvPmtCLE."CCS APT Adevance Payment Type"::"Advance Payment Request" then
//                                     CurrReport.Skip;
//                                 if "Currency Code" = '' then begin
//                                     VATEntry.SetRange("Posting Date", AdvPmtCLE."Posting Date");
//                                     VATEntry.SetRange("Document No.", AdvPmtCLE."Document No.");
//                                     VATEntry.SetRange("Document Type", VATEntry."document type"::Payment);
//                                     VATEntry.SetRange(Type, VATEntry.Type::Sale);
//                                     VATEntry.SetRange("Transaction No.", AdvPmtCLE."Transaction No." - 1);
//                                     if VATEntry.Find('-') then
//                                         repeat
//                                             VPS.Get(VATEntry."VAT Bus. Posting Group", VATEntry."VAT Prod. Posting Group");
//                                             TempVATAmountLine.Init;
//                                             TempVATAmountLine."VAT Identifier" := VPS."VAT Identifier";
//                                             TempVATAmountLine."VAT Calculation Type" := VPS."VAT Calculation Type";
//                                             TempVATAmountLine."VAT %" := VPS."VAT %";
//                                             TempVATAmountLine."VAT Base" := VATEntry.Base;
//                                             TempVATAmountLine."VAT Amount" := VATEntry.Amount;
//                                             TempVATAmountLine."Amount Including VAT" := VATEntry.Base + VATEntry.Amount;
//                                             TempVATAmountLine.InsertLine;
//                                         until VATEntry.Next = 0;
//                                 end else begin
//                                     VPS.Get("VAT Bus. Posting Group", "VAT Prod. Posting Group");
//                                     TempVATAmountLine.Init;
//                                     TempVATAmountLine."VAT Identifier" := VPS."VAT Identifier";
//                                     TempVATAmountLine."VAT Calculation Type" := VPS."VAT Calculation Type";
//                                     TempVATAmountLine."VAT %" := VPS."VAT %";
//                                     TempVATAmountLine."VAT Base" := DtldAdvancePaymentEntries.Amount; // VATEntry.Base;
//                                     TempVATAmountLine."VAT Amount" := 0;                              // VATEntry.Amount;
//                                     TempVATAmountLine."Amount Including VAT" := VATEntry.Base + VATEntry.Amount;
//                                     TempVATAmountLine.InsertLine;
//                                 end;
//                                 // << #APTW17.00:A001
//                             end;

//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             // >> #APTW17.00:A001
//                             FoundAdvPmt := false;
//                             with "Sales Invoice Header" do begin
//                                 if not ("CCS APT Advance Payment" and ("CCS APT Advance Payment Type" in ["CCS APT advance payment type"::"Partial Invoice",
//                                                                                           "CCS APT advance payment type"::"Closing Invoice"]))
//                                 then
//                                     CurrReport.Break;
//                             end;
//                             SetRange("Customer No.", "Sales Invoice Header"."Bill-to Customer No.");
//                             SetRange("Posting Date", "Sales Invoice Header"."Posting Date");
//                             SetRange("Document Type", "document type"::Invoice);
//                             SetRange("Document No.", "Sales Invoice Header"."No.");
//                             SetRange("Sell-to Customer No.", "Sales Invoice Header"."Sell-to Customer No.");
//                             //SetRange("CCS APT Advance Payment", "Sales Invoice Header"."CCS APT Advance Payment");
//                             SetRange("CCS APT Advance Payment No.", "Sales Invoice Header"."CCS APT Advance Payment No.");
//                             SetRange("CCS APT Adevance Payment Type", "Sales Invoice Header"."CCS APT Advance Payment Type");
//                             // << #APTW17.00:A001
//                             ReportForNav.OnPreDataItem('AdvancePaymentEntries', AdvancePaymentEntries);
//                         end;

//                     }
//                     dataitem(TMFooter; Integer)
//                     {
//                         DataItemTableView = sorting(Number);
//                         column(ReportForNavId_5060608; 5060608) { } // Autogenerated by ForNav - Do not delete
//                         column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
//                         column(TMFooter_Number; TMFooter.Number)
//                         {
//                         }
//                         column(TMFooter_Text; TempTMLine.Text)
//                         {
//                         }
//                         column(TMFooter_Italic; TempTMLine.Italic)
//                         {
//                         }
//                         column(TMFooter_Bold; TempTMLine.Bold)
//                         {
//                         }
//                         column(TMFooter_Underline; TempTMLine.Underline)
//                         {
//                         }
//                         column(TMFooter_Color; TempTMLine.Color)
//                         {
//                         }
//                         trigger OnPreDataItem();
//                         begin
//                             // >> #TMW17.00:A001
//                             if TestLicPermissionTM then begin
//                                 // >> #TMW17.10.01:T100
//                                 // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Sales Invoice Header",
//                                 //									"Sales Invoice Header", CurrReport.OBJECTID(FALSE));
//                                 TMEngine.GetTextSetForReport(TempTMLine, "Sales Invoice Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
//                                 // << #TMW17.10.01:T100
//                                 SetRange(Number, 1, TempTMLine.Count);
//                             end else begin
//                                 CurrReport.Break;
//                             end;
//                             // << #TMW17.00:A001
//                             ReportForNav.OnPreDataItem('TMFooter', TMFooter);
//                         end;

//                         trigger OnAfterGetRecord();
//                         begin
//                             // >> #TMW17.00:A001
//                             if Number = 1 then
//                                 TempTMLine.FindFirst
//                             else
//                                 TempTMLine.Next;
//                             // << #TMW17.00:A001
//                         end;

//                     }
//                     trigger OnPreDataItem();
//                     begin
//                         ReportForNav.OnPreDataItem('PageLoop', PageLoop);
//                     end;
//                 }
//                 trigger OnPreDataItem();
//                 begin
//                     NoOfLoops := Abs(NoOfCopies) + Cust."Invoice Copies" + 1;
//                     if NoOfLoops <= 0 then
//                         NoOfLoops := 1;
//                     CopyText := '';
//                     SetRange(Number, 1, NoOfLoops);
//                     OutputNo := 1;
//                     ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
//                 end;

//                 trigger OnAfterGetRecord();
//                 begin
//                     if Number > 1 then begin
//                         CopyText := Text003;
//                         OutputNo += 1;
//                     end;

//                     TotalSubTotal := 0;
//                     TotalInvoiceDiscountAmt := 0;
//                     TotalAmount := 0;
//                     TotalAmountVAT := 0;
//                     TotalAmountInclVAT := 0;
//                     TotalPaymentDiscountOnVAT := 0;
//                 end;

//                 trigger OnPostDataItem();
//                 begin
//                     if not CurrReport.Preview then
//                         SalesInvCountPrinted.Run("Sales Invoice Header");
//                 end;

//             }
//             trigger OnPreDataItem();
//             begin
//                 ReportForNav.OnPreDataItem('SalesInvoiceHeader', "Sales Invoice Header");
//             end;

//             trigger OnAfterGetRecord();
//             begin
//                 CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
//                 if RespCenter.Get("Responsibility Center") then begin
//                     FormatAddr.RespCenter(CompanyAddr, RespCenter);
//                     CompanyInfo."Phone No." := RespCenter."Phone No.";
//                     CompanyInfo."Fax No." := RespCenter."Fax No.";
//                 end else begin
//                     FormatAddr.Company(CompanyAddr, CompanyInfo);
//                 end;
//                 DimSetEntry1.SetRange("Dimension Set ID", "Dimension Set ID");
//                 if "Order No." = '' then
//                     OrderNoText := ''
//                 else
//                     OrderNoText := FieldCaption("Order No.");
//                 if "Salesperson Code" = '' then begin
//                     SalesPurchPerson.Init;
//                     SalesPersonText := '';
//                 end else begin
//                     SalesPurchPerson.Get("Salesperson Code");
//                     SalesPersonText := Text000;
//                 end;
//                 if "Your Reference" = '' then
//                     ReferenceText := ''
//                 else
//                     ReferenceText := FieldCaption("Your Reference");
//                 if "VAT Registration No." = '' then
//                     VATNoText := ''
//                 else
//                     VATNoText := FieldCaption("VAT Registration No.");
//                 if "Currency Code" = '' then begin
//                     GLSetup.TestField("LCY Code");
//                     TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
//                     TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
//                     TotalExclVATText := StrSubstNo(Text006, GLSetup."LCY Code");
//                 end else begin
//                     TotalText := StrSubstNo(Text001, "Currency Code");
//                     TotalInclVATText := StrSubstNo(Text002, "Currency Code");
//                     TotalExclVATText := StrSubstNo(Text006, "Currency Code");
//                 end;
//                 FormatAddr.SalesInvBillTo(CustAddr, "Sales Invoice Header");
//                 if not Cust.Get("Bill-to Customer No.") then
//                     Clear(Cust);
//                 if "Payment Terms Code" = '' then
//                     PaymentTerms.Init
//                 else begin
//                     PaymentTerms.Get("Payment Terms Code");
//                     PaymentTerms.TranslateDescription(PaymentTerms, "Language Code");
//                 end;
//                 if "Shipment Method Code" = '' then
//                     ShipmentMethod.Init
//                 else begin
//                     ShipmentMethod.Get("Shipment Method Code");
//                     ShipmentMethod.TranslateDescription(ShipmentMethod, "Language Code");
//                 end;
//                 FormatAddr.SalesInvShipTo(ShipToAddr, CustAddr, "Sales Invoice Header");
//                 ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
//                 for i := 1 to ArrayLen(ShipToAddr) do
//                     if ShipToAddr[i] <> CustAddr[i] then
//                         ShowShippingAddr := true;
//                 GetLineFeeNoteOnReportHist("No.");
//                 if LogInteraction then
//                     if not CurrReport.Preview then begin
//                         if "Bill-to Contact No." <> '' then
//                             SegManagement.LogDocument(
//                               4, "No.", 0, 0, Database::Contact, "Bill-to Contact No.", "Salesperson Code",
//                               "Campaign No.", "Posting Description", '')
//                         else
//                             SegManagement.LogDocument(
//                               4, "No.", 0, 0, Database::Customer, "Bill-to Customer No.", "Salesperson Code",
//                               "Campaign No.", "Posting Description", '');
//                     end;
//                 CompanyInfo.CalcFields(Picture, "Picture 2");
//             end;

//         }
//     }
//     requestpage
//     {
//         SaveValues = true;
//         layout
//         {
//             area(Content)
//             {
//                 group(Options)
//                 {
//                     Caption = 'Options';
//                     field(NoOfCopies; NoOfCopies)
//                     {
//                         ApplicationArea = Basic;
//                         Caption = 'No. of Copies';
//                     }
//                     field(ShowInternalInfo; ShowInternalInfo)
//                     {
//                         ApplicationArea = Basic;
//                         Caption = 'Show Internal Information';
//                     }
//                     field(LogInteraction; LogInteraction)
//                     {
//                         ApplicationArea = Basic;
//                         Caption = 'Log Interaction';
//                         Enabled = LogInteractionEnable;
//                     }
//                     field(DisplayAsmInformation; DisplayAssemblyInformation)
//                     {
//                         ApplicationArea = Basic;
//                         Caption = 'Show Assembly Components';
//                     }
//                     field(DisplayAdditionalFeeNote; DisplayAdditionalFeeNote)
//                     {
//                         ApplicationArea = Basic;
//                         Caption = 'Show Additional Fee Note';
//                     }
//                 }
//             }
//         }

//         trigger OnInit()
//         begin
//             LogInteractionEnable := true;
//         end;

//         trigger OnOpenPage()
//         begin
//             InitLogInteraction;
//             LogInteractionEnable := LogInteraction;
//         end;

//     }

//     trigger OnInitReport()
//     begin
//         GLSetup.Get;
//         CompanyInfo.Get;
//         SalesSetup.Get;
//         CompanyInfo.VerifyAndSetPaymentInfo;
//         CompanyInfo.CalcFields(Picture, "Picture 2");
//         ;
//         ReportsForNavInit;

//     end;

//     trigger OnPostReport()
//     begin
//     end;

//     trigger OnPreReport()
//     begin
//         if not CurrReport.UseRequestPage then
//             InitLogInteraction;
//         ;
//         ReportsForNavPre;
//     end;

//     var
//         Text000: label 'Salesperson';
//         Text001: label 'Total %1';
//         Text002: label 'Total %1 Incl. VAT';
//         Text003: label ' COPY';
//         Text004: label 'Sales - Invoice%1';
//         PageCaptionCap: label 'Page %1 of %2';
//         Text006: label 'Total %1 Excl. VAT';
//         ItemNo: Text;
//         Customer: Record Customer;
//         GLSetup: Record "General Ledger Setup";
//         ShipmentMethod: Record "Shipment Method";
//         PaymentTerms: Record "Payment Terms";
//         SalesPurchPerson: Record "Salesperson/Purchaser";
//         CompanyInfo: Record "Company Information";
//         CompanyInfo1: Record "Company Information";
//         CompanyInfo2: Record "Company Information";
//         CompanyInfo3: Record "Company Information";
//         SalesSetup: Record "Sales & Receivables Setup";
//         Cust: Record Customer;
//         VATAmountLine: Record "VAT Amount Line" temporary;
//         DimSetEntry1: Record "Dimension Set Entry";
//         DimSetEntry2: Record "Dimension Set Entry";
//         RespCenter: Record "Responsibility Center";
//         Language2: Codeunit Language;
//         CurrExchRate: Record "Currency Exchange Rate";
//         TempPostedAsmLine: Record "Posted Assembly Line" temporary;
//         VATClause: Record "VAT Clause";
//         TempLineFeeNoteOnReportHist: Record "Line Fee Note on Report Hist." temporary;
//         SalesInvCountPrinted: Codeunit "Sales Inv.-Printed";
//         FormatAddr: Codeunit "Format Address";
//         SegManagement: Codeunit SegManagement;
//         SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
//         PostedShipmentDate: Date;
//         CustAddr: array[8] of Text[50];
//         ShipToAddr: array[8] of Text[50];
//         CompanyAddr: array[8] of Text[50];
//         OrderNoText: Text[80];
//         SalesPersonText: Text[30];
//         VATNoText: Text[80];
//         ReferenceText: Text[80];
//         TotalText: Text[50];
//         TotalExclVATText: Text[50];
//         TotalInclVATText: Text[50];
//         MoreLines: Boolean;
//         NoOfCopies: Integer;
//         NoOfLoops: Integer;
//         CopyText: Text[30];
//         ShowShippingAddr: Boolean;
//         i: Integer;
//         NextEntryNo: Integer;
//         FirstValueEntryNo: Integer;
//         DimText: Text[120];
//         OldDimText: Text[75];
//         ShowInternalInfo: Boolean;
//         Continue: Boolean;
//         LogInteraction: Boolean;
//         VALVATBaseLCY: Decimal;
//         VALVATAmountLCY: Decimal;
//         VALSpecLCYHeader: Text[80];
//         Text007: label 'VAT Amount Specification in ';
//         Text008: label 'Local Currency';
//         VALExchRate: Text[50];
//         Text009: label 'Exchange rate: %1/%2';
//         CalculatedExchRate: Decimal;
//         Text010: label 'Sales - Prepayment Invoice %1';
//         OutputNo: Integer;
//         TotalSubTotal: Decimal;
//         TotalAmount: Decimal;
//         TotalAmountInclVAT: Decimal;
//         TotalAmountVAT: Decimal;
//         TotalInvoiceDiscountAmt: Decimal;
//         TotalPaymentDiscountOnVAT: Decimal;
//         [InDataSet]
//         LogInteractionEnable: Boolean;
//         DisplayAssemblyInformation: Boolean;
//         Text5013500: label 'Sales - Advance Payment Request %1';
//         PhoneNoCaptionLbl: label 'Phone No.';
//         HomePageCaptionCap: label 'Home Page';
//         VATRegNoCaptionLbl: label 'VAT Registration No.';
//         GiroNoCaptionLbl: label 'Giro No.';
//         BankNameCaptionLbl: label 'Bank';
//         BankAccountNoCaptionLbl: label 'Account No.';
//         DueDateCaptionLbl: label 'Due Date';
//         InvoiceNoCaptionLbl: label 'Invoice No.';
//         PostingDateCaptionLbl: label 'Posting Date';
//         DimensionsCaptionLbl: label 'Header Dimensions';
//         UnitPriceCaptionLbl: label 'Unit Price';
//         DiscountCaptionLbl: label 'Discount %';
//         AmountCaptionLbl: label 'Amount';
//         VATClausesCap: label 'VAT Clause';
//         PostedShipmentDateCaptionLbl: Label '';
//         SubtotalCaptionLbl: label 'Subtotal';
//         PaymentDiscVATCaptionLbl: label 'Payment Discount on VAT';
//         ShipmentCaptionLbl: label 'Shipment';
//         LineDimensionsCaptionLbl: label 'Line Dimensions';
//         VATAmntSpecificCaptionLbl: label 'VAT Amount Specification';
//         InvDiscBaseAmtCaptionLbl: label 'Invoice Discount Base Amount';
//         LineAmountCaptionLbl: label 'Line Amount';
//         ShipToAddressCaptionLbl: label 'Ship-to Address';
//         EMailCaptionLbl: label 'E-Mail';
//         InvDiscountAmountCaptionLbl: label 'Invoice Discount Amount';
//         VATCaptionLbl: label 'VAT %';
//         VATBaseCaptionLbl: label 'VAT Base';
//         VATAmountCaptionLbl: label 'VAT Amount';
//         VATIdentifierCaptionLbl: label 'VAT Identifier';
//         TotalCaptionLbl: label 'Total';
//         PaymentTermsCaptionLbl: label 'Payment Terms';
//         ShipmentMethodCaptionLbl: label 'Shipment Method';
//         DocumentDateCaptionLbl: label 'Document Date';
//         DisplayAdditionalFeeNote: Boolean;
//         "--- TM glob. Vars. ---": Integer;
//         LicPermission: Record "License Permission";
//         TMEngine: Codeunit "CCS TM Engine";
//         TempTMLine: Record "CCS TM Line Document" temporary;
//         "--- APT glob. Vars. ---": Integer;
//         FoundAdvPmt: Boolean;
//         AdvPmtCLE: Record "Cust. Ledger Entry";
//         AdvPmtRemAmt: Decimal;
//         TempVATAmountLine: Record "VAT Amount Line" temporary;
//         APTReceivedAdvancePaymentsCaptionLbl: label 'Received Advance Payments';
//         APTDateCaptionLbl: label 'Date';
//         APTDocumentNoCaptionLbl: label 'Document No.';
//         APTDescriptionCaptionLbl: label 'Description';
//         APTVATPercentCaptionLbl: label 'VAT %';
//         APTAmountCaptionLbl: label 'Amount';
//         APTVATBaseCaptionLbl: label 'VAT Base';
//         APTVATAmountCaptionLbl: label 'VAT Amount';
//         VATCpt: label '% MwSt.-Betrag';
//         AusgUnitPrice: Text;
//         AusgLAmount: Text;

//     procedure InitLogInteraction()
//     var
//         DocumentType: Enum "Interaction Log Entry Document Type";
//     begin
//         LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Inv.") <> '';
//     end;

//     procedure FindPostedShipmentDate(): Date
//     var
//         SalesShipmentHeader: Record "Sales Shipment Header";
//         SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
//     begin
//         NextEntryNo := 1;
//         if "Sales Invoice Line"."Shipment No." <> '' then
//             if SalesShipmentHeader.Get("Sales Invoice Line"."Shipment No.") then
//                 //EXIT(SalesShipmentHeader."Posting Date");
//                 exit(0D);
//         if "Sales Invoice Header"."Order No." = '' then
//             //EXIT("Sales Invoice Header"."Posting Date");
//             exit(0D);
//         case "Sales Invoice Line".Type of
//             "Sales Invoice Line".Type::Item:
//                 GenerateBufferFromValueEntry("Sales Invoice Line");
//             "Sales Invoice Line".Type::"G/L Account", "Sales Invoice Line".Type::Resource,
//           "Sales Invoice Line".Type::"Charge (Item)", "Sales Invoice Line".Type::"Fixed Asset":
//                 GenerateBufferFromShipment("Sales Invoice Line");
//             "Sales Invoice Line".Type::" ":
//                 exit(0D);
//         end;
//         SalesShipmentBuffer.Reset;
//         SalesShipmentBuffer.SetRange("Document No.", "Sales Invoice Line"."Document No.");
//         SalesShipmentBuffer.SetRange("Line No.", "Sales Invoice Line"."Line No.");
//         if SalesShipmentBuffer.Find('-') then begin
//             SalesShipmentBuffer2 := SalesShipmentBuffer;
//             if SalesShipmentBuffer.Next = 0 then begin
//                 SalesShipmentBuffer.Get(
//                   SalesShipmentBuffer2."Document No.", SalesShipmentBuffer2."Line No.", SalesShipmentBuffer2."Entry No.");
//                 SalesShipmentBuffer.Delete;
//                 //EXIT(SalesShipmentBuffer2."Posting Date");
//                 exit(0D);
//             end;
//             SalesShipmentBuffer.CalcSums(Quantity);
//             if SalesShipmentBuffer.Quantity <> "Sales Invoice Line".Quantity then begin
//                 SalesShipmentBuffer.DeleteAll;
//                 //EXIT("Sales Invoice Header"."Posting Date");
//                 exit(0D);
//             end;
//         end else
//             //EXIT("Sales Invoice Header"."Posting Date");
//             exit(0D);
//     end;

//     procedure GenerateBufferFromValueEntry(SalesInvoiceLine2: Record "Sales Invoice Line")
//     var
//         ValueEntry: Record "Value Entry";
//         ItemLedgerEntry: Record "Item Ledger Entry";
//         TotalQuantity: Decimal;
//         Quantity: Decimal;
//     begin
//         TotalQuantity := SalesInvoiceLine2."Quantity (Base)";
//         ValueEntry.SetCurrentkey("Document No.");
//         ValueEntry.SetRange("Document No.", SalesInvoiceLine2."Document No.");
//         ValueEntry.SetRange("Posting Date", "Sales Invoice Header"."Posting Date");
//         ValueEntry.SetRange("Item Charge No.", '');
//         ValueEntry.SetFilter("Entry No.", '%1..', FirstValueEntryNo);
//         if ValueEntry.Find('-') then
//             repeat
//                 if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
//                     if SalesInvoiceLine2."Qty. per Unit of Measure" <> 0 then
//                         Quantity := ValueEntry."Invoiced Quantity" / SalesInvoiceLine2."Qty. per Unit of Measure"
//                     else
//                         Quantity := ValueEntry."Invoiced Quantity";
//                     AddBufferEntry(
//                       SalesInvoiceLine2,
//                       -Quantity,
//                       ItemLedgerEntry."Posting Date");
//                     TotalQuantity := TotalQuantity + ValueEntry."Invoiced Quantity";
//                 end;
//                 FirstValueEntryNo := ValueEntry."Entry No." + 1;
//             until (ValueEntry.Next = 0) or (TotalQuantity = 0);
//     end;

//     procedure GenerateBufferFromShipment(SalesInvoiceLine: Record "Sales Invoice Line")
//     var
//         SalesInvoiceHeader: Record "Sales Invoice Header";
//         SalesInvoiceLine2: Record "Sales Invoice Line";
//         SalesShipmentHeader: Record "Sales Shipment Header";
//         SalesShipmentLine: Record "Sales Shipment Line";
//         TotalQuantity: Decimal;
//         Quantity: Decimal;
//     begin
//         TotalQuantity := 0;
//         SalesInvoiceHeader.SetCurrentkey("Order No.");
//         SalesInvoiceHeader.SetFilter("No.", '..%1', "Sales Invoice Header"."No.");
//         SalesInvoiceHeader.SetRange("Order No.", "Sales Invoice Header"."Order No.");
//         if SalesInvoiceHeader.Find('-') then
//             repeat
//                 SalesInvoiceLine2.SetRange("Document No.", SalesInvoiceHeader."No.");
//                 SalesInvoiceLine2.SetRange("Line No.", SalesInvoiceLine."Line No.");
//                 SalesInvoiceLine2.SetRange(Type, SalesInvoiceLine.Type);
//                 SalesInvoiceLine2.SetRange("No.", SalesInvoiceLine."No.");
//                 SalesInvoiceLine2.SetRange("Unit of Measure Code", SalesInvoiceLine."Unit of Measure Code");
//                 if SalesInvoiceLine2.Find('-') then
//                     repeat
//                         TotalQuantity := TotalQuantity + SalesInvoiceLine2.Quantity;
//                     until SalesInvoiceLine2.Next = 0;
//             until SalesInvoiceHeader.Next = 0;
//         SalesShipmentLine.SetCurrentkey("Order No.", "Order Line No.");
//         SalesShipmentLine.SetRange("Order No.", "Sales Invoice Header"."Order No.");
//         SalesShipmentLine.SetRange("Order Line No.", SalesInvoiceLine."Line No.");
//         SalesShipmentLine.SetRange("Line No.", SalesInvoiceLine."Line No.");
//         SalesShipmentLine.SetRange(Type, SalesInvoiceLine.Type);
//         SalesShipmentLine.SetRange("No.", SalesInvoiceLine."No.");
//         SalesShipmentLine.SetRange("Unit of Measure Code", SalesInvoiceLine."Unit of Measure Code");
//         SalesShipmentLine.SetFilter(Quantity, '<>%1', 0);
//         if SalesShipmentLine.Find('-') then
//             repeat
//                 if "Sales Invoice Header"."Get Shipment Used" then
//                     CorrectShipment(SalesShipmentLine);
//                 if Abs(SalesShipmentLine.Quantity) <= Abs(TotalQuantity - SalesInvoiceLine.Quantity) then
//                     TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity
//                 else begin
//                     if Abs(SalesShipmentLine.Quantity) > Abs(TotalQuantity) then
//                         SalesShipmentLine.Quantity := TotalQuantity;
//                     Quantity :=
//                       SalesShipmentLine.Quantity - (TotalQuantity - SalesInvoiceLine.Quantity);
//                     TotalQuantity := TotalQuantity - SalesShipmentLine.Quantity;
//                     SalesInvoiceLine.Quantity := SalesInvoiceLine.Quantity - Quantity;
//                     if SalesShipmentHeader.Get(SalesShipmentLine."Document No.") then begin
//                         AddBufferEntry(
//                           SalesInvoiceLine,
//                           Quantity,
//                           SalesShipmentHeader."Posting Date");
//                     end;
//                 end;
//             until (SalesShipmentLine.Next = 0) or (TotalQuantity = 0);
//     end;

//     procedure CorrectShipment(var SalesShipmentLine: Record "Sales Shipment Line")
//     var
//         SalesInvoiceLine: Record "Sales Invoice Line";
//     begin
//         SalesInvoiceLine.SetCurrentkey("Shipment No.", "Shipment Line No.");
//         SalesInvoiceLine.SetRange("Shipment No.", SalesShipmentLine."Document No.");
//         SalesInvoiceLine.SetRange("Shipment Line No.", SalesShipmentLine."Line No.");
//         if SalesInvoiceLine.Find('-') then
//             repeat
//                 SalesShipmentLine.Quantity := SalesShipmentLine.Quantity - SalesInvoiceLine.Quantity;
//             until SalesInvoiceLine.Next = 0;
//     end;

//     procedure AddBufferEntry(SalesInvoiceLine: Record "Sales Invoice Line"; QtyOnShipment: Decimal; PostingDate: Date)
//     begin
//         SalesShipmentBuffer.SetRange("Document No.", SalesInvoiceLine."Document No.");
//         SalesShipmentBuffer.SetRange("Line No.", SalesInvoiceLine."Line No.");
//         SalesShipmentBuffer.SetRange("Posting Date", PostingDate);
//         if SalesShipmentBuffer.Find('-') then begin
//             SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity + QtyOnShipment;
//             SalesShipmentBuffer.Modify;
//             exit;
//         end;
//         with SalesShipmentBuffer do begin
//             "Document No." := SalesInvoiceLine."Document No.";
//             "Line No." := SalesInvoiceLine."Line No.";
//             "Entry No." := NextEntryNo;
//             Type := SalesInvoiceLine.Type;
//             "No." := SalesInvoiceLine."No.";
//             Quantity := QtyOnShipment;
//             "Posting Date" := PostingDate;
//             Insert;
//             NextEntryNo := NextEntryNo + 1
//         end;
//     end;

//     local procedure DocumentCaption(): Text[250]
//     begin
//         // >> #APTW17.00:A001
//         if "Sales Invoice Header"."CCS APT Advance Payment" and
//            ("Sales Invoice Header"."CCS APT Advance Payment Type" = "Sales Invoice Header"."CCS APT advance payment type"::"Advance Payment Request")
//         then
//             exit(Text5013500)
//         else
//             // << #APTW17.00:A001
//             if "Sales Invoice Header"."Prepayment Invoice" then
//                 exit(Text010);
//         exit(Text004);
//     end;

//     procedure InitializeRequest(NewNoOfCopies: Integer; NewShowInternalInfo: Boolean; NewLogInteraction: Boolean; DisplayAsmInfo: Boolean)
//     begin
//         NoOfCopies := NewNoOfCopies;
//         ShowInternalInfo := NewShowInternalInfo;
//         LogInteraction := NewLogInteraction;
//         DisplayAssemblyInformation := DisplayAsmInfo;
//     end;

//     procedure CollectAsmInformation()
//     var
//         ValueEntry: Record "Value Entry";
//         ItemLedgerEntry: Record "Item Ledger Entry";
//         PostedAsmHeader: Record "Posted Assembly Header";
//         PostedAsmLine: Record "Posted Assembly Line";
//         SalesShipmentLine: Record "Sales Shipment Line";
//     begin
//         TempPostedAsmLine.DeleteAll;
//         if "Sales Invoice Line".Type <> "Sales Invoice Line".Type::Item then
//             exit;
//         with ValueEntry do begin
//             SetCurrentkey("Document No.");
//             SetRange("Document No.", "Sales Invoice Line"."Document No.");
//             SetRange("Document Type", "document type"::"Sales Invoice");
//             SetRange("Document Line No.", "Sales Invoice Line"."Line No.");
//             SetRange(Adjustment, false);
//             if not FindSet then
//                 exit;
//         end;
//         repeat
//             if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
//                 if ItemLedgerEntry."Document Type" = ItemLedgerEntry."document type"::"Sales Shipment" then begin
//                     SalesShipmentLine.Get(ItemLedgerEntry."Document No.", ItemLedgerEntry."Document Line No.");
//                     if SalesShipmentLine.AsmToShipmentExists(PostedAsmHeader) then begin
//                         PostedAsmLine.SetRange("Document No.", PostedAsmHeader."No.");
//                         if PostedAsmLine.FindSet then
//                             repeat
//                                 TreatAsmLineBuffer(PostedAsmLine);
//                             until PostedAsmLine.Next = 0;
//                     end;
//                 end;
//             end;
//         until ValueEntry.Next = 0;
//     end;

//     procedure TreatAsmLineBuffer(PostedAsmLine: Record "Posted Assembly Line")
//     begin
//         Clear(TempPostedAsmLine);
//         TempPostedAsmLine.SetRange(Type, PostedAsmLine.Type);
//         TempPostedAsmLine.SetRange("No.", PostedAsmLine."No.");
//         TempPostedAsmLine.SetRange("Variant Code", PostedAsmLine."Variant Code");
//         TempPostedAsmLine.SetRange(Description, PostedAsmLine.Description);
//         TempPostedAsmLine.SetRange("Unit of Measure Code", PostedAsmLine."Unit of Measure Code");
//         if TempPostedAsmLine.FindFirst then begin
//             TempPostedAsmLine.Quantity += PostedAsmLine.Quantity;
//             TempPostedAsmLine.Modify;
//         end else begin
//             Clear(TempPostedAsmLine);
//             TempPostedAsmLine := PostedAsmLine;
//             TempPostedAsmLine.Insert;
//         end;
//     end;

//     procedure GetUOMText(UOMCode: Code[10]): Text[10]
//     var
//         UnitOfMeasure: Record "Unit of Measure";
//     begin
//         if not UnitOfMeasure.Get(UOMCode) then
//             exit(UOMCode);
//         exit(UnitOfMeasure.Description);
//     end;

//     procedure BlanksForIndent(): Text[10]
//     begin
//         exit(PadStr('', 2, ' '));
//     end;

//     local procedure GetLineFeeNoteOnReportHist(SalesInvoiceHeaderNo: Code[20])
//     var
//         LineFeeNoteOnReportHist: Record "Line Fee Note on Report Hist.";
//         CustLedgerEntry: Record "Cust. Ledger Entry";
//         Customer: Record Customer;
//     begin
//         TempLineFeeNoteOnReportHist.DeleteAll;
//         CustLedgerEntry.SetRange("Document Type", CustLedgerEntry."document type"::Invoice);
//         CustLedgerEntry.SetRange("Document No.", SalesInvoiceHeaderNo);
//         if not CustLedgerEntry.FindFirst then
//             exit;
//         if not Customer.Get(CustLedgerEntry."Customer No.") then
//             exit;
//         LineFeeNoteOnReportHist.SetRange("Cust. Ledger Entry No", CustLedgerEntry."Entry No.");
//         LineFeeNoteOnReportHist.SetRange("Language Code", Customer."Language Code");
//         if LineFeeNoteOnReportHist.FindSet then begin
//             repeat
//                 TempLineFeeNoteOnReportHist.Init;
//                 TempLineFeeNoteOnReportHist.Copy(LineFeeNoteOnReportHist);
//                 TempLineFeeNoteOnReportHist.Insert;
//             until LineFeeNoteOnReportHist.Next = 0;
//         end else begin
//             LineFeeNoteOnReportHist.SetRange("Language Code", Language2.GetUserLanguageCode());
//             if LineFeeNoteOnReportHist.FindSet then
//                 repeat
//                     TempLineFeeNoteOnReportHist.Init;
//                     TempLineFeeNoteOnReportHist.Copy(LineFeeNoteOnReportHist);
//                     TempLineFeeNoteOnReportHist.Insert;
//                 until LineFeeNoteOnReportHist.Next = 0;
//         end;
//     end;

//     procedure "--- Text Module ---"()
//     begin
//     end;

//     procedure TestLicPermissionTM(): Boolean
//     begin
//         // >> #TMW17.00:A001
//         if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
//            (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
//         then begin
//             LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
//         end;
//         if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
//             exit(true);
//         end else begin
//             exit(false);
//         end;
//         // << #TMW17.00:A001
//     end;

//     local procedure OnPreSectionSalesInvoiceLine_Body21(var "Sales Invoice Line": Record "Sales Invoice Line");
//     begin
//         if "Sales Invoice Line".Type.AsInteger() = 2 then
//             ItemNo := "Sales Invoice Line"."No."
//         else
//             ItemNo := '';
//         AusgLAmount := '';
//         AusgUnitPrice := '';
//         if "Sales Invoice Line"."Line Amount" <> 0 then
//             AusgLAmount := Format("Sales Invoice Line"."Line Amount", 14, '<Precision,2:2><Standard Format,0>');
//         if "Sales Invoice Line"."Unit Price" <> 0 then
//             AusgUnitPrice := Format("Sales Invoice Line"."Unit Price", 14, '<Precision,2:2><Standard Format,0>');
//     end;

//     local procedure OnPreSectionSalesInvoiceLine_Body20(var "Sales Invoice Line": Record "Sales Invoice Line");
//     begin
//         ReportForNavSetShowOutput("Sales Invoice Line"."Description 2" <> '');
//     end;
//     // --> Reports ForNAV Autogenerated code - do not delete or modify
//     var
//         ReportForNav: Codeunit "ForNAV Report Management";
//         ReportForNavTotalsCausedBy: Integer;
//         ReportForNavInitialized: Boolean;
//         ReportForNavShowOutput: Boolean;

//     local procedure ReportsForNavInit()
//     var
//         id: Integer;
//     begin
//         Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
//         ReportForNav.OnInit(id);
//     end;

//     local procedure ReportsForNavPre()
//     begin
//     end;

//     local procedure ReportForNavSetTotalsCausedBy(value: Integer)
//     begin
//         ReportForNavTotalsCausedBy := value;
//     end;

//     local procedure ReportForNavSetShowOutput(value: Boolean)
//     begin
//         ReportForNavShowOutput := value;
//     end;

//     local procedure ReportForNavInit(jsonObject: JsonObject)
//     begin
//         ReportForNav.Init(jsonObject, CurrReport.ObjectId);
//     end;

//     local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
//     var
//         values: Text;
//         jsonObject: JsonObject;
//         currLanguage: Integer;
//     begin
//         if not ReportForNavInitialized then begin
//             ReportForNavInit(jsonObject);
//             ReportForNavInitialized := true;
//         end;

//         case (dataItemId) of
//             'SalesInvoiceHeader':
//                 begin
//                     jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
//                 end;
//             'SalesInvoiceLine':
//                 begin
//                     ReportForNavShowOutput := true;
//                     OnPreSectionSalesInvoiceLine_Body21("Sales Invoice Line");
//                     jsonObject.Add('$Body21$Pre', ReportForNavShowOutput);
//                     ReportForNavShowOutput := true;
//                     OnPreSectionSalesInvoiceLine_Body20("Sales Invoice Line");
//                     jsonObject.Add('$Body20$Pre', ReportForNavShowOutput);
//                 end;
//             'AsmLoop':
//                 begin
//                     currLanguage := GlobalLanguage;
//                     GlobalLanguage := 1033;
//                     jsonObject.Add('DataItem$AsmLoop$CurrentKey$Text', AsmLoop.CurrentKey);
//                     GlobalLanguage := currLanguage;
//                 end;
//         end;
//         ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
//         jsonObject.WriteTo(values);
//         exit(values);
//     end;
//     // Reports ForNAV Autogenerated code - do not delete or modify -->
// }
