#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60012 "CCO Inv. Availability Plan"
{
    Caption = 'Inventory Availability Plan DÃ¼perthal';
    WordLayout = './Layouts/CCOInv.AvailabilityPlan.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Item; Item)
        {
            CalcFields = Inventory;
            DataItemTableView = where(Type = const(Inventory));
            RequestFilterFields = "No.", "Location Filter", "Variant Filter", "Search Description", "Assembly BOM", "Item Category Code", "Vendor No.";
            column(ReportForNavId_8129; 8129) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Item; ReportForNavWriteDataItem('Item', Item)) { }
            column(CompanyName; COMPANYNAME)
            {
                IncludeCaption = false;
            }
            column(TblCptItemFilter; TableCaption + ': ' + ItemFilter)
            {
                IncludeCaption = false;
            }
            column(ItemFilter; ItemFilter)
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate2; Format(PeriodStartDate[2]))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate3; Format(PeriodStartDate[3]))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate4; Format(PeriodStartDate[4]))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate5; Format(PeriodStartDate[5]))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate6; Format(PeriodStartDate[6]))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate7; Format(PeriodStartDate[7]))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate31; Format(PeriodStartDate[3] - 1))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate41; Format(PeriodStartDate[4] - 1))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate51; Format(PeriodStartDate[5] - 1))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate61; Format(PeriodStartDate[6] - 1))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate71; Format(PeriodStartDate[7] - 1))
            {
                IncludeCaption = false;
            }
            column(PeriodStartDate81; Format(PeriodStartDate[8] - 1))
            {
                IncludeCaption = false;
            }
            column(UseStockkeepingUnit; UseStockkeepingUnit)
            {
                IncludeCaption = false;
            }
            column(No_Item; Item."No.")
            {
                IncludeCaption = false;
            }
            column(Description_Item; Item.Description)
            {
                IncludeCaption = false;
            }
            column(VendorNo_Item; Item."Vendor No.")
            {
                IncludeCaption = false;
            }
            column(VendName; Vend.Name)
            {
                IncludeCaption = false;
            }
            column(DUE004; DUE004)
            {
                IncludeCaption = false;
            }
            column(DUE003; DUE003)
            {
                IncludeCaption = false;
            }
            column(DUE002; DUE002)
            {
                IncludeCaption = false;
            }
            column(DUE001; DUE001)
            {
                IncludeCaption = false;
            }
            column(VendorItemNo_Item; Item."Vendor Item No.")
            {
                IncludeCaption = true;
            }
            column(LeadTimeCalc_Item; Item."Lead Time Calculation")
            {
                IncludeCaption = true;
            }
            column(GrossReq1; GrossReq[1])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq2; GrossReq[2])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq3; GrossReq[3])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq4; GrossReq[4])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq5; GrossReq[5])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq6; GrossReq[6])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq7; GrossReq[7])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossReq8; GrossReq[8])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt1; SchedReceipt[1])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt2; SchedReceipt[2])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt3; SchedReceipt[3])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt4; SchedReceipt[4])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt5; SchedReceipt[5])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt6; SchedReceipt[6])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt7; SchedReceipt[7])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(SchedReceipt8; SchedReceipt[8])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(Inventory_Item; Item.Inventory)
            {
                AutoCalcField = true;
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance1; ProjAvBalance[1])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance2; ProjAvBalance[2])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance3; ProjAvBalance[3])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance4; ProjAvBalance[4])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance5; ProjAvBalance[5])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance6; ProjAvBalance[6])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance7; ProjAvBalance[7])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ProjAvBalance8; ProjAvBalance[8])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(GrossRequirement; GrossRequirement)
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(ScheduledReceipt; ScheduledReceipt)
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlannedReceipt; PlannedReceipt)
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt1; PlanReceipt[1])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt2; PlanReceipt[2])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt3; PlanReceipt[3])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt4; PlanReceipt[4])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt5; PlanReceipt[5])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt6; PlanReceipt[6])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt7; PlanReceipt[7])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanReceipt8; PlanReceipt[8])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease1; PlanRelease[1])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlannedRelease; PlannedRelease)
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease2; PlanRelease[2])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease3; PlanRelease[3])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease4; PlanRelease[4])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease5; PlanRelease[5])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease6; PlanRelease[6])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease7; PlanRelease[7])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(PlanRelease8; PlanRelease[8])
            {
                DecimalPlaces = 0 : 5;
                IncludeCaption = false;
            }
            column(InventoryAvailabilityPlanCaption; InventoryAvailabilityPlanCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(CurrReportPageNoCaption; CurrReportPageNoCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(GrossReq1Caption; GrossReq1CaptionLbl)
            {
                IncludeCaption = false;
            }
            column(GrossReq8Caption; GrossReq8CaptionLbl)
            {
                IncludeCaption = false;
            }
            column(VendorCaption; VendorCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(GrossRequirementCaption; GrossRequirementCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(ScheduledReceiptCaption; ScheduledReceiptCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(InventoryCaption; InventoryCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(PlannedReceiptCaption; PlannedReceiptCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(PlannedReleasesCaption; PlannedReleasesCaptionLbl)
            {
                IncludeCaption = false;
            }
            column(ReorderPoint; Item."Reorder Point")
            {
                Description = 'D0020';
                IncludeCaption = true;
            }
            column(ReorderQuantity; Item."Reorder Quantity")
            {
                Description = 'P0015';
                IncludeCaption = true;
            }
            dataitem("Stockkeeping Unit"; "Stockkeeping Unit")
            {
                DataItemLink = "Item No." = FIELD("No."), "Location Code" = FIELD("Location Filter"), "Variant Code" = FIELD("Variant Filter");
                DataItemTableView = sorting("Item No.", "Location Code", "Variant Code");
                column(ReportForNavId_5605; 5605) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_StockkeepingUnit; ReportForNavWriteDataItem('StockkeepingUnit', "Stockkeeping Unit")) { }
                column(Description1_Item; Item.Description)
                {
                    IncludeCaption = false;
                }
                column(No1_Item; Item."No.")
                {
                    IncludeCaption = false;
                }
                column(SKUPrintLoop; Format(SKUPrintLoop))
                {
                    IncludeCaption = false;
                }
                column(ReplenishSys_SKU; Format("Replenishment System", 0, 2))
                {
                    IncludeCaption = false;
                }
                column(VendName1; Vend.Name)
                {
                    IncludeCaption = false;
                }
                column(VendorNo_SKU; "Stockkeeping Unit"."Vendor No.")
                {
                    IncludeCaption = false;
                }
                column(LeadTimeCalc_SKU; "Stockkeeping Unit"."Lead Time Calculation")
                {
                    IncludeCaption = true;
                }
                column(VendItemNo_SKU; "Stockkeeping Unit"."Vendor Item No.")
                {
                    IncludeCaption = true;
                }
                column(LocationName; Location.Name)
                {
                    IncludeCaption = false;
                }
                column(TransFrmCode_SKU; "Stockkeeping Unit"."Transfer-from Code")
                {
                    IncludeCaption = false;
                }
                column(ShippingTime; ShippingTime)
                {
                    IncludeCaption = false;
                }
                column(Inventory1_Item; Item.Inventory)
                {
                    DecimalPlaces = 0 : 5;
                    IncludeCaption = false;
                }
                column(PlannedRelease1; PlannedRelease)
                {
                    DecimalPlaces = 0 : 5;
                    IncludeCaption = false;
                }
                column(PlannedReceipt1; PlannedReceipt)
                {
                    DecimalPlaces = 0 : 5;
                    IncludeCaption = false;
                }
                column(ScheduledReceipt1; ScheduledReceipt)
                {
                    DecimalPlaces = 0 : 5;
                    IncludeCaption = false;
                }
                column(GrossReq139; GrossRequirement)
                {
                    DecimalPlaces = 0 : 5;
                    IncludeCaption = false;
                }
                column(LocCode_SKU; "Stockkeeping Unit"."Location Code")
                {
                    IncludeCaption = true;
                }
                column(VariantCode_SKU; "Stockkeeping Unit"."Variant Code")
                {
                    IncludeCaption = true;
                }
                column(LocationCaption; LocationCaptionLbl)
                {
                    IncludeCaption = false;
                }
                column(ShippingTimeCaption; ShippingTimeCaptionLbl)
                {
                    IncludeCaption = false;
                }
                column(GrossReq12; GrossReq[1])
                {
                }
                column(GrossReq22; GrossReq[2])
                {
                }
                column(GrossReq32; GrossReq[3])
                {
                }
                column(GrossReq42; GrossReq[4])
                {
                }
                column(GrossReq52; GrossReq[5])
                {
                }
                column(GrossReq62; GrossReq[6])
                {
                }
                column(GrossReq72; GrossReq[7])
                {
                }
                column(GrossReq82; GrossReq[8])
                {
                }
                column(SchedReceipt12; SchedReceipt[1])
                {
                }
                column(SchedReceipt22; SchedReceipt[2])
                {
                }
                column(SchedReceipt32; SchedReceipt[3])
                {
                }
                column(SchedReceipt42; SchedReceipt[4])
                {
                }
                column(SchedReceipt52; SchedReceipt[5])
                {
                }
                column(SchedReceipt62; SchedReceipt[6])
                {
                }
                column(SchedReceipt72; SchedReceipt[7])
                {
                }
                column(SchedReceipt82; SchedReceipt[8])
                {
                }
                column(ProjAvBalance12; ProjAvBalance[1])
                {
                }
                column(ProjAvBalance22; ProjAvBalance[2])
                {
                }
                column(ProjAvBalance32; ProjAvBalance[3])
                {
                }
                column(ProjAvBalance42; ProjAvBalance[4])
                {
                }
                column(ProjAvBalance52; ProjAvBalance[5])
                {
                }
                column(ProjAvBalance62; ProjAvBalance[6])
                {
                }
                column(ProjAvBalance72; ProjAvBalance[7])
                {
                }
                column(ProjAvBalance82; ProjAvBalance[8])
                {
                }
                column(PlanReceipt12; PlanReceipt[1])
                {
                }
                column(PlanReceipt22; PlanReceipt[2])
                {
                }
                column(PlanReceipt32; PlanReceipt[3])
                {
                }
                column(PlanReceipt42; PlanReceipt[4])
                {
                }
                column(PlanReceipt52; PlanReceipt[5])
                {
                }
                column(PlanReceipt62; PlanReceipt[6])
                {
                }
                column(PlanReceipt72; PlanReceipt[7])
                {
                }
                column(PlanReceipt82; PlanReceipt[8])
                {
                }
                column(PlanRelease12; PlanRelease[1])
                {
                }
                column(PlanRelease22; PlanRelease[2])
                {
                }
                column(PlanRelease32; PlanRelease[3])
                {
                }
                column(PlanRelease42; PlanRelease[4])
                {
                }
                column(PlanRelease52; PlanRelease[5])
                {
                }
                column(PlanRelease62; PlanRelease[6])
                {
                }
                column(PlanRelease72; PlanRelease[7])
                {
                }
                column(PlanRelease82; PlanRelease[8])
                {
                }
                trigger OnPreDataItem();
                begin
                    if not UseStockkeepingUnit then
                        CurrReport.Break;
                    SKUPrintLoop := 0;
                    ReportForNav.OnPreDataItem('StockkeepingUnit', "Stockkeeping Unit");
                end;

                trigger OnAfterGetRecord();
                begin
                    SKUPrintLoop := SKUPrintLoop + 1;
                    if "Replenishment System" = "replenishment system"::Purchase then begin
                        if not Vend.Get("Vendor No.") then
                            Vend.Init;
                    end else
                        if not TransferRoute.Get("Transfer-from Code", "Location Code") then begin
                            if not Location.Get("Transfer-from Code") then
                                Location.Init;
                        end else begin
                            if ShippingAgentServices.Get(
                                 TransferRoute."Shipping Agent Code", TransferRoute."Shipping Agent Service Code")
                            then
                                ShippingTime := ShippingAgentServices."Shipping Time";
                        end;
                    for i := 1 to 8 do
                        CalcNeed(Item, "Location Code", "Variant Code");
                    // >> P0015 - Mindestbestandsunterschreitung, oder VerfÃ¼gbarkeit=0 prÃ¼fen
                    PrintOK := false;
                    for i := 1 to 8 do begin
                        case Filter of
                            Filter::"alle mit Bewegung":
                                PrintOK := Print;
                            Filter::"alle mit neg.VerfÃ¼gbarkeit.":
                                begin
                                    if not PrintOK then
                                        PrintOK := (ProjAvBalance[i] < 0);
                                end;
                            Filter::"alle mit Mindestbestandsunterschreitung":
                                if not PrintOK then
                                    PrintOK := (ProjAvBalance[i] < "Reorder Point");
                            Filter::"alle mit neg. VerfÃ¼gb. oder Mindestbestandsunterschr.":
                                if not PrintOK then
                                    PrintOK := (ProjAvBalance[i] < "Reorder Point") or
                                          (ProjAvBalance[i] < 0);
                        end;
                    end;
                    Print := PrintOK;
                    // << P0015
                    if not Print then
                        CurrReport.Skip;
                end;

            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Item', Item);
            end;

            trigger OnAfterGetRecord();
            begin
                if not UseStockkeepingUnit then begin
                    if not Vend.Get("Vendor No.") then
                        Vend.Init;
                    Print := false;
                    for i := 1 to 8 do
                        CalcNeed(Item, GetFilter("Location Filter"), GetFilter("Variant Filter"));
                    // >> P0015 Mindestbestandsunterschreitung, oder VerfÃ¼gbarkeit=0 prÃ¼fen
                    PrintOK := false;
                    for i := 1 to 8 do begin
                        case Filter of
                            Filter::"alle mit Bewegung":
                                PrintOK := Print;
                            Filter::"alle mit neg.VerfÃ¼gbarkeit.":
                                begin
                                    if not PrintOK then
                                        PrintOK := (ProjAvBalance[i] < 0);
                                end;
                            Filter::"alle mit Mindestbestandsunterschreitung":
                                if not PrintOK then
                                    PrintOK := (ProjAvBalance[i] < "Reorder Point");
                            Filter::"alle mit neg. VerfÃ¼gb. oder Mindestbestandsunterschr.":
                                if not PrintOK then
                                    PrintOK := (ProjAvBalance[i] < "Reorder Point") or
                                         (ProjAvBalance[i] < 0);
                        end;
                    end;
                    Print := PrintOK;
                    // << P0015
                    if not Print then
                        CurrReport.Skip;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(StartingDate; PeriodStartDate[2])
                    {
                        ApplicationArea = Basic;
                        Caption = 'Starting Date';
                        NotBlank = true;
                    }
                    field(PeriodLength; PeriodLength)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Period Length';
                    }
                    field("Item.""Replenishment System"""; Item."Replenishment System")
                    {
                        ApplicationArea = Basic;
                    }
                    field(UseStockkeepUnit; UseStockkeepingUnit)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Use Stockkeeping Unit';
                    }
                    field("Filter"; Filter)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Filtersetzung';
                        Description = 'P0015';
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            if Format(PeriodLength) = '' then
                Evaluate(PeriodLength, '<1M>');
            if PeriodStartDate[2] = 0D then
                PeriodStartDate[2] := WorkDate;
        end;

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ItemFilter := Item.GetFilters;
        for i := 2 to 7 do
            PeriodStartDate[i + 1] := CalcDate(PeriodLength, PeriodStartDate[i]);
        PeriodStartDate[9] := 99991231D;
        ;
        ReportsForNavPre;
    end;

    var
        Vend: Record Vendor;
        Location: Record Location;
        TransferRoute: Record "Transfer Route";
        ShippingAgentServices: Record "Shipping Agent Services";
        AvailToPromise: Codeunit "Available to Promise";
        ItemFilter: Text;
        SchedReceipt: array[8] of Decimal;
        PlanReceipt: array[8] of Decimal;
        PlanRelease: array[8] of Decimal;
        PeriodStartDate: array[9] of Date;
        ProjAvBalance: array[8] of Decimal;
        GrossReq: array[8] of Decimal;
        PeriodLength: DateFormula;
        Print: Boolean;
        i: Integer;
        GrossRequirement: Decimal;
        ScheduledReceipt: Decimal;
        PlannedReceipt: Decimal;
        PlannedRelease: Decimal;
        UseStockkeepingUnit: Boolean;
        SKUPrintLoop: Integer;
        ShippingTime: DateFormula;
        InventoryAvailabilityPlanCaptionLbl: label 'Inventory - Availability Plan';
        CurrReportPageNoCaptionLbl: label 'Page';
        GrossReq1CaptionLbl: label '...Before';
        GrossReq8CaptionLbl: label 'After...';
        VendorCaptionLbl: label 'Vendor';
        GrossRequirementCaptionLbl: label 'Gross Requirement';
        ScheduledReceiptCaptionLbl: label 'Scheduled Receipt';
        InventoryCaptionLbl: label 'Inventory';
        PlannedReceiptCaptionLbl: label 'Planned Receipt';
        PlannedReleasesCaptionLbl: label 'Planned Releases';
        LocationCaptionLbl: label 'Location';
        ShippingTimeCaptionLbl: label 'Shipping Time';
        "--CC--": Integer;
        "Filter": Option "alle mit Bewegung","alle mit neg.VerfÃ¼gbarkeit.","alle mit Mindestbestandsunterschreitung","alle mit neg. VerfÃ¼gb. oder Mindestbestandsunterschr.";
        PrintOK: Boolean;
        DUE001: label 'Kred.-Artikelnr.';
        DUE002: label 'Beschaffungszeit';
        DUE003: label 'Minimalbestand';
        DUE004: label 'Bestellmenge';

    local procedure CalcNeed(Item: Record Item; LocationFilter: Text[250]; VariantFilter: Text[250])
    begin
        with Item do begin
            SetFilter("Location Filter", LocationFilter);
            SetFilter("Variant Filter", VariantFilter);
            CalcFields(Inventory);
            if Inventory <> 0 then
                Print := true;
            SetRange("Date Filter", PeriodStartDate[i], PeriodStartDate[i + 1] - 1);
            GrossReq[i] :=
              AvailToPromise.CalcGrossRequirement(Item);
            SchedReceipt[i] :=
              AvailToPromise.CalcScheduledReceipt(Item);
            CalcFields(
              "Planning Receipt (Qty.)",
              "Planning Release (Qty.)",
              "Planned Order Receipt (Qty.)",
              "Planned Order Release (Qty.)");
            SchedReceipt[i] := SchedReceipt[i] - "Planned Order Receipt (Qty.)";
            PlanReceipt[i] :=
              "Planning Receipt (Qty.)" +
              "Planned Order Receipt (Qty.)";
            PlanRelease[i] :=
              "Planning Release (Qty.)" +
              "Planned Order Release (Qty.)";
            if i = 1 then begin
                ProjAvBalance[1] :=
                  Inventory -
                  GrossReq[1] + SchedReceipt[1] + PlanReceipt[1]
            end else
                ProjAvBalance[i] :=
                  ProjAvBalance[i - 1] -
                  GrossReq[i] + SchedReceipt[i] + PlanReceipt[i];
            if (GrossReq[i] <> 0) or
               (PlanReceipt[i] <> 0) or
               (SchedReceipt[i] <> 0) or
               (PlanRelease[i] <> 0)
            then
                Print := true;
        end;
    end;

    procedure InitializeRequest(NewPeriodStartDate: Date; NewPeriodLength: DateFormula; NewUseStockkeepingUnit: Boolean)
    begin
        PeriodStartDate[2] := NewPeriodStartDate;
        PeriodLength := NewPeriodLength;
        UseStockkeepingUnit := NewUseStockkeepingUnit;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Item':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$Item$CurrentKey$Text', Item.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
