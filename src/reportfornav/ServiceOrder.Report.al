#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60007 "CCO Service Order"
{
	Caption = 'Service Order';
	WordLayout = './Layouts/CCOServiceOrder.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem("Service Header";"Service Header")
		{
			DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const(Order));
			RequestFilterFields = "No.", "Customer No.";
			column(ReportForNavId_1634; 1634) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_ServiceHeader; ReportForNavWriteDataItem('ServiceHeader',"Service Header")) {}
			column(No_ServHeader; "Service Header"."No.")
			{
			}
			column(WahrTxt; WährTxt)
			{
			}
			column(No_ServHeaderCaption; FieldCaption("No."))
			{
			}
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_5701; 5701) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop',CopyLoop)) {}
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number = const(1));
					column(ReportForNavId_6455; 6455) {} // Autogenerated by ForNav - Do not delete
					column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop',PageLoop)) {}
					column(ShipToAddr6; ShipToAddr[6])
					{
					}
					column(ShipToAddr5; ShipToAddr[5])
					{
					}
					column(ShipToAddr4; ShipToAddr[4])
					{
					}
					column(ShipToAddr3; ShipToAddr[3])
					{
					}
					column(ShipToAddr2; ShipToAddr[2])
					{
					}
					column(ShipToAddr1; ShipToAddr[1])
					{
					}
					column(DUE001; DUE001)
					{
					}
					column(DUE002; DUE002)
					{
					}
					column(DUE019; DUE019)
					{
					}
					column(FirmenAnschr1; FirmenAnschr1)
					{
					}
					column(CompanyInfoPicture; CompanyInfo.Picture)
					{
					}
					column(CompanyInfoPicture3; CompanyInfo."Picture 2")
					{
					}
					column(TODAY_0_7; Format(Today, 0, 7))
					{
					}
					column(DUE005; DUE005)
					{
					}
					column(PODate; "Service Header"."PO Date")
					{
					}
					column(STRSUBSTNO_DUE004_SalesHeaderNo; StrSubstNo(DUE004, "Service Header"."No."))
					{
					}
					column(CompanyInfo2Picture; CompanyInfo2.Picture)
					{
					}
					column(CompanyInfo3Picture; CompanyInfo3.Picture)
					{
					}
					column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
					{
					}
					column(ContractNo_ServHeader; "Service Header"."Contract No.")
					{
					}
					column(OrderTime_ServHeader; "Service Header"."Order Time")
					{
					}
					column(CustAddr6; CustAddr[6])
					{
					}
					column(CustAddr5; CustAddr[5])
					{
					}
					column(CustAddr4; CustAddr[4])
					{
					}
					column(OrderDate_ServHeader; Format("Service Header"."Order Date"))
					{
					}
					column(CustAddr3; CustAddr[3])
					{
					}
					column(Status_ServHeader; "Service Header".Status)
					{
					}
					column(CustAddr2; CustAddr[2])
					{
					}
					column(CustAddr1; CustAddr[1])
					{
					}
					column(CompanyAddr6; CompanyAddr[6])
					{
					}
					column(CompanyAddr5; CompanyAddr[5])
					{
					}
					column(BilltoCustomerNo; "Service Header"."Bill-to Customer No.")
					{
					}
					column(ServiceSalespersonCode; "Service Header"."Service Salesperson Code")
					{
					}
					column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(TEXT005, Format(ReportForNav.PagePlaceHolder)))
					{
					}
					column(ExternalNo; "Service Header"."External Document No.")
					{
					}
					column(FixTerminLieferung; "Service Header"."fix Termin-Lieferung")
					{
					}
					column(CompanyAddr4; CompanyAddr[4])
					{
					}
					column(CompanyAddr3; CompanyAddr[3])
					{
					}
					column(CompanyAddr2; CompanyAddr[2])
					{
					}
					column(CompanyAddr1; CompanyAddr[1])
					{
					}
					column(KundendienstMail; Kundendienst."E-Mail")
					{
					}
					column(KundendienstPhone; Kundendienst."Phone No.")
					{
					}
					column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
					{
					}
					column(CompanyInfoFaxNo; CompanyInfo."Fax No.")
					{
					}
					column(PhoneNo_ServHeader; "Service Header"."Phone No.")
					{
					}
					column(Email_ServHeader; "Service Header"."E-Mail")
					{
					}
					column(Description_ServHeader; "Service Header".Description)
					{
					}
					column(PageCaption; StrSubstNo(Text002, ' '))
					{
					}
					column(OutputNo; OutputNo)
					{
					}
					column(ContractNoCaption; ContractNoCaptionLbl)
					{
					}
					column(ServiceHeaderOrderDateCaption; ServiceHeaderOrderDateCaptionLbl)
					{
					}
					column(InvoicetoCaption; InvoicetoCaptionLbl)
					{
					}
					column(CompanyInfoPhoneNoCaption; CompanyInfoPhoneNoCaptionLbl)
					{
					}
					column(CompanyInfoFaxNoCaption; CompanyInfoFaxNoCaptionLbl)
					{
					}
					column(ServiceHeaderEMailCaption; ServiceHeaderEMailCaptionLbl)
					{
					}
					column(OrderTime_ServHeaderCaption; "Service Header".FieldCaption("Order Time"))
					{
					}
					column(Status_ServHeaderCaption; "Service Header".FieldCaption(Status))
					{
					}
					column(Description_ServHeaderCaption; "Service Header".FieldCaption(Description))
					{
					}
					column(YourRef; "Service Header"."Your Reference")
					{
					}
					dataitem(DimensionLoop1;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = filter(1 ..));
						column(ReportForNavId_7574; 7574) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1',DimensionLoop1)) {}
						column(DimText; DimText)
						{
						}
						column(Number_DimensionLoop1; DimensionLoop1.Number)
						{
						}
						column(HeaderDimensionsCaption; HeaderDimensionsCaptionLbl)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowInternalInfo then
								CurrReport.Break;
							ReportForNav.OnPreDataItem('DimensionLoop1',DimensionLoop1);
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
								if not DimSetEntry1.FindSet then
									CurrReport.Break;
							end else
								if not Continue then
									CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
								OldDimText := DimText;
								if DimText = '' then
									DimText := StrSubstNo('%1 %2', DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code")
								else
									DimText :=
									  StrSubstNo(
										'%1, %2 %3', DimText,
										DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code");
								if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								end;
							until DimSetEntry1.Next = 0;
						end;
						
					}
					dataitem("Service Order Comment";"Service Comment Line")
					{
						DataItemLink = "Table Subtype" = FIELD("Document Type"), "No." = FIELD("No.");
						DataItemLinkReference = "Service Header";
						DataItemTableView = sorting("Table Name", "Table Subtype", "No.", Type, "Table Line No.", "Line No.") where("Table Name" = const("Service Header"), Type = const(General));
						column(ReportForNavId_9034; 9034) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_ServiceOrderComment; ReportForNavWriteDataItem('ServiceOrderComment',"Service Order Comment")) {}
						column(Comment_ServOrderComment; "Service Order Comment".Comment)
						{
						}
						column(TabName_ServOrderComment; "Service Order Comment"."Table Name")
						{
						}
						column(No_ServOrderComment; "Service Order Comment"."No.")
						{
						}
						column(TableLineNo_ServOrderComment; "Service Order Comment"."Table Line No.")
						{
						}
						trigger OnPreDataItem();
						begin
							ReportForNav.OnPreDataItem('ServiceOrderComment',"Service Order Comment");
						end;
					}
					dataitem("Service Item Line";"Service Item Line")
					{
						DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
						DataItemLinkReference = "Service Header";
						DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
						column(ReportForNavId_6416; 6416) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_ServiceItemLine; ReportForNavWriteDataItem('ServiceItemLine',"Service Item Line")) {}
						column(LineNo_ServItemLine; "Service Item Line"."Line No.")
						{
						}
						column(SerialNo_ServItemLine; "Service Item Line"."Serial No.")
						{
						}
						column(Description_ServItemLine; "Service Item Line".Description)
						{
						}
						column(ItemNo_ServItemLineServ; "Service Item Line"."Service Item No.")
						{
						}
						column(ServItemGroupCode_ServItemLine; "Service Item Line"."Service Item Group Code")
						{
						}
						column(Warranty_ServItemLine; Format(Warranty))
						{
						}
						column(LoanerNo_ServItemLine; "Service Item Line"."Loaner No.")
						{
						}
						column(ItemNo; "Service Item Line"."Customer Service ID")
						{
						}
						column(Standort; "Service Item Line"."Location of Service Item")
						{
						}
						column(Gebaude; ServiceItem.Gebäude)
						{
						}
						column(Ebene; ServiceItem.Ebene)
						{
						}
						column(Raum; ServiceItem.Raum)
						{
						}
						column(RepairStatusCode_ServItemLine; "Service Item Line"."Repair Status Code")
						{
						}
						column(ServShelfNo_ServItemLine; "Service Item Line"."Service Shelf No.")
						{
						}
						column(ResponseTime_ServItemLine; Format("Response Time"))
						{
						}
						column(ResponseDate_ServItemLine; Format("Response Date"))
						{
						}
						column(DocumentNo_ServItemLine; "Service Item Line"."Document No.")
						{
						}
						column(ServiceItemLineWarrantyCaption; CaptionClassTranslate(FieldCaption(Warranty)))
						{
						}
						column(ServiceItemLinesCaption; ServiceItemLinesCaptionLbl)
						{
						}
						column(ServiceItemLineResponseDateCaption; ServiceItemLineResponseDateCaptionLbl)
						{
						}
						column(ServiceItemLineResponseTimeCaption; ServiceItemLineResponseTimeCaptionLbl)
						{
						}
						column(GebaudeCpt; GebaudeCpt)
						{
						}
						column(EbeneCpt; EbeneCpt)
						{
						}
						column(RaumCpt; RaumCpt)
						{
						}
						column(Standort_ServItemLineCaption; FieldCaption("Location of Service Item"))
						{
						}
						column(ItemNo_ServItemLineCaption; FieldCaption("Item No."))
						{
						}
						column(SerialNo_ServItemLineCaption; FieldCaption("Serial No."))
						{
						}
						column(Description_ServItemLineCaption; FieldCaption(Description))
						{
						}
						column(ItemNo_ServItemLineServCaption; FieldCaption("Service Item No."))
						{
						}
						column(ServItemGroupCode_ServItemLineCaption; FieldCaption("Service Item Group Code"))
						{
						}
						column(LoanerNo_ServItemLineCaption; FieldCaption("Loaner No."))
						{
						}
						column(RepairStatusCode_ServItemLineCaption; FieldCaption("Repair Status Code"))
						{
						}
						column(ServShelfNo_ServItemLineCaption; FieldCaption("Service Shelf No."))
						{
						}
						dataitem("Fault Comment";"Service Comment Line")
						{
							DataItemLink = "Table Subtype" = FIELD("Document Type"), "No." = FIELD("Document No."), "Table Line No." = FIELD("Line No.");
							DataItemTableView = sorting("Table Name", "Table Subtype", "No.", Type, "Table Line No.", "Line No.") where("Table Name" = const("Service Header"), Type = const(Fault));
							column(ReportForNavId_8902; 8902) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_FaultComment; ReportForNavWriteDataItem('FaultComment',"Fault Comment")) {}
							column(Comment_FaultComment; "Fault Comment".Comment)
							{
							}
							column(TableSubtype_FaultComment; "Fault Comment"."Table Subtype")
							{
							}
							column(Type_FaultComment; "Fault Comment".Type)
							{
							}
							column(LineNo_FaultComment; "Fault Comment"."Line No.")
							{
							}
							column(FaultCommentsCaption; FaultCommentsCaptionLbl)
							{
							}
							trigger OnPreDataItem();
							begin
								ReportForNav.OnPreDataItem('FaultComment',"Fault Comment");
							end;
						}
						dataitem("Resolution Comment";"Service Comment Line")
						{
							DataItemLink = "Table Subtype" = FIELD("Document Type"), "No." = FIELD("Document No."), "Table Line No." = FIELD("Line No.");
							DataItemTableView = sorting("Table Name", "Table Subtype", "No.", Type, "Table Line No.", "Line No.") where("Table Name" = const("Service Header"), Type = const(Resolution));
							column(ReportForNavId_5074; 5074) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_ResolutionComment; ReportForNavWriteDataItem('ResolutionComment',"Resolution Comment")) {}
							column(Comment_ResolutionComment; "Resolution Comment".Comment)
							{
							}
							column(TableSubtype_ResolutionComment; "Resolution Comment"."Table Subtype")
							{
							}
							column(Type_ResolutionComment; "Resolution Comment".Type)
							{
							}
							column(LineNo_ResolutionComment; "Resolution Comment"."Line No.")
							{
							}
							column(ResolutionCommentsCaption; ResolutionCommentsCaptionLbl)
							{
							}
							trigger OnPreDataItem();
							begin
								ReportForNav.OnPreDataItem('ResolutionComment',"Resolution Comment");
							end;
						}
						trigger OnPreDataItem();
						begin
							ReportForNav.OnPreDataItem('ServiceItemLine',"Service Item Line");
						end;
						trigger OnAfterGetRecord();
						begin
							ServiceItem.Get("Service Item Line"."Service Item No.");
						
							if "Service Item Line".Description = 'Schrank' then
								"Service Item Line".Description := 'Sicherheitsschrank';
							if "Service Item Line".Description = 'Abzug' then
								"Service Item Line".Description := 'Laborabzug';
							if "Service Item Line".Description = 'Aufsatz' then
								"Service Item Line".Description := 'Filteraufsatz';
						
						
							"Service Item Line".CalcFields("Service Item Line"."Customer Service ID");
						end;
						
					}
					dataitem("Service Line";"Service Line")
					{
						DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
						DataItemLinkReference = "Service Header";
						DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
						column(ReportForNavId_6560; 6560) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_ServiceLine; ReportForNavWriteDataItem('ServiceLine',"Service Line")) {}
						column(TotalInclVATText; TotalInclVATText)
						{
						}
						column(TotalExclVATText; TotalExclVATText)
						{
						}
						column(VATAmountLineVATAmountText; VATText)
						{
						}
						column(ServLineLineNo; "Service Line"."Line No.")
						{
						}
						column(TotalAmt; TotalAmt)
						{
						}
						column(TotalGrossAmt; TotalGrossAmt)
						{
						}
						column(ServiLineItemNo; "Service Line"."Service Item No.")
						{
						}
						column(ServItemSerialNo_ServLine; "Service Line"."Service Item Serial No.")
						{
						}
						column(PosCpt; PosCpt)
						{
						}
						column(Position; "Service Line".Position)
						{
						}
						column(Type_ServLine; "Service Line".Type)
						{
						}
						column(No_ServLine; "Service Line"."No.")
						{
						}
						column(VariantCode_ServLine; "Service Line"."Variant Code")
						{
						}
						column(Description_ServLine; "Service Line".Description)
						{
						}
						column(Description2_ServLine; "Service Line"."Description 2")
						{
						}
						column(Qty; Qty)
						{
						}
						column(UOM_Code; "Service Line"."Unit of Measure Code")
						{
						}
						column(UnitPrice_ServLine; "Service Line"."Unit Price")
						{
						}
						column(LineDiscount_ServLine; "Service Line"."Line Discount %")
						{
						}
						column(Amt; Amt)
						{
						}
						column(GrossAmt; GrossAmt)
						{
						}
						column(TotalVATAmt; TotalVATAmt)
						{
						}
						column(QtyConsumed_ServLine; "Service Line"."Quantity Consumed")
						{
						}
						column(QtytoConsume_ServLine; "Service Line"."Qty. to Consume")
						{
						}
						column(DocumentNo_ServLine; "Service Line"."Document No.")
						{
						}
						column(QtyCaption; QtyCaptionLbl)
						{
						}
						column(ServiceLinesCaption; ServiceLinesCaptionLbl)
						{
						}
						column(AmountCaption; AmountCaptionLbl)
						{
						}
						column(GrossAmountCaption; GrossAmountCaptionLbl)
						{
						}
						column(TotalCaption; TotalCaptionLbl)
						{
						}
						column(ServItemSerialNo_ServLineCaption; FieldCaption("Service Item Serial No."))
						{
						}
						column(UOM_ServLineCaption; FieldCaption("Unit of Measure"))
						{
						}
						column(Type_ServLineCaption; FieldCaption(Type))
						{
						}
						column(No_ServLineCaption; FieldCaption("No."))
						{
						}
						column(VariantCode_ServLineCaption; FieldCaption("Variant Code"))
						{
						}
						column(Description_ServLineCaption; FieldCaption(Description))
						{
						}
						column(UnitPrice_ServLineCaption; FieldCaption("Unit Price"))
						{
						}
						column(LineDiscount_ServLineCaption; FieldCaption("Line Discount %"))
						{
						}
						column(QtyConsumed_ServLineCaption; FieldCaption("Quantity Consumed"))
						{
						}
						column(QtytoConsume_ServLineCaption; FieldCaption("Qty. to Consume"))
						{
						}
						dataitem(TMLine;Integer)
						{
							DataItemTableView = sorting(Number);
							column(ReportForNavId_5060603; 5060603) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_TMLine; ReportForNavWriteDataItem('TMLine',TMLine)) {}
							column(TMLine_Number; TMLine.Number)
							{
							}
							column(TMLine_Text; TempTMLine.Text)
							{
							}
							column(TMLine_Italic; TempTMLine.Italic)
							{
							}
							column(TMLine_Bold; TempTMLine.Bold)
							{
							}
							column(TMLine_Underline; TempTMLine.Underline)
							{
							}
							column(TMLine_Color; TempTMLine.Color)
							{
							}
							trigger OnPreDataItem();
							begin
								// >> #TMW17.00:A001
								if TestLicPermissionTM then begin
									// >> #TMW17.10.01:T100
									// TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Service Line", "Service Line", CurrReport.OBJECTID(FALSE));
									TMEngine.GetTextSetForReport(TempTMLine, "Service Line"."CCS TM Text Set ID", CurrReport.ObjectId(false));
									// << #TMW17.10.01:T100
									SetRange(Number, 1, TempTMLine.Count);
								end else begin
									CurrReport.Break;
								end;
								// << #TMW17.00:A001
								ReportForNav.OnPreDataItem('TMLine',TMLine);
							end;
							
							trigger OnAfterGetRecord();
							begin
								// >> #TMW17.00:A001
								if Number = 1 then
									TempTMLine.FindFirst
								else
									TempTMLine.Next;
								// << #TMW17.00:A001
							end;
							
						}
						dataitem(DimensionLoop2;Integer)
						{
							DataItemTableView = sorting(Number) where(Number = filter(1 ..));
							column(ReportForNavId_3591; 3591) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2',DimensionLoop2)) {}
							column(DimText2; DimText)
							{
							}
							column(LineDimensionsCaption; LineDimensionsCaptionLbl)
							{
							}
							trigger OnPreDataItem();
							begin
								if not ShowInternalInfo then
									CurrReport.Break;
								DimSetEntry2.SetRange("Dimension Set ID", "Service Line"."Dimension Set ID");
								ReportForNav.OnPreDataItem('DimensionLoop2',DimensionLoop2);
							end;
							
							trigger OnAfterGetRecord();
							begin
								if Number = 1 then begin
									if not DimSetEntry2.FindSet then
										CurrReport.Break;
								end else
									if not Continue then
										CurrReport.Break;
								Clear(DimText);
								Continue := false;
								repeat
									OldDimText := DimText;
									if DimText = '' then
										DimText := StrSubstNo('%1 %2', DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code")
									else
										DimText :=
										  StrSubstNo(
											'%1, %2 %3', DimText,
											DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code");
									if StrLen(DimText) > MaxStrLen(OldDimText) then begin
										DimText := OldDimText;
										Continue := true;
										exit;
									end;
								until DimSetEntry2.Next = 0;
							end;
							
						}
						trigger OnPreDataItem();
						begin
							TotalAmt := 0;
							TotalGrossAmt := 0;
							ReportForNav.OnPreDataItem('ServiceLine',"Service Line");
						end;
						
						trigger OnAfterGetRecord();
						begin
							// Ursprüngliche Berechnung im Report - FU 10.01.2019
							/*IF ShowQty = ShowQty::Quantity THEN BEGIN
													  Qty := Quantity;
													  Amt := "Line Amount";
													  GrossAmt := "Amount Including VAT";
													END ELSE BEGIN
													  IF "Quantity Invoiced" = 0 THEN
														CurrReport.SKIP;
													  Qty := "Quantity Invoiced";
													  Amt := ROUND((Qty * "Unit Price") * (1 - "Line Discount %" / 100));
													  GrossAmt := (1 + "VAT %" / 100) * Amt;
													END;
													TotalAmt += Amt;
													TotalGrossAmt += GrossAmt;
													TotalVATAmt += GrossAmt - Amt;*/
						
							// Berechnung aus Report135 übernommen. - FU 10.01.2019
							Qty := Quantity;
							Amt := "Line Amount";
						
							TotalAmt += Amt;					   //Total Netto
							GrossAmt := (1 + "VAT %" / 100) * Amt; //MWST berechnen + Netto
							TotalGrossAmt += GrossAmt;		   //Total Brutto
							TotalVATAmt += GrossAmt - Amt;	   //Total MWST = Brutto - Netto
						
						end;
						
					}
					dataitem(Shipto;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = const(1));
						column(ReportForNavId_6218; 6218) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_Shipto; ReportForNavWriteDataItem('Shipto',Shipto)) {}
						column(ShiptoAddressCaption; ShiptoAddressCaptionLbl)
						{
						}
						column(DUE016; DUE016)
						{
						}
						column(DUE021; DUE021)
						{
						}
						column(DUE022; DUE022)
						{
						}
						column(Description_ShipmentMethod; ShipmentMethod.Description)
						{
						}
						column(Description_PaymentTerms; PaymentTerms.Description)
						{
						}
						trigger OnPreDataItem();
						begin
							if not ShowShippingAddr then
								CurrReport.Break;
							ReportForNav.OnPreDataItem('Shipto',Shipto);
						end;
						
					}
					trigger OnPreDataItem();
					begin
						ReportForNav.OnPreDataItem('PageLoop',PageLoop);
					end;
				}
				trigger OnPreDataItem();
				begin
					NoOfLoops := Abs(NoOfCopies) + 1;
					if NoOfLoops <= 0 then
						NoOfLoops := 1;
					CopyText := '';
					SetRange(Number, 1, NoOfLoops);
					OutputNo := 1;
					ReportForNav.OnPreDataItem('CopyLoop',CopyLoop);
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number > 1 then begin
						CopyText := Text000;
						OutputNo += 1;
					end;
				
				end;
				
			}
			trigger OnPreDataItem();
			begin
				ReportForNav.OnPreDataItem('ServiceHeader',"Service Header");
			end;
			trigger OnAfterGetRecord();
			begin
				CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
				DimSetEntry1.SetRange("Dimension Set ID", "Dimension Set ID");
				if RespCenter.Get("Responsibility Center") then begin
					FirmenAnschr1 := RespCenter.Name + ' | ' + RespCenter."Address 2" + ' | ' + RespCenter."Post Code" + ' ' + RespCenter.City;
					FormatAddr.RespCenter(CompanyAddr, RespCenter);
					CompanyInfo."Phone No." := RespCenter."Phone No.";
					CompanyInfo."Fax No." := RespCenter."Fax No.";
				end else
					FormatAddr.Company(CompanyAddr, CompanyInfo);
				FormatAddr.ServiceOrderSellto(CustAddr, "Service Header");
				ShowShippingAddr := true;
				if ShowShippingAddr then
					FormatAddr.ServiceOrderShipto(ShipToAddr, "Service Header");
				if "Service Header"."Service Salesperson Code" <> '' then
					if not Kundendienst.Get("Service Header"."Service Salesperson Code") then Kundendienst.Init;
				DebitorR.Get("Service Header"."Customer No.");
				if "Payment Terms Code" = '' then
					PaymentTerms.Init
				else
					PaymentTerms.Get("Payment Terms Code");
				if "Shipment Method Code" = '' then
					ShipmentMethod.Init
				else
					ShipmentMethod.Get("Shipment Method Code");
				if "Service Header"."Currency Code" = '' then begin
					GLSetup.Get;
					GLSetup.TestField("LCY Code");
					WährTxt := GLSetup."LCY Code";
				end else begin
					WährTxt := "Service Header"."Currency Code";
				end;
			
				if "Currency Code" = '' then begin
					GLSetup.TestField("LCY Code");
					TotalText := StrSubstNo(Text010, GLSetup."LCY Code");
					TotalInclVATText := StrSubstNo(Text012, GLSetup."LCY Code");
					TotalExclVATText := StrSubstNo(Text011, GLSetup."LCY Code");
				end else begin
					TotalText := StrSubstNo(Text010, "Currency Code");
					TotalInclVATText := StrSubstNo(Text012, "Currency Code");
					TotalExclVATText := StrSubstNo(Text011, "Currency Code");
				end;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies; NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ShowServiceItems; ShowServiceItems)
					{
						ApplicationArea = Basic;
						Caption = 'Zeige Serviceartikel';
					}
					field(ShowInternalInfo; ShowInternalInfo)
					{
						ApplicationArea = Basic;
						Caption = 'Show Internal Information';
					}
					field(ShowQty; ShowQty)
					{
						ApplicationArea = Basic;
						Caption = 'Amounts Based on';
						OptionCaption = 'Quantity,Quantity Invoiced';
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		CompanyInfo.Get;
		CompanyInfo.CalcFields(Picture, "Picture 2");
		ServiceSetup.Get;
		case ServiceSetup."Logo Position on Documents" of
			ServiceSetup."logo position on documents"::"No Logo":
				;
			ServiceSetup."logo position on documents"::Left:
				begin
					CompanyInfo3.Get;
					CompanyInfo3.CalcFields(Picture);
				end;
			ServiceSetup."logo position on documents"::Center:
				begin
					CompanyInfo1.Get;
					CompanyInfo1.CalcFields(Picture);
				end;
			ServiceSetup."logo position on documents"::Right:
				begin
					CompanyInfo2.Get;
					CompanyInfo2.CalcFields(Picture);
				end;
		end;
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Text000: label 'COPY';
		Text001: label 'Service Order %1';
		Text002: label 'Page %1';
		GLSetup: Record "General Ledger Setup";
		TotalText: Text[50];
		TotalExclVATText: Text[50];
		TotalInclVATText: Text[50];
		"WährTxt": Text[10];
		PaymentTerms: Record "Payment Terms";
		ShipmentMethod: Record "Shipment Method";
		ServiceItem: Record "Service Item";
		CompanyInfo: Record "Company Information";
		CompanyInfo1: Record "Company Information";
		CompanyInfo2: Record "Company Information";
		CompanyInfo3: Record "Company Information";
		ServiceSetup: Record "Service Mgt. Setup";
		RespCenter: Record "Responsibility Center";
		Language2: Codeunit Language;
		DimSetEntry1: Record "Dimension Set Entry";
		DimSetEntry2: Record "Dimension Set Entry";
		FormatAddr: Codeunit "Format Address";
		NoOfCopies: Integer;
		NoOfLoops: Integer;
		OutputNo: Integer;
		ShowInternalInfo: Boolean;
		Continue: Boolean;
		ShowShippingAddr: Boolean;
		CustAddr: array[8] of Text[50];
		ShipToAddr: array[8] of Text[50];
		CompanyAddr: array[8] of Text[50];
		DebitorR: Record Customer;
		CopyText: Text[30];
		DimText: Text[120];
		OldDimText: Text[120];
		Qty: Decimal;
		Amt: Decimal;
		ShowQty: Option Quantity,"Quantity Invoiced";
		GrossAmt: Decimal;
		TotalAmt: Decimal;
		TotalVATAmt: Decimal;
		TotalGrossAmt: Decimal;
		ContractNoCaptionLbl: label 'Contract No.';
		ServiceHeaderOrderDateCaptionLbl: label 'Order Date';
		InvoicetoCaptionLbl: label 'Invoice to';
		CompanyInfoPhoneNoCaptionLbl: label 'Phone No.';
		CompanyInfoFaxNoCaptionLbl: label 'Fax No.';
		ServiceHeaderEMailCaptionLbl: label 'E-Mail';
		HeaderDimensionsCaptionLbl: label 'Header Dimensions';
		ServiceItemLinesCaptionLbl: label 'Service Item Lines';
		ServiceItemLineResponseDateCaptionLbl: label 'Response Date';
		ServiceItemLineResponseTimeCaptionLbl: label 'Response Time';
		FaultCommentsCaptionLbl: label 'Fault Comments';
		ResolutionCommentsCaptionLbl: label 'Resolution Comments';
		QtyCaptionLbl: label 'Quantity';
		ServiceLinesCaptionLbl: label 'Service Lines';
		AmountCaptionLbl: label 'Amount';
		GrossAmountCaptionLbl: label 'Gross Amount';
		TotalCaptionLbl: label 'Total';
		LineDimensionsCaptionLbl: label 'Line Dimensions';
		ShiptoAddressCaptionLbl: label 'Ship-to Address';
		"--- TM glob. Vars. ---": Integer;
		LicPermission: Record "License Permission";
		TMEngine: Codeunit "CCS TM Engine";
		TempTMLine: Record "CCS TM Line Document" temporary;
		FirmenAnschr1: Text[120];
		SalesPurchPerson: Record "Salesperson/Purchaser";
		Kundendienst: Record "Salesperson/Purchaser";
		DUE001: label 'Delivery Address:';
		DUE019: label 'Your Contact:';
		DUE004: label 'Order Confirmation %1';
		DUE005: label 'Always mention.';
		GebaudeCpt: label 'Gebäude';
		EbeneCpt: label 'Ebene';
		RaumCpt: label 'Raum';
		DUE002: label 'Für Ihre Bestellung danken wir und bestätigen zu unseren bekannten Bedingungen.';
		DUE016: label 'The value added tax current at the time of the delivery applies.';
		DUE021: label 'Our general terms and conditions of sale apply.';
		DUE022: label 'You will find our general terms and conditions following www.dueperthal.com or receive them by e-mail upon request';
		TEXT005: label 'Page %1';
		Text010: label 'Total %1';
		Text012: label 'Total %1 incl. VAT';
		Text011: label 'Total %1 excl. VAT';
		VATText: label 'MwSt.-Total 19%';
		PosCpt: label 'Pos.';
		ShowServiceItems: Boolean;

	procedure InitializeRequest(ShowInternalInfoFrom: Boolean; ShowQtyFrom: Option)
	begin
		ShowInternalInfo := ShowInternalInfoFrom;
		ShowQty := ShowQtyFrom;
	end;

	procedure "--- Text Module ---"()
	begin
	end;

	procedure TestLicPermissionTM(): Boolean
	begin
		// >> #TMW17.00:A001
		if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
		   (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
		then begin
			LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
		end;
		if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
			exit(true);
		end else begin
			exit(false);
		end;
		// << #TMW17.00:A001
	end;

	local procedure OnPreSectionPageLoop_Header3(var PageLoop : Record Integer);
	begin
		with PageLoop do begin
			ReportForNavSetShowOutput(CurrReport.PageNo = 1);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceItemLine_Header31(var "Service Item Line" : Record "Service Item Line");
	begin
		with "Service Item Line" do begin
			ReportForNavSetShowOutput(ShowServiceItems);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceItemLine_Body34(var "Service Item Line" : Record "Service Item Line");
	begin
		with "Service Item Line" do begin
			ReportForNavSetShowOutput(ShowServiceItems);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceLine_Body40(var "Service Line" : Record "Service Line");
	begin
		with "Service Line" do begin
			ReportForNavSetShowOutput(("Service Line".Type = "Service Line".Type::Resource) and ("Service Line"."Line Amount" <> 0));
		end;
	end;
	local procedure OnPreSectionServiceLine_Body2(var "Service Line" : Record "Service Line");
	begin
		with "Service Line" do begin
			ReportForNavSetShowOutput(("Service Line".Type = "Service Line".Type::Item) and ("Service Line"."Line Amount" <> 0));
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceLine_Body4(var "Service Line" : Record "Service Line");
	begin
		with "Service Line" do begin
			ReportForNavSetShowOutput(("Service Line".Type <> "Service Line".Type::" ")
								  and ("Service Line"."Line Amount" = 0));
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionServiceLine_Body1(var "Service Line" : Record "Service Line");
	begin
		with "Service Line" do begin
			ReportForNavSetShowOutput("Service Line".Type = "Service Line".Type::" ");
		end;
	end;
	local procedure OnPreSectionServiceLine_Body3(var "Service Line" : Record "Service Line");
	begin
		with "Service Line" do begin
			ReportForNavSetShowOutput("Service Line"."Description 2" <> '');
		end;// Autogenerated by ForNav;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'ServiceHeader':
				begin
					jsonObject.Add('CurrReport$Language$Integer',CurrReport.Language);
				end;
			'PageLoop':
				begin
						ReportForNavShowOutput := true; OnPreSectionPageLoop_Header3(PageLoop); jsonObject.Add('$Header3$Pre',ReportForNavShowOutput);
				end;
			'ServiceItemLine':
				begin
					ReportForNavShowOutput := true; OnPreSectionServiceItemLine_Body34("Service Item Line"); jsonObject.Add('$Body34$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionServiceItemLine_Header31("Service Item Line"); jsonObject.Add('$Header31$Pre',ReportForNavShowOutput);
				end;
			'ServiceLine':
				begin
					ReportForNavShowOutput := true; OnPreSectionServiceLine_Body40("Service Line"); jsonObject.Add('$Body40$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceLine_Body2("Service Line"); jsonObject.Add('$Body2$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceLine_Body4("Service Line"); jsonObject.Add('$Body4$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceLine_Body1("Service Line"); jsonObject.Add('$Body1$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionServiceLine_Body3("Service Line"); jsonObject.Add('$Body3$Pre',ReportForNavShowOutput);
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
