#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60013 "CCO Sales Performainvoice"
{
    Caption = 'Sales Performainvoice';
    WordLayout = './Layouts/CCOSalesPerformainvoice.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Sales Header"; "Sales Header")
        {
            DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const(Order));
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Sales Order';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_SalesHeader; ReportForNavWriteDataItem('SalesHeader', "Sales Header")) { }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 2")
                    {
                        IncludeCaption = false;
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(E_Mail_BenutzerER; Kundendienst."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(AusgAngKalkStatus; AusgAngKalkStatus)
                    {
                        IncludeCaption = false;
                    }
                    column(AusgKalkStatus; AusgKalkStatus)
                    {
                        IncludeCaption = false;
                    }
                    column(LieferTerminK; LieferTerminK)
                    {
                        IncludeCaption = false;
                    }
                    column(Sell_toCustomerNo_SalesHeader; "Sales Header"."Sell-to Customer No.")
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_SalesHeader; "Sales Header"."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
                    {
                        IncludeCaption = false;
                    }
                    column(SalesHeaderOrderDate_0_7; Format("Sales Header"."Order Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(ExternalDocumentNo_SalesHeader; "Sales Header"."External Document No.")
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Telefonnr_BenutzerER; Kundendienst."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; Kundendienst.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(EMail_SalesPurchPerson; SalesPurchPerson."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_SalesPurchPerson; SalesPurchPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_SalesPurchPerson; SalesPurchPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE001; DUE001)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr8; CustAddr[8])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr7; CustAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_DUE004_SalesHeaderNo; StrSubstNo(DUE004, "Sales Header"."No."))
                    {
                        IncludeCaption = false;
                    }
                    column(DUE005; DUE005)
                    {
                        IncludeCaption = false;
                    }
                    column(DUE024; StrSubstNo(DUE024, "Sales Header"."No."))
                    {
                    }
                    column(DUE020; DUE020)
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005, Format(ReportForNav.PagePlaceHolder)))
                    {
                        IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Sales Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_74; 74) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not DocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 %2', DocDim1."Dimension Code", DocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        DocDim1."Dimension Code", DocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (DocDim1.Next = 0);
                        end;

                    }
                    dataitem("Sales Line"; "Sales Line")
                    {
                        DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
                        DataItemLinkReference = "Sales Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
                        column(ReportForNavId_76; 76) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesLine; ReportForNavWriteDataItem('SalesLine', "Sales Line")) { }
                        trigger OnPreDataItem();
                        begin
                            CurrReport.Break;
                            ReportForNav.OnPreDataItem('SalesLine', "Sales Line");
                        end;

                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_77; 77) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem(RoundLoop; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_79; 79) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_RoundLoop; ReportForNavWriteDataItem('RoundLoop', RoundLoop)) { }
                        column(AusgUbSchrEinzelpreis_PE; "AusgÜbSchrEinzelpreis/P.E.")
                        {
                            IncludeCaption = false;
                        }
                        column(WahrTxt; WährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(SalesLineLineAmount_SalesLineInvDiscountAmount_GesKorrSumme; SalesLine."Line Amount" + "Sales Line"."Inv. Discount Amount" - GesKorrSumme)
                        {
                            AutoFormatExpression = "Sales Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(ZusammenzahlungsText; ZusammenzählungsText)
                        {
                            IncludeCaption = false;
                        }
                        column(PosZusammenzahlungsSumme1; PosZusammenzählungsSumme[1])
                        {
                            IncludeCaption = false;
                        }
                        column(PosZusammenzahlungsSumme2; PosZusammenzählungsSumme[2])
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_ALTERNATIV_Pct1_ZusammenzahlungsText; StrSubstNo('ALTERNATIV - %1', ZusammenzählungsText))
                        {
                            IncludeCaption = false;
                        }
                        column(PosZusammenzahlungsSumme3; PosZusammenzählungsSumme[3])
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_OPTIONAL_Pct1_ZusammenzahlungsText; StrSubstNo('OPTIONAL - %1', ZusammenzählungsText))
                        {
                            IncludeCaption = false;
                        }
                        column(SalesLineAlternPosition; "Sales Line"."CCS PR Special Position")
                        {
                            IncludeCaption = false;
                        }
                        column(Position_SalesLine; "Sales Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_SalesLine; SalesLine.Description)
                        {
                            IncludeCaption = false;
                        }
                        column(BelegZwNetto; BelegZwNetto)
                        {
                            IncludeCaption = false;
                        }
                        column(LieferTerminZ; LieferTerminZ)
                        {
                            IncludeCaption = false;
                        }
                        column(No_SalesLine; "Sales Line"."No.")
                        {
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_SalesLine; "Sales Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_SalesLine; "Sales Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_SalesLine4; "Sales Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgWahrTxt; AusgWährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgVKPreis; AusgVKPreis)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgBetragRechnsUndRabBetrag; AusgBetragRechnsUndRabBetrag)
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE010_SalesLineDebArtikelnr; "Sales Header"."Sell-to Customer No.")
                        {
                            IncludeCaption = false;
                        }
                        column(WorkTypeCode_SalesLine; "Sales Line"."Work Type Code")
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_SalesLine; "Sales Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE011_FORMAT_SalesLineLineDiscountPct_; StrSubstNo(DUE011, Format("Sales Line"."Line Discount %")))
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE011_SalesHeaderInvoiceDiscCode; StrSubstNo(DUE011, "Sales Header"."Invoice Disc. Code"))
                        {
                            IncludeCaption = false;
                        }
                        column(InvDiscountAmount_SalesLine; -SalesLine."Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Sales Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VerpackKost; VerpackKost)
                        {
                            IncludeCaption = false;
                        }
                        column(FrachtKost; FrachtKost)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE015; DUE015)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE014; DUE014)
                        {
                            IncludeCaption = false;
                        }
                        column(SalesLineLineAmount_SalesLineInvDiscountAmount_VATAmount; SalesLine."Line Amount" - SalesLine."Inv. Discount Amount" + VATAmount)
                        {
                            AutoFormatExpression = "Sales Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATAmount; VATAmount)
                        {
                            AutoFormatExpression = "Sales Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(SalesLineLineAmount_SalesLineInvDiscountAmount; SalesLine."Line Amount" - SalesLine."Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Sales Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalInclVATText; TotalInclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalExclVATText; TotalExclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
                        {
                            IncludeCaption = false;
                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_117; 117) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText3; DimText)
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                // DocDim2.SETRANGE("Table ID",DATABASE::"Sales Line");
                                // DocDim2.SETRANGE("Document Type","Sales Line"."Document Type");
                                // DocDim2.SETRANGE("Document No.","Sales Line"."Document No.");
                                // DocDim2.SETRANGE("Line No.","Sales Line"."Line No.");
                                DocDim2.SetRange("Dimension Set ID", "Sales Line"."Dimension Set ID");

                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not DocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 %2', DocDim2."Dimension Code", DocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            DocDim2."Dimension Code", DocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (DocDim2.Next = 0);
                            end;

                        }
                        dataitem(LetztePosZusammenzähl; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = const(1));
                            column(ReportForNavId_120; 120) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_LetztePosZusammenzahl; ReportForNavWriteDataItem('LetztePosZusammenzahl', LetztePosZusammenzähl)) { }
                            column(LetzterZusammenzahlungsText; LetzterZusammenzählungsText)
                            {
                                IncludeCaption = false;
                            }
                            column(LetztePosZusammenzahlungsSumme1; LetztePosZusammenzählungsSumme[1])
                            {
                                IncludeCaption = false;
                            }
                            column(WahrTxt14; WährTxt)
                            {
                                IncludeCaption = false;
                            }
                            column(LetztePosZusammenzahlungsSumme2; LetztePosZusammenzählungsSumme[2])
                            {
                                IncludeCaption = false;
                            }
                            column(STRSUBSTNO_DUE012_LetzterZusammenzahlungsText; StrSubstNo(DUE012, LetzterZusammenzählungsText))
                            {
                                IncludeCaption = false;
                            }
                            column(LetztePosZusammenzahlungsSumme3; LetztePosZusammenzählungsSumme[3])
                            {
                                IncludeCaption = false;
                            }
                            column(STRSUBSTNO_DUE013_LetzterZusammenzahlungsText; StrSubstNo(DUE013, LetzterZusammenzählungsText))
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                ReportForNav.OnPreDataItem('LetztePosZusammenzahl', LetztePosZusammenzähl);
                            end;
                        }
                        trigger OnPreDataItem();
                        begin
                            MoreLines := SalesLine.Find('+');
                            while MoreLines and (SalesLine.Description = '') and (SalesLine."Description 2" = '') and
                                  (SalesLine."No." = '') and (SalesLine.Quantity = 0) and
                                  (SalesLine.Amount = 0)
                            do
                                MoreLines := SalesLine.Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SalesLine.SetRange("Line No.", 0, SalesLine."Line No.");
                            SetRange(Number, 1, SalesLine.Count);
                            VerpackKost := 0;
                            FrachtKost := 0;
                            //c/gw/160502: - Stichwort: PositonsZusammenzählung
                            if "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" then
                                MarkZeilenDuplikatErstellen(SalesLine); // siehe Komentar dort besonders betreff Fracht-Artikel
                            GesKorrSumme := 0;
                            ReportForNav.OnPreDataItem('RoundLoop', RoundLoop);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then
                                SalesLine.Find('-')
                            else
                                SalesLine.Next;
                            "Sales Line" := SalesLine;
                            if not "Sales Header"."Prices Including VAT" and
                               (SalesLine."VAT Calculation Type" = SalesLine."vat calculation type"::"Full VAT")
                            then
                                SalesLine."Line Amount" := 0;
                            if (SalesLine.Type = SalesLine.Type::"G/L Account") and (not ShowInternalInfo) then
                                "Sales Line"."No." := '';
                            FrachtJN := false;
                            if SalesLine."No." <> '' then
                                case SalesLine."No." of
                                    SalesSetup."Artikel Fracht1":
                                        begin
                                            FrachtKost := FrachtKost + SalesLine.Amount;
                                            FrachtJN := true;
                                            GesKorrSumme := GesKorrSumme + SalesLine.Amount + SalesLine."Inv. Discount Amount";
                                        end;
                                    SalesSetup."Artikel Fracht2":
                                        begin
                                            FrachtKost := FrachtKost + SalesLine.Amount;
                                            FrachtJN := true;
                                            GesKorrSumme := GesKorrSumme + SalesLine.Amount + SalesLine."Inv. Discount Amount";
                                        end;
                                    SalesSetup."Artikel Verpackung":
                                        begin
                                            VerpackKost := VerpackKost + SalesLine.Amount;
                                            FrachtJN := true;
                                            GesKorrSumme := GesKorrSumme + SalesLine.Amount + SalesLine."Inv. Discount Amount";
                                        end;
                                end;
                            BelegZwNetto := BelegZwNetto + SalesLine.Amount + SalesLine."Inv. Discount Amount";
                            LieferTerminZeile(SalesLine);
                            //c/gw/150502: - Stichwort: PositonsZusammenzählung
                            if "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" then
                                ErmittlungPosZusammenzählung(SalesLine);
                        end;

                        trigger OnPostDataItem();
                        begin
                            SalesLine.DeleteAll;
                            //c/gw/160502: - Stichwort: PositonsZusammenzählung
                            if "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" then
                                ZeilenDuplikatRecSet.ClearMarks;
                        end;

                    }
                    dataitem(VATCounterLCY; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_137; 137) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounterLCY; ReportForNavWriteDataItem('VATCounterLCY', VATCounterLCY)) { }
                        trigger OnPreDataItem();
                        begin
                            CurrReport.Break;
                            if (not GLSetup."Print VAT specification in LCY") or
                               ("Sales Header"."Currency Code" = '') or
                               (VATAmountLine.GetTotalVATAmount = 0) then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            if GLSetup."LCY Code" = '' then
                                VALSpecLCYHeader := Text008 + Text009
                            else
                                VALSpecLCYHeader := Text008 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Sales Header"."Order Date", "Sales Header"."Currency Code", 1);
                            VALExchRate := StrSubstNo(Text010, CurrExchRate."Relational Exch. Rate Amount", CurrExchRate."Exchange Rate Amount");
                            ReportForNav.OnPreDataItem('VATCounterLCY', VATCounterLCY);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                               "Sales Header"."Order Date", "Sales Header"."Currency Code",
                                               VATAmountLine."VAT Base", "Sales Header"."Currency Factor"));
                            VALVATAmountLCY := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                 "Sales Header"."Order Date", "Sales Header"."Currency Code",
                                                 VATAmountLine."VAT Amount", "Sales Header"."Currency Factor"));
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_138; 138) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        column(Description_ShipmentMethod; ShipmentMethod.Description)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_PaymentTerms; PaymentTerms.Description)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE016; DUE016)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE021; DUE021)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE019; DUE019)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE023; DUE023)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE022; DUE022)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_147; 147) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        CompanyInfo.CalcFields(Picture);//, Logo);
                        CompanyInfo.CalcFields("Picture 2");
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;

                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                var
                    SalesPost: Codeunit "Sales-Post";
                begin
                    Clear(SalesLine);
                    Clear(SalesPost);
                    SalesLine.DeleteAll;
                    VATAmountLine.DeleteAll;
                    SalesPost.GetSalesLines("Sales Header", SalesLine, 0);
                    SalesLine.CalcVATAmountLines(0, "Sales Header", SalesLine, VATAmountLine);
                    SalesLine.UpdateVATOnLines(0, "Sales Header", SalesLine, VATAmountLine);
                    VATAmount := VATAmountLine.GetTotalVATAmount;
                    VATBaseAmount := VATAmountLine.GetTotalVATBase;
                    VATDiscountAmount :=
                      VATAmountLine.GetTotalVATDiscount("Sales Header"."Currency Code", "Sales Header"."Prices Including VAT");
                    TotalAmountInclVAT := VATAmountLine.GetTotalAmountInclVAT;
                    if Number > 1 then
                        CopyText := Text003;

                    ClearPosZusammenzählung;
                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        SalesCountPrinted.Run("Sales Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                NoOfRecords := Count;
                EMailTxt := '';
                wwwTxt := '';
                if MitLogo then;
                ReportForNav.OnPreDataItem('SalesHeader', "Sales Header");
            end;

            trigger OnAfterGetRecord();
            var
                "Sell-to Country": Text[50];
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //DUE
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := RespCenter.Name + '|' + RespCenter.Address + '|' + RespCenter."Post Code" + ' ' + RespCenter.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter."Address 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + '|' + CompanyInfo."Address 2" + '|' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get(Creationuser) then
                    Clear(BenutzerER);
                DebitorR.Get("Sales Header"."Sell-to Customer No.");
                //c/gw/160502: - Stichwort: PositonsZusammenzählung
                if not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" then
                    "AusgÜbSchrEinzelpreis/P.E." := DUE007
                else
                    "AusgÜbSchrEinzelpreis/P.E." := '';
                LieferTerminK := "Sales Header".Kundenliefertermin;
                LieferTerminKopf();
                if "Sales Header"."Currency Code" = '' then begin
                    GLSetup.Get;
                    GLSetup.TestField("LCY Code");
                    WährTxt := GLSetup."LCY Code";
                end else begin
                    WährTxt := "Sales Header"."Currency Code";
                end;
                CompanyInfo.Get;
                //DUE Ende
                // DocDim1.SETRANGE("Table ID",DATABASE::"Sales Header");
                // DocDim1.SETRANGE("Document Type","Sales Header"."Document Type");
                // DocDim1.SETRANGE("Document No.","Sales Header"."No.");
                DocDim1.SetRange("Dimension Set ID", "Sales Header"."Dimension Set ID");

                if "Salesperson Code" = '' then begin
                    SalesPurchPerson.Init;
                    SalesPersonText := '';
                end else begin
                    SalesPurchPerson.Get("Salesperson Code");
                    SalesPersonText := Text000;
                    if BenutzerER."E-Mail" = '' then
                        BenutzerER."E-Mail" := SalesPurchPerson."E-Mail";
                    //Düperthal
                    /* IF SalesPurchPerson.Kundendienstverantwortlicher<>'' THEN
					   IF Kundendienst.GET(SalesPurchPerson.Kundendienstverantwortlicher) THEN BEGIN
						 SalesPurchPerson.Name := Kundendienst.Name;
						 SalesPurchPerson."Phone No." := Kundendienst."Phone No.";
						 SalesPurchPerson."E-Mail" := Kundendienst."E-Mail";
					   END;*/
                    if "Sales Header"."Salesperson Code 2" <> '' then
                        if not Kundendienst.Get("Sales Header"."Salesperson Code 2") then Kundendienst.Init;
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text006, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text001, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text002, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text006, "Currency Code");
                end;
                FormatAddr.SalesHeaderBillTo(CustAddr, "Sales Header");
                FormatAddr.SalesHeaderSellTo(CustAddr, "Sales Header");
                if "Payment Terms Code" = '' then
                    PaymentTerms.Init
                else
                    PaymentTerms.Get("Payment Terms Code");
                if "Shipment Method Code" = '' then
                    ShipmentMethod.Init
                else
                    ShipmentMethod.Get("Shipment Method Code");
                if Country.Get("Sales Header"."Sell-to Country/Region Code") then
                    "Sell-to Country" := Country.Name;
                FormatAddr.SalesHeaderShipTo(ShipToAddr, CustAddr, "Sales Header");
                ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
                for i := 1 to ArrayLen(ShipToAddr) do
                    if (ShipToAddr[i] <> CustAddr[i]) and (ShipToAddr[i] <> '') and (ShipToAddr[i] <> "Sell-to Country") then
                        ShowShippingAddr := true;
                if not CurrReport.Preview then begin
                    if ArchiveDocument then
                        ArchiveManagement.StoreSalesDocument("Sales Header", LogInteraction);
                    if LogInteraction then begin
                        CalcFields("No. of Archived Versions");
                        if "Bill-to Contact No." <> '' then
                            SegManagement.LogDocument(
                              1, "No.", "Doc. No. Occurrence",
                              "No. of Archived Versions", Database::Contact, "Bill-to Contact No.",
                              "Salesperson Code", "Campaign No.", "Posting Description", "Opportunity No.")
                        else
                            SegManagement.LogDocument(
                              1, "No.", "Doc. No. Occurrence",
                              "No. of Archived Versions", Database::Customer, "Bill-to Customer No.",
                              "Salesperson Code", "Campaign No.", "Posting Description", "Opportunity No.");
                    end;
                end;
                "Sales Header".Mark(true);

            end;

            trigger OnPostDataItem();
            var
                ToDo: Record "To-do";
            begin
                "Sales Header".MarkedOnly := true;
                Commit;
                CurrReport.Language := GlobalLanguage;
                if "Sales Header".Find('-') and ToDo.WritePermission then;
                // IF NOT CurrReport.PREVIEW AND (NoOfRecords = 1) AND GUIALLOWED THEN
                // IF CONFIRM(Text007) THEN
                //  "Sales Header".CreateTodo;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(ArchiveDocument; ArchiveDocument)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Archive Document';

                        trigger OnValidate()
                        begin
                            if not ArchiveDocument then
                                LogInteraction := false;
                        end;
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';

                        trigger OnValidate()
                        begin
                            if LogInteraction then
                                ArchiveDocument := true;
                        end;
                    }
                }
            }
        }

        trigger OnOpenPage()
        var
            DocumentType: Enum "Interaction Log Entry Document Type";
        begin
            ArchiveDocument := ArchiveManagement.SalesDocArchiveGranule;
            LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Qte.") <> '';

        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        CompanyInfo.Get;
        SalesSetup.Get;
        CompanyInfo.CalcFields(Picture);//, Logo);
        CompanyInfo.CalcFields("Picture 2");
        ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Salesperson';
        Text001: label 'Total %1';
        Text002: label 'Total %1 incl. VAT';
        Text003: label 'COPY';
        Text004: label 'Sales - Quote %1';
        Text005: label 'Page %1';
        Text006: label 'Total %1 excl. VAT';
        GLSetup: Record "General Ledger Setup";
        ShipmentMethod: Record "Shipment Method";
        PaymentTerms: Record "Payment Terms";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInfo: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        VATAmountLine: Record "VAT Amount Line" temporary;
        SalesLine: Record "Sales Line" temporary;
        DocDim1: Record "Dimension Set Entry";
        DocDim2: Record "Dimension Set Entry";
        RespCenter: Record "Responsibility Center";
        Language2: Codeunit Language;
        Country: Record "Country/Region";
        CurrExchRate: Record "Currency Exchange Rate";
        SalesCountPrinted: Codeunit "Sales-Printed";
        FormatAddr: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        ArchiveManagement: Codeunit ArchiveManagement;
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        SalesPersonText: Text[30];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        TotalText: Text[50];
        TotalExclVATText: Text[50];
        TotalInclVATText: Text[50];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        ShowShippingAddr: Boolean;
        i: Integer;
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        ArchiveDocument: Boolean;
        LogInteraction: Boolean;
        VATAmount: Decimal;
        VATBaseAmount: Decimal;
        VATDiscountAmount: Decimal;
        TotalAmountInclVAT: Decimal;
        Text007: label 'Do you want to create a follow-up to-do?';
        NoOfRecords: Integer;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        VALSpecLCYHeader: Text[80];
        VALExchRate: Text[50];
        Text008: label 'VAT Amount Specification in ';
        Text009: label 'Local Currency';
        Text010: label 'Exchange rate: %1/%2';
        DUE001: label 'Delivery Address:';
        "---DUE...": Integer;
        BenutzerER: Record "User Setup";
        DebitorR: Record Customer;
        ZeilenDuplikatRecSet: Record "Sales Line";
        Kundendienst: Record "Salesperson/Purchaser";
        FirmenAnschr1: Text[120];
        DUE002: label 'E-mail:';
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WährTxt": Text[10];
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        LieferTerminK: Text[20];
        LieferTerminZ: Text[30];
        AusgKalkStatus: Text[30];
        AusgAngKalkStatus: Text[30];
        "AusgÜbSchrEinzelpreis/P.E.": Text[30];
        MitLogo: Boolean;
        FormOpened: Boolean;
        DUE003: label 'Web:';
        DUE004: label 'Order Confirmation %1';
        DUE005: label 'Always mention.';
        DUE006: label 'Thank you for your inquiry. We are pleased to submit our quotation as follows:';
        DUE007: label 'Unit Price';
        verwenden: Boolean;
        FrachtJN: Boolean;
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        GesKorrSumme: Decimal;
        BelegZwNetto: Decimal;
        AktuellerPosWert: array[3] of Decimal;
        "xPos.-Zus.-Zähl-Summen drucken": Boolean;
        "ZusammenzählungsText": Text[50];
        "NächsterZusammenzählungsText": Text[50];
        "PosZusammenzählungsSumme": array[3] of Decimal;
        "LetzterZusammenzählungsText": Text[50];
        "LetztePosZusammenzählungsSumme": array[3] of Decimal;
        AusgVKPreis: Decimal;
        "AusgWährTxt": Text[10];
        AusgBetragRechnsUndRabBetrag: Decimal;
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'The value added tax current at the time of the delivery applies.';
        DUE017: label 'We hope our offer meets your expectations. For all change requests or further questions and queries, we will be glad to';
        DUE018: label 'assist you. You may rest assured that your order will be executed with all due diligence.';
        DUE019: label 'Your Contact:';
        DUE020: label 'We thank you for your order and confirm according to our well-known terms and conditions.';
        DUE021: label 'Our general terms and conditions of sale apply.';
        DUE023: label 'Our tip: Web-enquiry with www.dueperthal.com. Every click pays!';
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";
        TempTMLine: Record "CCS TM Line Document" temporary;
        DUE022: label 'You will find our general terms and conditions following www.dueperthal.com or receive them by e-mail upon request';
        DUE024: label 'Commercial Invoice / Customs Invoice %1';
        DUE040: label 'Sum Position';

    procedure "--DUE--"()
    begin
    end;

    procedure MarkZeilenDuplikatErstellen(var Zeile: Record "Sales Line")
    var
        Satz: Text[1];
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        ZeilenDuplikatRecSet.CopyFilters(Zeile);                              // Somit  ist wirklich ein Duplikat dieses RecordSet
        while ZeilenDuplikatRecSet.Find(NächstenPlausiblen(Satz)) do
            case ZeilenDuplikatRecSet.Type of
                ZeilenDuplikatRecSet.Type::Item:
                    ZeilenDuplikatRecSet.Mark(
                      (ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Fracht1") and
                      (ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Fracht2") and
                      (ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Verpackung"));
                else
                    ZeilenDuplikatRecSet.Mark(true);
            end;                                                                // Signifikant ist nur was MARKiert ist !!!
    end;

    procedure IstMarkiert(var Zeile: Record "Sales Line"): Boolean
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        ZeilenDuplikatRecSet."Document Type" := ZeilenDuplikatRecSet."document type"::Order;
        ZeilenDuplikatRecSet."Document No." := Zeile."Document No.";
        ZeilenDuplikatRecSet."Line No." := Zeile."Line No.";
        ZeilenDuplikatRecSet.Find('=');
        exit(ZeilenDuplikatRecSet.Mark);
    end;

    procedure "NächstenPlausiblen"(var VorhergehenderSuchOperator: Text[1]) RetVal: Text[1]
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        if VorhergehenderSuchOperator = '' then
            RetVal := '-'
        else
            RetVal := '>';
        VorhergehenderSuchOperator := RetVal;
    end;

    procedure LieferTerminKopf()
    var
        VZ: Record "Sales Line";
        Int1: Integer;
        Int2: Integer;
        Jahr: Code[10];
        Woche: Code[10];
    begin
        //Liefertermin TEXT[20] zuweisen
        verwenden := true;
        VZ.SetCurrentkey("Document Type", "Document No.", "Line No.");
        VZ.SetRange("Document Type", "Sales Header"."Document Type");
        VZ.SetRange("Document No.", "Sales Header"."No.");
        VZ.SetRange(Type, VZ.Type::Item);
        VZ.SetFilter("No.", '<>%1', '');
        if VZ.Find('-') then
            repeat
                if ((VZ."Shipment Date" <> "Sales Header"."Shipment Date") or
                   VZ."Drop Shipment") then
                    verwenden := false;
            until (VZ.Next = 0) or (verwenden = false);
        if not verwenden then
            LieferTerminK := DUE008
        else
            if "Sales Header"."Shipment Date" <> 0D then begin
                "Sales Header"."Shipment Date" := CalcDate('+1W', "Sales Header"."Shipment Date");
                Int1 := Date2dwy("Sales Header"."Shipment Date", 3);
                Int2 := Date2dwy("Sales Header"."Shipment Date", 2);
                Jahr := Format(Int1);
                Jahr := CopyStr(Jahr, 3, 2);
                Woche := Format(Int2);
                if StrLen(Woche) < 2 then
                    Woche := '0' + Woche;
                LieferTerminK := Jahr + Woche;
            end;
        if "Sales Header"."fix-Termin Lieferung" <> '' then begin
            LieferTerminK := "Sales Header"."fix-Termin Lieferung";
            verwenden := true;
        end;
    end;

    procedure LieferTerminZeile(VerkZeile: Record "Sales Line")
    var
        Int1: Integer;
        Int2: Integer;
        Jahr: Code[10];
        Woche: Code[10];
    begin
        //Liefertermin TEXT[20] zuweisen
        LieferTerminZ := '';
        if not verwenden then  //im Kopf steht "siehe unten" im Feld Liefertermin
            if VerkZeile."Shipment Date" <> 0D then begin
                if VerkZeile."Drop Shipment" then
                    VerkZeile."Shipment Date" := CalcDate('+1W', VerkZeile."Shipment Date");
                //c/jk/211098 beginn
                Int1 := Date2dwy(VerkZeile."Shipment Date", 3);
                Int2 := Date2dwy(VerkZeile."Shipment Date", 2);
                Jahr := Format(Int1);
                Jahr := CopyStr(Jahr, 3, 2);
                Woche := Format(Int2);
                if StrLen(Woche) < 2 then
                    Woche := '0' + Woche;
                //LieferJahrKW := Jahr + Woche;
                //c/jk/211098 ende
                LieferTerminZ := StrSubstNo(DUE009, Jahr, Woche);
            end;
    end;

    procedure "ErmittlungPosZusammenzählung"(var Zeile: Record "Sales Line")
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        if IstImRecSetErste(Zeile) then begin
            Clear(AktuellerPosWert);
            Clear(LetztePosZusammenzählungsSumme);
            NächsterZusammenzählungsText := DUE040 + ' ' + Zeile.Position;
        end;
        Clear(PosZusammenzählungsSumme);
        /*PosZusammenzählungsSumme := */
        GetPosZusammenzählungsSummen(Zeile);
        if IstImRecSetLetzte(Zeile) then begin
            for i := 1 to 3 do begin
                LetztePosZusammenzählungsSumme[i] := AktuellerPosWert[i];
            end;
            LetzterZusammenzählungsText := NächsterZusammenzählungsText;
        end;

    end;

    procedure "GetPosZusammenzählungsSummen"(Zeile: Record "Sales Line")
    var
        Pos: Text[5];
        PosBetrag: Decimal;
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        Pos := DelChr(Zeile.Position, '<>', ' ');
        if IstImRecSetFolge(Zeile) then begin
            if StrPos(Pos, '.') > 0 then begin
                if (Pos[StrLen(Pos)] = '.') then begin
                    //RetVal := AktuellerPosWert;
                    for i := 1 to 3 do begin
                        PosZusammenzählungsSumme[i] := AktuellerPosWert[i];
                    end;
                    ZusammenzählungsText := NächsterZusammenzählungsText;
                    NächsterZusammenzählungsText := DUE040 + ' ' + Zeile.Position;
                    Clear(AktuellerPosWert);
                end;
            end;
        end;
        if IstMarkiert(Zeile) then begin
            case Zeile."CCS PR Special Position" of
                Zeile."CCS PR Special Position"::" ":
                    PosBetrag := Zeile.Amount + Zeile."Inv. Discount Amount";
                Zeile."CCS PR Special Position"::Alternative:
                    PosBetrag := Zeile.Quantity * Zeile."Unit Price";
                Zeile."CCS PR Special Position"::Optional:
                    PosBetrag := Zeile.Quantity * Zeile."Unit Price";
            end;
            AktuellerPosWert[Zeile."CCS PR Special Position" + 1] := AktuellerPosWert[Zeile."CCS PR Special Position" + 1] +
                                                           PosBetrag;
        end;
    end;

    procedure IstImRecSetErste(Zeile: Record "Sales Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('-') then
            exit(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
    end;

    procedure IstImRecSetFolge(Zeile: Record "Sales Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('-') then
            exit(ZeilenDuplikatRecSet."Line No." <> Zeile."Line No.")
    end;

    procedure IstImRecSetLetzte(Zeile: Record "Sales Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('+') then
            exit(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
    end;

    procedure "ClearPosZusammenzählung"()
    begin
        //c/gw/020903: - Problem bei Stapeldruck
        Clear(ZusammenzählungsText);
        Clear(NächsterZusammenzählungsText);
        Clear(PosZusammenzählungsSumme);
        Clear(LetzterZusammenzählungsText);
        Clear(LetztePosZusammenzählungsSumme);
        Clear(ZeilenDuplikatRecSet);
        Clear(AktuellerPosWert);
        Clear(GesKorrSumme);
    end;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionPageLoop_Header2(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput(true);
        end;
    end;

    local procedure OnPreSectionPageLoop_Header5(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput(true);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body9(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body10(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionRoundLoop_TransHeader13(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            //c/gw/160502: - Stichwort: PositonsZusammenzählung
            ReportForNavSetShowOutput(not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken");
            //IF ReportForNavShowOutput THEN
            //  ReportForNavSetShowOutput(NOT "Sales Header"."nur kompl. Preis drucken");
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body14(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(PosZusammenzählungsSumme[1] > 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body15(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(PosZusammenzählungsSumme[2] > 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body16(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(PosZusammenzählungsSumme[3] > 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body17(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput("Sales Line"."CCS PR Special Position" > 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body18(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput((SalesLine.Type.AsInteger() = 0)); //AND
                                                                         // (SalesLine.Schriftattribut <> SalesLine.Schriftattribut::fett ) AND
                                                                         //  NOT SalesLine.Zwischensumme);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body20(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type.AsInteger() = 0) and
                                 // "Sales Line".Zwischensumme AND
                                 (not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken"));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body21(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type.AsInteger() <> 0) and
                                  not FrachtJN and
                                  "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and
                                  ("Sales Line"."CCS PR Special Position" = 0));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body22(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type = "Sales Line".Type::"G/L Account") and
                                  not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken");
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
                AusgWährTxt := ''
            else
                AusgWährTxt := WährTxt
        end;
        if ReportForNavShowOutput and not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and not "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Unit Price";
            AusgBetragRechnsUndRabBetrag := "Sales Line".Amount + "Sales Line"."Inv. Discount Amount";
            AusgWährTxt := WährTxt;
        end;
        if ReportForNavShowOutput and "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Line Amount" / "Sales Line".Quantity;
            AusgBetragRechnsUndRabBetrag := "Sales Line"."Line Amount";
            AusgWährTxt := WährTxt;
        end;
        if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
            AusgWährTxt := ''
        else
            AusgWährTxt := WährTxt;
    end;

    local procedure OnPreSectionRoundLoop_Body23(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type = "Sales Line".Type::Item) and
                                  (not FrachtJN) and
                                  (not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken") and
                                  ("Sales Line"."CCS PR Special Position" = 0));
            //("Sales Header"."Sell-to Customer No." = ''));	 //c/gw180800 Deb.Art.. hier noch dazu
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
                AusgWährTxt := ''
            else
                AusgWährTxt := WährTxt
        end;
        if ReportForNavShowOutput and not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and not "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Unit Price";
            AusgBetragRechnsUndRabBetrag := "Sales Line".Amount + "Sales Line"."Inv. Discount Amount";
            AusgWährTxt := WährTxt;
        end;
        if ReportForNavShowOutput and "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Line Amount" / "Sales Line".Quantity;
            AusgBetragRechnsUndRabBetrag := "Sales Line"."Line Amount";
            AusgWährTxt := WährTxt;
        end;
        if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
            AusgWährTxt := ''
        else
            AusgWährTxt := WährTxt;
    end;

    local procedure OnPreSectionRoundLoop_Body24(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type = "Sales Line".Type::Item) and
                                  (not FrachtJN) and
                                  (not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken") and
                                   ("Sales Line"."CCS PR Special Position" = 0)); //AND
                                                                                  // ("Sales Header"."Sell-to Customer No." <> ''));	 //c/gw180800 Deb.Art.. hier noch dazu
                                                                                  //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
                AusgWährTxt := ''
            else
                AusgWährTxt := WährTxt
        end;
        if ReportForNavShowOutput and not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and not "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Unit Price";
            AusgBetragRechnsUndRabBetrag := "Sales Line".Amount + "Sales Line"."Inv. Discount Amount";
            AusgWährTxt := WährTxt;
        end;
        if ReportForNavShowOutput and "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Line Amount" / "Sales Line".Quantity;
            AusgBetragRechnsUndRabBetrag := "Sales Line"."Line Amount";
            AusgWährTxt := WährTxt;
        end;
        if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
            AusgWährTxt := ''
        else
            AusgWährTxt := WährTxt;
    end;

    local procedure OnPreSectionRoundLoop_Body25(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type = "Sales Line".Type::Item) and
                                  (not FrachtJN) and
                                  ("Sales Line"."CCS PR Special Position" > 0));
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
                AusgWährTxt := ''
            else
                AusgWährTxt := WährTxt
        end;
        if ReportForNavShowOutput and not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and not "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Unit Price";
            AusgBetragRechnsUndRabBetrag := "Sales Line".Amount + "Sales Line"."Inv. Discount Amount";
            AusgWährTxt := WährTxt;
        end;
        if ReportForNavShowOutput and "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Line Amount" / "Sales Line".Quantity;
            AusgBetragRechnsUndRabBetrag := "Sales Line"."Line Amount";
            AusgWährTxt := WährTxt;
        end;
        if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
            AusgWährTxt := ''
        else
            AusgWährTxt := WährTxt;
    end;

    local procedure OnPreSectionRoundLoop_Body26(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type = "Sales Line".Type::"Charge (Item)") and
                                  (not FrachtJN));
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
                AusgWährTxt := ''
            else
                AusgWährTxt := WährTxt
        end;
        if ReportForNavShowOutput and not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and not "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Unit Price";
            AusgBetragRechnsUndRabBetrag := "Sales Line".Amount + "Sales Line"."Inv. Discount Amount";
            AusgWährTxt := WährTxt;
        end;
        if ReportForNavShowOutput and "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Line Amount" / "Sales Line".Quantity;
            AusgBetragRechnsUndRabBetrag := "Sales Line"."Line Amount";
            AusgWährTxt := WährTxt;
        end;
        if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
            AusgWährTxt := ''
        else
            AusgWährTxt := WährTxt;
    end;

    local procedure OnPreSectionRoundLoop_Body27(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Sales Line".Type = "Sales Line".Type::Resource) and
                                  (not FrachtJN) and
                                  ("Sales Line"."CCS PR Special Position" > 0));
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
                AusgWährTxt := ''
            else
                AusgWährTxt := WährTxt
        end;
        if ReportForNavShowOutput and not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken" and not "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Unit Price";
            AusgBetragRechnsUndRabBetrag := "Sales Line".Amount + "Sales Line"."Inv. Discount Amount";
            AusgWährTxt := WährTxt;
        end;
        if ReportForNavShowOutput and "Sales Header"."Zeilenrabatt ausblenden" then begin
            AusgVKPreis := "Sales Line"."Line Amount" / "Sales Line".Quantity;
            AusgBetragRechnsUndRabBetrag := "Sales Line"."Line Amount";
            AusgWährTxt := WährTxt;
        end;
        if ("Sales Line"."Unit Price" = 0) or ("Sales Line"."Unit Price" < 0.001) then
            AusgWährTxt := ''
        else
            AusgWährTxt := WährTxt;
    end;

    local procedure OnPreSectionRoundLoop_Body28(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput("Sales Line"."Description 2" <> '');
        end;
    end;

    local procedure OnPreSectionRoundLoop_TransFooter30(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            //c/gw/160502: - Stichwort: PositonsZusammenzählung
            ReportForNavSetShowOutput(not "Sales Header"."Pos.-Zus.-Zähl-Summen drucken");
            //IF ReportForNavShowOutput THEN
            //  ReportForNavSetShowOutput(NOT "Sales Header"."nur kompl. Preis drucken");
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer32(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(SalesLine."Inv. Discount Amount" <> 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer34(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            //ReportForNavSetShowOutput((NOT "Sales Header"."Prices Including VAT") AND (VATAmount <> 0));
        end;
    end;

    local procedure OnPreSectionLetztePosZusammenzahl_Body36(var LetztePosZusammenzähl: Record Integer);
    begin
        with LetztePosZusammenzähl do begin
            ReportForNavSetShowOutput(LetztePosZusammenzählungsSumme[1] > 0);
        end;
    end;

    local procedure OnPreSectionLetztePosZusammenzahl_Body37(var LetztePosZusammenzähl: Record Integer);
    begin
        with LetztePosZusammenzähl do begin
            ReportForNavSetShowOutput(LetztePosZusammenzählungsSumme[2] > 0);
        end;
    end;

    local procedure OnPreSectionLetztePosZusammenzahl_Body38(var LetztePosZusammenzähl: Record Integer);
    begin
        with LetztePosZusammenzähl do begin
            ReportForNavSetShowOutput(LetztePosZusammenzählungsSumme[3] > 0);
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavRoundLoopBuffer: Array[2] of Decimal;
        ReportForNavRoundLoopTotals: Array[2] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'SalesHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'PageLoop':
                begin
                    ReportForNavRoundLoopTotals[1] := 0;
                    ReportForNavRoundLoopTotals[2] := 0;
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header2(PageLoop);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header5(PageLoop);
                    jsonObject.Add('$Header5$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop1':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body9(DimensionLoop1);
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body10(DimensionLoop1);
                    jsonObject.Add('$Body10$Pre', ReportForNavShowOutput);
                end;
            'RoundLoop':
                begin
                    values := 'SalesLine';
                    ReportForNav.AddAdditionalValues(jsonObject, values, "Sales Line");
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body14(RoundLoop);
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body15(RoundLoop);
                    jsonObject.Add('$Body15$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body16(RoundLoop);
                    jsonObject.Add('$Body16$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body17(RoundLoop);
                    jsonObject.Add('$Body17$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body18(RoundLoop);
                    jsonObject.Add('$Body18$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body20(RoundLoop);
                    jsonObject.Add('$Body20$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body21(RoundLoop);
                    jsonObject.Add('$Body21$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body22(RoundLoop);
                    jsonObject.Add('$Body22$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body23(RoundLoop);
                    jsonObject.Add('$Body23$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body24(RoundLoop);
                    jsonObject.Add('$Body24$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body25(RoundLoop);
                    jsonObject.Add('$Body25$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body26(RoundLoop);
                    jsonObject.Add('$Body26$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body27(RoundLoop);
                    jsonObject.Add('$Body27$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body28(RoundLoop);
                    jsonObject.Add('$Body28$Pre', ReportForNavShowOutput);
                    with RoundLoop do begin
                        ReportForNavRoundLoopTotals[1] += SalesLine."Line Amount";
                        ReportForNavRoundLoopBuffer[1] := SalesLine."Line Amount";
                        SalesLine."Line Amount" := ReportForNavRoundLoopTotals[1];
                        ReportForNavRoundLoopTotals[2] += SalesLine."Inv. Discount Amount";
                        ReportForNavRoundLoopBuffer[2] := SalesLine."Inv. Discount Amount";
                        SalesLine."Inv. Discount Amount" := ReportForNavRoundLoopTotals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_TransHeader13(RoundLoop);
                        jsonObject.Add('$TransHeader13$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_TransFooter30(RoundLoop);
                        jsonObject.Add('$TransFooter30$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer32(RoundLoop);
                        jsonObject.Add('$Footer32$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer34(RoundLoop);
                        jsonObject.Add('$Footer34$Pre', ReportForNavShowOutput);
                        SalesLine."Line Amount" := ReportForNavRoundLoopBuffer[1];
                        SalesLine."Inv. Discount Amount" := ReportForNavRoundLoopBuffer[2];
                    end;
                end;
            'LetztePosZusammenzahl':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionLetztePosZusammenzahl_Body36(LetztePosZusammenzähl);
                    jsonObject.Add('$Body36$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionLetztePosZusammenzahl_Body37(LetztePosZusammenzähl);
                    jsonObject.Add('$Body37$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionLetztePosZusammenzahl_Body38(LetztePosZusammenzähl);
                    jsonObject.Add('$Body38$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
