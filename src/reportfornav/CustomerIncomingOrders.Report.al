#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60044 "CCO Customer Incoming Orders"
{
    Caption = 'Customer Incoming Orders';
    UseRequestPage = true;
    WordLayout = './Layouts/CCOCustomerIncomingOrders.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Customer; Customer)
        {
            DataItemTableView = sorting("No.");
            MaxIteration = 1;
            PrintOnlyIfDetail = false;
            RequestFilterFields = "No.", "Search Name", "Customer Posting Group", "Currency Code", "Global Dimension 1 Code";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer', Customer)) { }
            column(VerkauferFilterung__VerkauferFilterung; "VerkäuferFilterung:" + VerkäuferFilterung)
            {
            }
            column("USERID"; UserId)
            {
            }
            column(ReportForNavPageNo; Format(ReportForNav.PagePlaceHolder))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(TODAY_0_4; Format(Today, 0, 4))
            {
            }
            column(CustomerTABLENAME___DebFilter; Customer.TableName + ': ' + DebFilter)
            {
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Customer', Customer);
            end;

            trigger OnAfterGetRecord();
            begin
                if "DM ausdrucken" then
                    DebWährungscode := FibuEinr."LCY Code"
                else
                    DebWährungscode := 'Währung';
                for i := 1 to 3 do
                    xDatum[i + 1] := CalcDate(Zeitvariable, xDatum[i]);
                //xDatum[5] := 99993112D;
                xDatum[5] := CalcDate('LJ', xDatum[4]);  //bis Jahresende
                Periodenanfang := CalcDate('-LJ', xDatum[1] - 1);  //Jahresanfang
                xDebitorR.CopyFilters(Customer);
                Fenster.Open('Bearbeite... \' +
                             'Kunde		#1#######   \' +
                             'Umsatzart	#2##########\' +
                             'Belegnr.	 #3########## ');
            end;

        }
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number);
            MaxIteration = 1;
            column(ReportForNavId_8; 8) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Integer; ReportForNavWriteDataItem('Integer', Integer)) { }
            column(xDatum5; xDatum[5])
            {
            }
            column(xDatum4_1; xDatum[4] + 1)
            {
            }
            column(xDatum1_1; xDatum[1] - 1)
            {
            }
            column(Periodenanfang; Periodenanfang)
            {
            }
            column(DebWahrungscode; DebWährungscode)
            {
            }
            column(xDatum4_12; xDatum[4] - 1)
            {
            }
            column(xDatum3; xDatum[3])
            {
            }
            column(xDatum3_1; xDatum[3] - 1)
            {
            }
            column(xDatum2; xDatum[2])
            {
            }
            column(xDatum2_1; xDatum[2] - 1)
            {
            }
            column(xDatum1; xDatum[1])
            {
            }
            column(V; '')
            {
            }
            dataitem(DebitorVK; Customer)
            {
                DataItemTableView = sorting("No.");
                column(ReportForNavId_21; 21) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_DebitorVK; ReportForNavWriteDataItem('DebitorVK', DebitorVK)) { }
                column(DebWahrungscode2; DebWährungscode)
                {
                }
                column(DM_Betragber; "DM-Betrag ber.")
                {
                }
                column(Teilsummen5; Teilsummen[5])
                {
                }
                column(Teilsummen4; Teilsummen[4])
                {
                }
                column(Teilsummen3; Teilsummen[3])
                {
                }
                column(Teilsummen2; Teilsummen[2])
                {
                }
                column(Teilsummen1; Teilsummen[1])
                {
                }
                dataitem(VKRK; "Sales Invoice Header")
                {
                    CalcFields = Amount;
                    DataItemLink = "Bill-to Customer No." = FIELD("No.");
                    DataItemTableView = sorting("Bill-to Customer No.", "No.") order(ascending);
                    column(ReportForNavId_29; 29) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VKRK; ReportForNavWriteDataItem('VKRK', VKRK)) { }
                    column(DocumentDate_VKRK; Format("Document Date", 0, '<Day,2>.<Month,2>'))
                    {
                    }
                    column(DebWahrungscode3; DebWährungscode)
                    {
                    }
                    column(Teilbetrag5; Teilbetrag[5])
                    {
                    }
                    column(Teilbetrag4; Teilbetrag[4])
                    {
                    }
                    column(Teilbetrag3; Teilbetrag[3])
                    {
                    }
                    column(Teilbetrag2; Teilbetrag[2])
                    {
                    }
                    column(Teilbetrag1; Teilbetrag[1])
                    {
                    }
                    column(No_VKRK; VKRK."No.")
                    {
                    }
                    column(DM_Betragber2; "DM-Betrag ber.")
                    {
                    }
                    column(Summenbetrag5; Summenbetrag[5])
                    {
                    }
                    column(Summenbetrag4; Summenbetrag[4])
                    {
                    }
                    column(Summenbetrag3; Summenbetrag[3])
                    {
                    }
                    column(Summenbetrag2; Summenbetrag[2])
                    {
                    }
                    column(Summenbetrag1; Summenbetrag[1])
                    {
                    }
                    column(Bill_toName_VKRK; VKRK."Bill-to Name")
                    {
                    }
                    column(No_DebitorVK; DebitorVK."No.")
                    {
                    }
                    column(Teilsummen55; Teilsummen[5])
                    {
                    }
                    column(Teilsummen45; Teilsummen[4])
                    {
                    }
                    column(Teilsummen35; Teilsummen[3])
                    {
                    }
                    column(Teilsummen25; Teilsummen[2])
                    {
                    }
                    column(Teilsummen15; Teilsummen[1])
                    {
                    }
                    trigger OnPreDataItem();
                    begin
                        if not FrühSpät then
                            SetRange("Document Date", xDatum[1], xDatum[4] - 1)
                        else
                            SetRange("Document Date", Periodenanfang, xDatum[5]);
                        ReportForNav.OnPreDataItem('VKRK', VKRK);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        Fenster.Update(3, VKRK."No.");
                        //c/gw/290402 Überspringen nicht signifikanter Verkäufer
                        if not SignifikanteVerkäuferTempRec.Get(VKRK."Salesperson Code") then
                            CurrReport.Skip;
                        if DelChr(VKRK."Order No.") <> '' then
                            CurrReport.Skip;
                        "Betrag ber." := VKRK.Amount;
                        "DM-Betrag ber." := VKRK.Amount;
                        Währung2.InitRoundingPrecision;
                        if "Currency Code" <> '' then
                            "DM-Betrag ber." :=
                              ROUND(
                                WährungWechKurs.ExchangeAmtFCYToLCY(
                                  "Posting Date", "Currency Code",
                                  "DM-Betrag ber.", "Currency Factor"),
                                Währung2."Amount Rounding Precision");
                        i := 1;
                        while "Document Date" >= xDatum[i] do
                            i := i + 1;
                        Clear(Teilbetrag);
                        Teilbetrag[i] := "DM-Betrag ber.";
                        Summenbetrag[i] := Summenbetrag[i] + "DM-Betrag ber.";
                        "DM-Summenbetrag"[i] := "DM-Summenbetrag"[i] + "DM-Betrag ber.";
                        Teilsummen[i] := Teilsummen[i] + "DM-Betrag ber.";
                    end;

                }
                trigger OnPreDataItem();
                begin
                    Clear(Teilbetrag);
                    Clear(Teilsummen);
                    Clear(Summenbetrag);
                    Clear("DM-Summenbetrag");
                    CopyFilters(xDebitorR);
                    if not FrühSpät then
                        SetRange("Date Filter", xDatum[1], xDatum[4] - 1)
                    else
                        SetRange("Date Filter", Periodenanfang, xDatum[5]);
                    Fenster.Update(2, 'Lagerverkauf');
                    Fenster.Update(3, '');
                    ReportForNav.OnPreDataItem('DebitorVK', DebitorVK);
                end;

                trigger OnAfterGetRecord();
                begin
                    "DM-Betrag ber." := 0; // Inserted by ForNAV
                    "Betrag ber." := 0; // Inserted by ForNAV
                    Fenster.Update(1, DebitorVK."No.");
                    //CALCFIELDS("Fakturierter Betrag (DM)");
                    //IF "Fakturierter Betrag (DM)" = 0 THEN
                    //  CurrReport.SKIP;
                    Clear(Summenbetrag);
                    if "DM ausdrucken" then
                        DebWährungscode := ''
                    else
                        DebWährungscode := "Currency Code";
                end;

            }
            dataitem(DebitorVK2; Customer)
            {
                DataItemTableView = sorting("No.");
                column(ReportForNavId_46; 46) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_DebitorVK2; ReportForNavWriteDataItem('DebitorVK2', DebitorVK2)) { }
                column(DebWahrungscode5; DebWährungscode)
                {
                }
                column(DM_Betragber3; "DM-Betrag ber.")
                {
                }
                column(Teilsummen52; Teilsummen[5])
                {
                }
                column(Teilsummen42; Teilsummen[4])
                {
                }
                column(Teilsummen32; Teilsummen[3])
                {
                }
                column(Teilsummen22; Teilsummen[2])
                {
                }
                column(Teilsummen12; Teilsummen[1])
                {
                }
                dataitem(VKRK2; "Sales Invoice Header")
                {
                    DataItemLink = "Bill-to Customer No." = FIELD("No.");
                    DataItemTableView = sorting("Bill-to Customer No.", "No.");
                    PrintOnlyIfDetail = false;
                    column(ReportForNavId_54; 54) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VKRK2; ReportForNavWriteDataItem('VKRK2', VKRK2)) { }
                    column(DebWahrungscode6; DebWährungscode)
                    {
                    }
                    column(DM_Betragber4; "DM-Betrag ber.")
                    {
                    }
                    column(Summenbetrag52; Summenbetrag[5])
                    {
                    }
                    column(Summenbetrag42; Summenbetrag[4])
                    {
                    }
                    column(Summenbetrag32; Summenbetrag[3])
                    {
                    }
                    column(Summenbetrag22; Summenbetrag[2])
                    {
                    }
                    column(Summenbetrag12; Summenbetrag[1])
                    {
                    }
                    column(Bill_toName_VKRK2; VKRK2."Bill-to Name")
                    {
                    }
                    column(No_DebitorVK2; DebitorVK2."No.")
                    {
                    }
                    dataitem(VKRZ2; "Sales Invoice Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemTableView = sorting("Document No.", "Line No.") order(ascending);
                        column(ReportForNavId_64; 64) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VKRZ2; ReportForNavWriteDataItem('VKRZ2', VKRZ2)) { }
                        column(DebWahrungscode7; DebWährungscode)
                        {
                        }
                        column(Teilbetrag52; Teilbetrag[5])
                        {
                        }
                        column(Teilbetrag42; Teilbetrag[4])
                        {
                        }
                        column(Teilbetrag32; Teilbetrag[3])
                        {
                        }
                        column(Teilbetrag22; Teilbetrag[2])
                        {
                        }
                        column(Teilbetrag12; Teilbetrag[1])
                        {
                        }
                        column(VKRK2Anlagedatum; Format(VKRK2."Creation Date", 0, '<Day,2>.<Month,2>.'))
                        {
                        }
                        column(DocumentNo___VKRK2OrderNo; "Document No." + ' - ' + VKRK2."Order No.")
                        {
                        }
                        column(DM_Betragber32; "DM-Betrag ber.")
                        {
                        }
                        column(Teilsummen522; Teilsummen[5])
                        {
                        }
                        column(Teilsummen422; Teilsummen[4])
                        {
                        }
                        column(Teilsummen322; Teilsummen[3])
                        {
                        }
                        column(Teilsummen222; Teilsummen[2])
                        {
                        }
                        column(Teilsummen122; Teilsummen[1])
                        {
                        }
                        column(Summenbetrag522; Summenbetrag[5])
                        {
                        }
                        column(Summenbetrag422; Summenbetrag[4])
                        {
                        }
                        column(Summenbetrag322; Summenbetrag[3])
                        {
                        }
                        column(Summenbetrag222; Summenbetrag[2])
                        {
                        }
                        column(Summenbetrag122; Summenbetrag[1])
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('VKRZ2', VKRZ2);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            //Rahmenzeilen ignorieren wenn Flag gesetzt, d.h. Abrufmengen
                            //c/mt/221107-
                            //IF VKRK2.Auftragart = VKRK2.Auftragart::"1" THEN
                            //  IF VKRZ2."nicht drucken" THEN
                            //	CurrReport.SKIP;
                            //c/mt/221107+
                            "Betrag ber." := Amount;
                            "DM-Betrag ber." := Amount;
                            Währung2.InitRoundingPrecision;
                            if VKRK2."Currency Code" <> '' then
                                "DM-Betrag ber." :=
                                  ROUND(
                                    WährungWechKurs.ExchangeAmtFCYToLCY(
                                      VKRK2."Posting Date", VKRK2."Currency Code",
                                      "DM-Betrag ber.", VKRK2."Currency Factor"),
                                    Währung2."Amount Rounding Precision");
                            i := 1;
                            while VKRK2."Creation Date" >= xDatum[i] do
                                i := i + 1;
                            Teilbetrag[i] := Teilbetrag[i] + "DM-Betrag ber.";
                            Summenbetrag[i] := Summenbetrag[i] + "DM-Betrag ber.";
                            "DM-Summenbetrag"[i] := "DM-Summenbetrag"[i] + "DM-Betrag ber.";
                            Teilsummen[i] := Teilsummen[i] + "DM-Betrag ber.";
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        if not FrühSpät then
                            SetRange("Creation Date", xDatum[1], xDatum[4] - 1)
                        else
                            SetRange("Creation Date", Periodenanfang, xDatum[5]);
                        ReportForNav.OnPreDataItem('VKRK2', VKRK2);
                    end;

                    trigger OnAfterGetRecord();
                    var
                        VKK3: Record "Sales Header";
                    begin
                        "DM-Betrag ber." := 0; // Inserted by ForNAV
                        "Betrag ber." := 0; // Inserted by ForNAV
                        Fenster.Update(3, VKRK2."No.");
                        Clear(Teilbetrag);
                        //c/gw/290402 Überspringen nicht signifikanter Verkäufer
                        if not SignifikanteVerkäuferTempRec.Get(VKRK2."Salesperson Code") then
                            CurrReport.Skip;
                        //wenn Abrufauftrag, dann ignorieren
                        //c/mt/221107-
                        //IF VKRK2.Auftragart = VKRK2.Auftragart::"2" THEN
                        //  CurrReport.SKIP;
                        //c/mt/221107+
                        if DelChr("Order No.") = '' then
                            CurrReport.Skip;
                    end;

                }
                trigger OnPreDataItem();
                begin
                    Clear(Teilbetrag);
                    Clear(Teilsummen);
                    Clear(Summenbetrag);
                    CopyFilters(xDebitorR);
                    if not FrühSpät then
                        SetRange("Date Filter", xDatum[1], xDatum[4] - 1)
                    else
                        SetRange("Date Filter", Periodenanfang, xDatum[5]);
                    Fenster.Update(2, 'fakt. AB');
                    Fenster.Update(3, '');
                    ReportForNav.OnPreDataItem('DebitorVK2', DebitorVK2);
                end;

                trigger OnAfterGetRecord();
                begin
                    "DM-Betrag ber." := 0; // Inserted by ForNAV
                    "Betrag ber." := 0; // Inserted by ForNAV
                    Fenster.Update(1, DebitorVK2."No.");
                    //CALCFIELDS("Fakturierter Betrag (DM)");
                    //IF "Fakturierter Betrag (DM)" = 0 THEN
                    //  CurrReport.SKIP;
                    Clear(Summenbetrag);
                    if "DM ausdrucken" then
                        DebWährungscode := ''
                    else
                        DebWährungscode := "Currency Code";
                end;

            }
            dataitem(DebitorAB; Customer)
            {
                DataItemTableView = sorting("No.");
                column(ReportForNavId_73; 73) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_DebitorAB; ReportForNavWriteDataItem('DebitorAB', DebitorAB)) { }
                column(DebWahrungscode8; DebWährungscode)
                {
                }
                column(DM_Betragber5; "DM-Betrag ber.")
                {
                }
                column(Teilsummen53; Teilsummen[5])
                {
                }
                column(Teilsummen43; Teilsummen[4])
                {
                }
                column(Teilsummen33; Teilsummen[3])
                {
                }
                column(Teilsummen23; Teilsummen[2])
                {
                }
                column(Teilsummen13; Teilsummen[1])
                {
                }
                dataitem(VKK; "Sales Header")
                {
                    DataItemLink = "Bill-to Customer No." = FIELD("No.");
                    DataItemTableView = sorting("Document Type", "Sell-to Customer No.", "No.") where("Document Type" = const(Order));
                    PrintOnlyIfDetail = false;
                    column(ReportForNavId_81; 81) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VKK; ReportForNavWriteDataItem('VKK', VKK)) { }
                    column(DebWahrungscode9; DebWährungscode)
                    {
                    }
                    column(Summenbetrag13; Summenbetrag[1])
                    {
                    }
                    column(Summenbetrag23; Summenbetrag[2])
                    {
                    }
                    column(Summenbetrag33; Summenbetrag[3])
                    {
                    }
                    column(Summenbetrag43; Summenbetrag[4])
                    {
                    }
                    column(Summenbetrag53; Summenbetrag[5])
                    {
                    }
                    column(DM_Betragber6; "DM-Betrag ber.")
                    {
                    }
                    column(Bill_toName_VKK; VKK."Bill-to Name")
                    {
                    }
                    column(No_DebitorAB; DebitorAB."No.")
                    {
                    }
                    dataitem("Sales Line"; "Sales Line")
                    {
                        DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
                        column(ReportForNavId_91; 91) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesLine; ReportForNavWriteDataItem('SalesLine', "Sales Line")) { }
                        column(Teilbetrag13; Teilbetrag[1])
                        {
                        }
                        column(Teilbetrag23; Teilbetrag[2])
                        {
                        }
                        column(Teilbetrag33; Teilbetrag[3])
                        {
                        }
                        column(Teilbetrag43; Teilbetrag[4])
                        {
                        }
                        column(Teilbetrag53; Teilbetrag[5])
                        {
                        }
                        column(DebWahrungscode10; DebWährungscode)
                        {
                        }
                        column(VKKAnlagedatum; Format(VKK."Creation Date", 0, '<Day,2>.<Month,2>'))
                        {
                        }
                        column(No_VKK; VKK."No.")
                        {
                        }
                        column(DM_Betragber52; "DM-Betrag ber.")
                        {
                        }
                        column(Teilsummen532; Teilsummen[5])
                        {
                        }
                        column(Teilsummen432; Teilsummen[4])
                        {
                        }
                        column(Teilsummen332; Teilsummen[3])
                        {
                        }
                        column(Teilsummen232; Teilsummen[2])
                        {
                        }
                        column(Teilsummen132; Teilsummen[1])
                        {
                        }
                        column(Summenbetrag132; Summenbetrag[1])
                        {
                        }
                        column(Summenbetrag232; Summenbetrag[2])
                        {
                        }
                        column(Summenbetrag332; Summenbetrag[3])
                        {
                        }
                        column(Summenbetrag432; Summenbetrag[4])
                        {
                        }
                        column(Summenbetrag532; Summenbetrag[5])
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('SalesLine', "Sales Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            //prüfen ob Abrufzeile im Rahmen => ignorieren
                            //c/mt/221107-
                            //IF "Sales Line".Auftragart = "Sales Line".Auftragart::"1" THEN
                            //  IF "Sales Line"."nicht drucken" = TRUE THEN
                            //	CurrReport.SKIP;
                            //c/mt/221107+
                            "Betrag ber." := Amount;
                            if Quantity <> 0 then
                                "Betrag ber." := "Betrag ber." * (Quantity - "Quantity Invoiced") / Quantity;
                            "DM-Betrag ber." := "Betrag ber.";
                            Währung2.InitRoundingPrecision;
                            if VKK."Currency Code" <> '' then
                                "DM-Betrag ber." :=
                                  ROUND(
                                    WährungWechKurs.ExchangeAmtFCYToLCY(
                                      VKK."Posting Date", VKK."Currency Code",
                                      "DM-Betrag ber.", VKK."Currency Factor"),
                                    Währung2."Amount Rounding Precision");
                            i := 1;
                            while VKK."Creation Date" >= xDatum[i] do
                                i := i + 1;
                            Teilbetrag[i] := Teilbetrag[i] + "DM-Betrag ber.";
                            Summenbetrag[i] := Summenbetrag[i] + "DM-Betrag ber.";
                            "DM-Summenbetrag"[i] := "DM-Summenbetrag"[i] + "DM-Betrag ber.";
                            Teilsummen[i] := Teilsummen[i] + "DM-Betrag ber.";
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        if not FrühSpät then
                            SetRange("Creation Date", xDatum[1], xDatum[4] - 1)
                        else
                            SetRange("Creation Date", Periodenanfang, xDatum[5]);
                        //c/mt/221107-
                        //SETRANGE(VKK.Auftragart, 0, 1);   {leer und Rahmen}
                        //c/mt/221107+
                        ReportForNav.OnPreDataItem('VKK', VKK);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        "DM-Betrag ber." := 0; // Inserted by ForNAV
                        "Betrag ber." := 0; // Inserted by ForNAV
                        Fenster.Update(3, VKK."No.");
                        Clear(Teilbetrag);
                        //c/gw/290402 Überspringen nicht signifikanter Verkäufer
                        if not SignifikanteVerkäuferTempRec.Get(VKK."Salesperson Code") then
                            CurrReport.Skip;
                    end;

                }
                trigger OnPreDataItem();
                begin
                    Clear(Teilbetrag);
                    Clear(Teilsummen);
                    Clear(Summenbetrag);
                    CopyFilters(xDebitorR);
                    if not FrühSpät then
                        SetRange("Date Filter", xDatum[1], xDatum[4])
                    else
                        SetRange("Date Filter", Periodenanfang, xDatum[5]);
                    Fenster.Update(2, 'offene AB');
                    Fenster.Update(3, '');
                    ReportForNav.OnPreDataItem('DebitorAB', DebitorAB);
                end;

                trigger OnAfterGetRecord();
                begin
                    "DM-Betrag ber." := 0; // Inserted by ForNAV
                    "Betrag ber." := 0; // Inserted by ForNAV
                    Fenster.Update(1, DebitorAB."No.");
                    Clear(Summenbetrag);
                    //CALCFIELDS(Auftragsbestand);
                    //IF Auftragsbestand = 0 THEN
                    //  CurrReport.SKIP;
                    if "DM ausdrucken" then
                        DebWährungscode := ''
                    else
                        DebWährungscode := "Currency Code";
                end;

            }
            dataitem(DebitorGS; Customer)
            {
                DataItemTableView = sorting("No.");
                column(ReportForNavId_100; 100) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_DebitorGS; ReportForNavWriteDataItem('DebitorGS', DebitorGS)) { }
                column(DebWahrungscode11; DebWährungscode)
                {
                }
                column(DM_Betragber7; "DM-Betrag ber.")
                {
                }
                column(Teilsummen54; Teilsummen[5])
                {
                }
                column(Teilsummen44; Teilsummen[4])
                {
                }
                column(Teilsummen34; Teilsummen[3])
                {
                }
                column(Teilsummen24; Teilsummen[2])
                {
                }
                column(Teilsummen14; Teilsummen[1])
                {
                }
                dataitem(VKGSK; "Sales Cr.Memo Header")
                {
                    CalcFields = Amount;
                    DataItemLink = "Bill-to Customer No." = FIELD("No.");
                    DataItemTableView = sorting("Bill-to Customer No.", "No.") order(ascending);
                    PrintOnlyIfDetail = false;
                    column(ReportForNavId_108; 108) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VKGSK; ReportForNavWriteDataItem('VKGSK', VKGSK)) { }
                    column(Teilbetrag14; Teilbetrag[1])
                    {
                    }
                    column(Teilbetrag24; Teilbetrag[2])
                    {
                    }
                    column(Teilbetrag34; Teilbetrag[3])
                    {
                    }
                    column(Teilbetrag44; Teilbetrag[4])
                    {
                    }
                    column(Teilbetrag54; Teilbetrag[5])
                    {
                    }
                    column(DebWahrungscode12; DebWährungscode)
                    {
                    }
                    column(DocumentDate_VKGSK; Format("Document Date", 0, '<Day,2>.<Month,2>'))
                    {
                    }
                    column(No_VKGSK; VKGSK."No.")
                    {
                    }
                    column(No_DebitorGS; DebitorGS."No.")
                    {
                    }
                    column(Bill_toName_VKGSK; VKGSK."Bill-to Name")
                    {
                    }
                    column(Summenbetrag14; Summenbetrag[1])
                    {
                    }
                    column(Summenbetrag24; Summenbetrag[2])
                    {
                    }
                    column(Summenbetrag34; Summenbetrag[3])
                    {
                    }
                    column(Summenbetrag44; Summenbetrag[4])
                    {
                    }
                    column(Summenbetrag54; Summenbetrag[5])
                    {
                    }
                    column(DM_Betragber8; "DM-Betrag ber.")
                    {
                    }
                    column(Teilsummen542; Teilsummen[5])
                    {
                    }
                    column(Teilsummen442; Teilsummen[4])
                    {
                    }
                    column(Teilsummen342; Teilsummen[3])
                    {
                    }
                    column(Teilsummen242; Teilsummen[2])
                    {
                    }
                    column(Teilsummen142; Teilsummen[1])
                    {
                    }
                    trigger OnPreDataItem();
                    begin
                        if not FrühSpät then
                            SetRange("Document Date", xDatum[1], xDatum[4] - 1)
                        else
                            SetRange("Document Date", Periodenanfang, xDatum[5]);
                        ReportForNav.OnPreDataItem('VKGSK', VKGSK);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        Fenster.Update(3, VKGSK."No.");
                        //c/gw/290402 Überspringen nicht signifikanter Verkäufer
                        if not SignifikanteVerkäuferTempRec.Get(VKGSK."Salesperson Code") then
                            CurrReport.Skip;
                        "Betrag ber." := -Amount;
                        "DM-Betrag ber." := -Amount;
                        Währung2.InitRoundingPrecision;
                        if "Currency Code" <> '' then
                            "DM-Betrag ber." :=
                              ROUND(
                                WährungWechKurs.ExchangeAmtFCYToLCY(
                                  "Posting Date", "Currency Code",
                                  "DM-Betrag ber.", "Currency Factor"),
                                Währung2."Amount Rounding Precision");
                        i := 1;
                        while "Document Date" >= xDatum[i] do
                            i := i + 1;
                        Clear(Teilbetrag);
                        Teilbetrag[i] := "DM-Betrag ber.";
                        Summenbetrag[i] := Summenbetrag[i] + "DM-Betrag ber.";
                        "DM-Summenbetrag"[i] := "DM-Summenbetrag"[i] + "DM-Betrag ber.";
                        Teilsummen[i] := Teilsummen[i] + "DM-Betrag ber.";
                    end;

                }
                trigger OnPreDataItem();
                begin
                    Clear(Teilbetrag);
                    Clear(Teilsummen);
                    Clear(Summenbetrag);
                    CopyFilters(xDebitorR);
                    if not FrühSpät then
                        SetRange("Date Filter", xDatum[1], xDatum[4])
                    else
                        SetRange("Date Filter", Periodenanfang, xDatum[5]);
                    Fenster.Update(2, 'Gutschriften');
                    Fenster.Update(3, '');
                    ReportForNav.OnPreDataItem('DebitorGS', DebitorGS);
                end;

                trigger OnAfterGetRecord();
                begin
                    "DM-Betrag ber." := 0; // Inserted by ForNAV
                    "Betrag ber." := 0; // Inserted by ForNAV
                    Fenster.Update(1, DebitorGS."No.");
                    //CALCFIELDS("Gutgeschriebener Betrag (DM)");
                    //IF "Gutgeschriebener Betrag (DM)" = 0 THEN
                    //  CurrReport.SKIP;
                    Clear(Summenbetrag);
                    if "DM ausdrucken" then
                        DebWährungscode := ''
                    else
                        DebWährungscode := "Currency Code";
                    Fenster.Update(1, DebitorGS."No.");
                end;

            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Integer', Integer);
            end;
        }
        dataitem(AETotal; Integer)
        {
            DataItemTableView = sorting(Number);
            MaxIteration = 1;
            column(ReportForNavId_125; 125) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_AETotal; ReportForNavWriteDataItem('AETotal', AETotal)) { }
            column(DM_Betragber9; "DM-Betrag ber.")
            {
            }
            column(DM_Summenbetrag5; "DM-Summenbetrag"[5])
            {
            }
            column(DM_Summenbetrag4; "DM-Summenbetrag"[4])
            {
            }
            column(DM_Summenbetrag3; "DM-Summenbetrag"[3])
            {
            }
            column(DM_Summenbetrag2; "DM-Summenbetrag"[2])
            {
            }
            column(DM_Summenbetrag1; "DM-Summenbetrag"[1])
            {
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('AETotal', AETotal);
            end;

            trigger OnAfterGetRecord();
            begin
                "DM-Betrag ber." := "DM-Summenbetrag"[1] + "DM-Summenbetrag"[2] +
                                    "DM-Summenbetrag"[3] + "DM-Summenbetrag"[4] +
                                    "DM-Summenbetrag"[5];
                Fenster.Close;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field("xDatum[1]"; xDatum[1])
                    {
                        ApplicationArea = Basic;
                        Caption = 'Von Datum';
                        NotBlank = true;
                    }
                    field(Zeitvariable; Zeitvariable)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Zeitvariable';
                        NotBlank = true;
                    }
                    field(nurSummen; nurSummen)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Nur Summen drucken';
                        NotBlank = true;
                    }
                    field(DetailsDrucken; DetailsDrucken)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Nur Summen drucken';
                        NotBlank = true;
                    }
                    field("FrühSpät"; FrühSpät)
                    {
                        ApplicationArea = Basic;
                        Caption = 'incl. früher/später';
                        NotBlank = true;
                    }
                    field("VerkäuferFilterung"; VerkäuferFilterung)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Verkäuferfilter';
                        TableRelation = "Salesperson/Purchaser";
                    }
                }
            }
        }

        trigger OnAfterGetRecord()
        begin
            Zeitvariable := UpperCase(Zeitvariable);
            if CalcDate(Zeitvariable, Today) > 0D then;  //Test ob Variable ok
            if xDatum[1] = 0D then
                Error('"Von Datum" darf nicht leer sein');
        end;

        trigger OnOpenPage()
        begin
            if xDatum[1] = 0D then
                xDatum[1] := Today;
            Zeitvariable := '1M';
            "DM ausdrucken" := true;
        end;

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    var
        ZuSuchendenSatz: Text[1];
    begin
        DebFilter := Customer.GetFilters;
        FibuEinr.Get;
        //c/gw/290402 Merken der via "VerkäuferFilterung" in Optionen gefilterten signifikanten Verkäufer
        VerkäuferEinkäuferRec.SetFilter(Code, VerkäuferFilterung);
        while VerkäuferEinkäuferRec.Find(NächstenPlausiblen(ZuSuchendenSatz)) do
            MerkeVerkäuferTemporär;
        if VerkäuferFilterung <> '' then
            "VerkäuferFilterung:" := 'Verkäuferfilter: ';
        ;
        ReportsForNavPre;
    end;

    var
        FibuEinr: Record "General Ledger Setup";
        "Währung2": Record Currency;
        "WährungWechKurs": Record "Currency Exchange Rate";
        "DM ausdrucken": Boolean;
        "Betrag ber.": Decimal;
        "DM-Betrag ber.": Decimal;
        Summenbetrag: array[5] of Decimal;
        Teilbetrag: array[5] of Decimal;
        "DM-Summenbetrag": array[5] of Decimal;
        Teilsummen: array[5] of Decimal;
        Zeitvariable: Text[30];
        "FrühSpät": Boolean;
        nurSummen: Boolean;
        DetailsDrucken: Boolean;
        xDatum: array[5] of Date;
        Periodenanfang: Date;
        AuftragKopf: Record "Sales Header";
        DebFilter: Text[250];
        AuftragBetrag: Decimal;
        AuftragBetragDM: Decimal;
        PeriodenStartDatum: array[5] of Date;
        VerkBetragInAuftragDM: array[5] of Decimal;
        "BeträgeDruckInDM": Boolean;
        PeriodeNr: Integer;
        VerkBetragInAuftrag: array[5] of Decimal;
        "DebWährungscode": Text[10];
        i: Integer;
        xDebitorR: Record Customer;
        Fenster: Dialog;
        "VerkäuferFilterung": Text[250];
        "VerkäuferFilterung:": Text[30];
        "VerkäuferEinkäuferRec": Record "Salesperson/Purchaser";
        "SignifikanteVerkäuferTempRec": Record "Salesperson/Purchaser" temporary;

    procedure "NächstenPlausiblen"(var VorhergehenderOperator: Text[1]) RetVal: Text[1]
    begin
        if VorhergehenderOperator <> '' then
            RetVal := '>'
        else
            RetVal := '-';
        VorhergehenderOperator := RetVal;
    end;

    procedure "MerkeVerkäuferTemporär"()
    begin
        SignifikanteVerkäuferTempRec := VerkäuferEinkäuferRec;
        SignifikanteVerkäuferTempRec.Insert;
    end;

    local procedure OnPreSectionCustomer_Header2(var Customer: Record Customer);
    begin
        with Customer do begin
            ReportForNavSetShowOutput("DM ausdrucken");
        end;
    end;

    local procedure OnPreSectionCustomer_Header3(var Customer: Record Customer);
    begin
        with Customer do begin
            ReportForNavSetShowOutput((CurrReport.PageNo = 1) and (DebFilter <> ''));
        end;
    end;

    local procedure OnPreSectionVKRK_Body9(var VKRK: Record "Sales Invoice Header");
    begin
        with VKRK do begin
            if ((Teilbetrag[1] + Teilbetrag[2] + Teilbetrag[3] + Teilbetrag[4] +
                 Teilbetrag[5]) <> 0) and DetailsDrucken then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionVKRK_Footer10(var VKRK: Record "Sales Invoice Header");
    begin
        with VKRK do begin
            if ((Summenbetrag[1] + Summenbetrag[2] + Summenbetrag[3] + Summenbetrag[4] +
                 Summenbetrag[5]) <> 0) and not nurSummen then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionVKRK2_Footer14(var VKRK2: Record "Sales Invoice Header");
    begin
        with VKRK2 do begin
            if ((Summenbetrag[1] + Summenbetrag[2] + Summenbetrag[3] + Summenbetrag[4] +
                 Summenbetrag[5]) <> 0) and not nurSummen then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionVKRZ2_Footer15(var VKRZ2: Record "Sales Invoice Line");
    begin
        with VKRZ2 do begin
            if ((Teilbetrag[1] + Teilbetrag[2] + Teilbetrag[3] + Teilbetrag[4] +
                 Teilbetrag[5]) <> 0) and DetailsDrucken then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionVKK_Footer20(var VKK: Record "Sales Header");
    begin
        with VKK do begin
            if ((Summenbetrag[1] + Summenbetrag[2] + Summenbetrag[3] + Summenbetrag[4] +
                 Summenbetrag[5]) <> 0) and not nurSummen then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionSalesLine_Footer22(var "Sales Line": Record "Sales Line");
    begin
        with "Sales Line" do begin
            if ((Summenbetrag[1] + Summenbetrag[2] + Summenbetrag[3] + Summenbetrag[4] +
                 Summenbetrag[5]) <> 0) and DetailsDrucken then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionVKGSK_Body26(var VKGSK: Record "Sales Cr.Memo Header");
    begin
        with VKGSK do begin
            if ((Teilbetrag[1] + Teilbetrag[2] + Teilbetrag[3] + Teilbetrag[4] +
                 Teilbetrag[5]) <> 0) and DetailsDrucken then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionVKGSK_Footer27(var VKGSK: Record "Sales Cr.Memo Header");
    begin
        with VKGSK do begin
            if ((Summenbetrag[1] + Summenbetrag[2] + Summenbetrag[3] + Summenbetrag[4] +
                 Summenbetrag[5]) <> 0) and not nurSummen then
                ReportForNavSetShowOutput(true)
            else
                ReportForNavSetShowOutput(false);
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavVKRKBuffer: Array[2] of Decimal;
        ReportForNavVKRKTotals: Array[2] of Decimal;
        ReportForNavVKRK2Buffer: Array[2] of Decimal;
        ReportForNavVKRK2Totals: Array[2] of Decimal;
        ReportForNavVKRZ2Buffer: Array[2] of Decimal;
        ReportForNavVKRZ2Totals: Array[2] of Decimal;
        ReportForNavVKKBuffer: Array[2] of Decimal;
        ReportForNavVKKTotals: Array[2] of Decimal;
        ReportForNavSalesLineBuffer: Array[2] of Decimal;
        ReportForNavSalesLineTotals: Array[2] of Decimal;
        ReportForNavVKGSKBuffer: Array[2] of Decimal;
        ReportForNavVKGSKTotals: Array[2] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Customer':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionCustomer_Header2(Customer);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionCustomer_Header3(Customer);
                    jsonObject.Add('$Header3$Pre', ReportForNavShowOutput);
                end;
            'DebitorVK':
                begin
                    ReportForNavVKRKTotals[1] := 0;
                    ReportForNavVKRKTotals[2] := 0;
                end;
            'VKRK':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionVKRK_Body9(VKRK);
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                    with VKRK do begin
                        ReportForNavVKRKTotals[1] += "Betrag ber.";
                        ReportForNavVKRKBuffer[1] := "Betrag ber.";
                        "Betrag ber." := ReportForNavVKRKTotals[1];
                        ReportForNavVKRKTotals[2] += "DM-Betrag ber.";
                        ReportForNavVKRKBuffer[2] := "DM-Betrag ber.";
                        "DM-Betrag ber." := ReportForNavVKRKTotals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionVKRK_Footer10(VKRK);
                        jsonObject.Add('$Footer10$Pre', ReportForNavShowOutput);
                        "Betrag ber." := ReportForNavVKRKBuffer[1];
                        "DM-Betrag ber." := ReportForNavVKRKBuffer[2];
                    end;
                end;
            'DebitorVK2':
                begin
                    ReportForNavVKRK2Totals[1] := 0;
                    ReportForNavVKRK2Totals[2] := 0;
                end;
            'VKRK2':
                begin
                    ReportForNavVKRZ2Totals[1] := 0;
                    ReportForNavVKRZ2Totals[2] := 0;
                    with VKRK2 do begin
                        ReportForNavVKRK2Totals[1] += "Betrag ber.";
                        ReportForNavVKRK2Buffer[1] := "Betrag ber.";
                        "Betrag ber." := ReportForNavVKRK2Totals[1];
                        ReportForNavVKRK2Totals[2] += "DM-Betrag ber.";
                        ReportForNavVKRK2Buffer[2] := "DM-Betrag ber.";
                        "DM-Betrag ber." := ReportForNavVKRK2Totals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionVKRK2_Footer14(VKRK2);
                        jsonObject.Add('$Footer14$Pre', ReportForNavShowOutput);
                        "Betrag ber." := ReportForNavVKRK2Buffer[1];
                        "DM-Betrag ber." := ReportForNavVKRK2Buffer[2];
                    end;
                end;
            'VKRZ2':
                begin
                    with VKRZ2 do begin
                        ReportForNavVKRZ2Totals[1] += "Betrag ber.";
                        ReportForNavVKRZ2Buffer[1] := "Betrag ber.";
                        "Betrag ber." := ReportForNavVKRZ2Totals[1];
                        ReportForNavVKRZ2Totals[2] += "DM-Betrag ber.";
                        ReportForNavVKRZ2Buffer[2] := "DM-Betrag ber.";
                        "DM-Betrag ber." := ReportForNavVKRZ2Totals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionVKRZ2_Footer15(VKRZ2);
                        jsonObject.Add('$Footer15$Pre', ReportForNavShowOutput);
                        "Betrag ber." := ReportForNavVKRZ2Buffer[1];
                        "DM-Betrag ber." := ReportForNavVKRZ2Buffer[2];
                    end;
                end;
            'DebitorAB':
                begin
                    ReportForNavVKKTotals[1] := 0;
                    ReportForNavVKKTotals[2] := 0;
                end;
            'VKK':
                begin
                    ReportForNavSalesLineTotals[1] := 0;
                    ReportForNavSalesLineTotals[2] := 0;
                    with VKK do begin
                        ReportForNavVKKTotals[1] += "Betrag ber.";
                        ReportForNavVKKBuffer[1] := "Betrag ber.";
                        "Betrag ber." := ReportForNavVKKTotals[1];
                        ReportForNavVKKTotals[2] += "DM-Betrag ber.";
                        ReportForNavVKKBuffer[2] := "DM-Betrag ber.";
                        "DM-Betrag ber." := ReportForNavVKKTotals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionVKK_Footer20(VKK);
                        jsonObject.Add('$Footer20$Pre', ReportForNavShowOutput);
                        "Betrag ber." := ReportForNavVKKBuffer[1];
                        "DM-Betrag ber." := ReportForNavVKKBuffer[2];
                    end;
                end;
            'SalesLine':
                begin
                    with "Sales Line" do begin
                        ReportForNavSalesLineTotals[1] += "Betrag ber.";
                        ReportForNavSalesLineBuffer[1] := "Betrag ber.";
                        "Betrag ber." := ReportForNavSalesLineTotals[1];
                        ReportForNavSalesLineTotals[2] += "DM-Betrag ber.";
                        ReportForNavSalesLineBuffer[2] := "DM-Betrag ber.";
                        "DM-Betrag ber." := ReportForNavSalesLineTotals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesLine_Footer22("Sales Line");
                        jsonObject.Add('$Footer22$Pre', ReportForNavShowOutput);
                        "Betrag ber." := ReportForNavSalesLineBuffer[1];
                        "DM-Betrag ber." := ReportForNavSalesLineBuffer[2];
                    end;
                end;
            'DebitorGS':
                begin
                    ReportForNavVKGSKTotals[1] := 0;
                    ReportForNavVKGSKTotals[2] := 0;
                end;
            'VKGSK':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionVKGSK_Body26(VKGSK);
                    jsonObject.Add('$Body26$Pre', ReportForNavShowOutput);
                    with VKGSK do begin
                        ReportForNavVKGSKTotals[1] += "Betrag ber.";
                        ReportForNavVKGSKBuffer[1] := "Betrag ber.";
                        "Betrag ber." := ReportForNavVKGSKTotals[1];
                        ReportForNavVKGSKTotals[2] += "DM-Betrag ber.";
                        ReportForNavVKGSKBuffer[2] := "DM-Betrag ber.";
                        "DM-Betrag ber." := ReportForNavVKGSKTotals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionVKGSK_Footer27(VKGSK);
                        jsonObject.Add('$Footer27$Pre', ReportForNavShowOutput);
                        "Betrag ber." := ReportForNavVKGSKBuffer[1];
                        "DM-Betrag ber." := ReportForNavVKGSKBuffer[2];
                    end;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
