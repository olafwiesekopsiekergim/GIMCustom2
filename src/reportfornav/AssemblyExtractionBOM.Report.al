#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60002 "CCO Assembly Extraction BOM"
{
	Caption = 'Assembly Extraction BOM';
	WordLayout = './Layouts/CCOAssemblyExtractionBOM.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem("Production Order";"Production Order")
		{
			DataItemTableView = sorting(Status, "No.");
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_ProductionOrder; ReportForNavWriteDataItem('ProductionOrder',"Production Order")) {}
			dataitem(KopieSchleife;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_KopieSchleife; ReportForNavWriteDataItem('KopieSchleife',KopieSchleife)) {}
				dataitem(SeiteSchleife;Integer)
				{
					DataItemTableView = sorting(Number) where(Number = const(1));
					column(ReportForNavId_3; 3) {} // Autogenerated by ForNav - Do not delete
					column(ReportForNav_SeiteSchleife; ReportForNavWriteDataItem('SeiteSchleife',SeiteSchleife)) {}
					column(Serial_Nr_serialno; 'Serial-Nr. / serial no.')
					{
						IncludeCaption = false;
					}
					column(STRSUBSTNO_SeitePct1_FORMAT_ReportForNavPageNo_; StrSubstNo('Seite %1', Format(ReportForNav.PagePlaceHolder)))
					{
						IncludeCaption = false;
					}
					column(DueDate_ProductionOrder; "Production Order"."Due Date")
					{
						IncludeCaption = false;
					}
					column(ShipmentDate_VerkZeile; VerkZeile."Shipment Date")
					{
						IncludeCaption = false;
					}
					column(STRSUBSTNO__Pct1__CONVERTSTR_ProductionOrderSourceNo____; StrSubstNo('*%1*', ConvertStr("Production Order"."Source No.", ' ', '_')))
					{
						IncludeCaption = false;
					}
					column(STRSUBSTNO__XX514Pct1__ProductionOrderNo; StrSubstNo('*XX514%1*', "Production Order"."No."))
					{
						IncludeCaption = false;
					}
					column(Abmessung3_Art2; Art2.Abmessung3)
					{
						IncludeCaption = false;
					}
					column(Abmessung2_Art2; Art2.Abmessung2)
					{
						IncludeCaption = false;
					}
					column(Abmessung1_Art2; Art2.Abmessung1)
					{
						IncludeCaption = false;
					}
					column(Bill_toName_VerkKopf; VerkKopf."Bill-to Name")
					{
						IncludeCaption = false;
					}
					column(Sell_toCustomerNo_VerkKopf; VerkKopf."Sell-to Customer No.")
					{
						IncludeCaption = false;
					}
					column(UnitofMeasureCode_ProdOrderLine; ProdOrderLine."Unit of Measure Code")
					{
						IncludeCaption = false;
					}
					column(Quantity_ProductionOrder; "Production Order".Quantity)
					{
						IncludeCaption = false;
					}
					column(Description2_ProductionOrder; "Production Order"."Description 2")
					{
						IncludeCaption = false;
					}
					column(Description_ProductionOrder; "Production Order".Description)
					{
						IncludeCaption = false;
					}
					column(SourceNo_ProductionOrder; "Production Order"."Source No.")
					{
						IncludeCaption = false;
					}
					column(WORKDATE_0_1; Format(WorkDate, 0, 1))
					{
						IncludeCaption = false;
					}
					column(EvtlAuftragsnr_ProductionOrder; "Production Order"."Evtl. Auftragsnr.")
					{
						IncludeCaption = false;
					}
					column(Beschreibung_neu; ProdBOMLine.Description)
					{
					}
					column(No_ProductionOrder; "Production Order"."No.")
					{
						IncludeCaption = false;
					}
					column(RemainingQuantity_ProductionOrder; "Production Order"."Remaining Quantity")
					{
						IncludeCaption = false;
					}
					column(STRSUBSTNO_Montage_EntnahmestucklistePct1_KopieText; StrSubstNo('Montage - Entnahmestückliste %1', KopieText))
					{
						IncludeCaption = false;
					}
					column(FirmaAdr6; FirmaAdr[6])
					{
						IncludeCaption = false;
					}
					column(FirmaAdr5; FirmaAdr[5])
					{
						IncludeCaption = false;
					}
					column(FaxNo_Firmendaten; Firmendaten."Fax No.")
					{
						IncludeCaption = false;
					}
					column(PhoneNo_Firmendaten; Firmendaten."Phone No.")
					{
						IncludeCaption = false;
					}
					column(FirmaAdr4; FirmaAdr[4])
					{
						IncludeCaption = false;
					}
					column(FirmaAdr3; FirmaAdr[3])
					{
						IncludeCaption = false;
					}
					column(FirmaAdr2; FirmaAdr[2])
					{
						IncludeCaption = false;
					}
					column(FirmaAdr1; FirmaAdr[1])
					{
						IncludeCaption = false;
					}
					column(STRSUBSTNO__Pct1__ProductionOrderSourceNo; StrSubstNo('*%1*', "Production Order"."Source No."))
					{
						IncludeCaption = false;
					}
					column(Description2_Art2; Art2."Description 2")
					{
						IncludeCaption = false;
					}
					column(RoutingTan; RoutingTan)
					{
					}
					dataitem(TestCertificate;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = filter(1 ..));
						column(ReportForNavId_35; 35) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_TestCertificate; ReportForNavWriteDataItem('TestCertificate',TestCertificate)) {}
						dataitem(AcceptanceProtocolLine;"Acceptance Protocol Line")
						{
							column(ReportForNavId_36; 36) {} // Autogenerated by ForNav - Do not delete
							column(ReportForNav_AcceptanceProtocolLine; ReportForNavWriteDataItem('AcceptanceProtocolLine',AcceptanceProtocolLine)) {}
							column(Description; AcceptanceProtocolLine.Description)
							{
								IncludeCaption = false;
							}
							column(Unterschrift_signature; 'Unterschrift / signature')
							{
								IncludeCaption = false;
							}
							column(Datum_date; 'Datum / date')
							{
								IncludeCaption = false;
							}
							column(Stichprobengepruft_spottested_; 'Stichproben geprüft/spot tested:')
							{
								IncludeCaption = false;
							}
							column(gebaut_assemled_; 'gebaut / assemled:')
							{
								IncludeCaption = false;
							}
							trigger OnPreDataItem();
							begin
								SetRange("Test Certificate No.", Art2."Acceptance Protocol Code");
								ReportForNav.OnPreDataItem('AcceptanceProtocolLine',AcceptanceProtocolLine);
							end;
							
						}
						trigger OnPreDataItem();
						begin
							AcceptanceProtocolLine.SetRange("Test Certificate No.", Art2."Acceptance Protocol Code");
							AP := false;
							if AcceptanceProtocolLine.FindSet then begin
								if IsFAgruppe then
									TestCertificate.SetRange(Number, 1, "Production Order".Quantity)
								else
									TestCertificate.SetRange(Number, 1);
							end else begin
								FA := true;
								CurrReport.PageNo := 1;
								CurrReport.Break;
							end;
							ReportForNav.OnPreDataItem('TestCertificate',TestCertificate);
						end;
						
						trigger OnAfterGetRecord();
						begin
							AP := true;
						end;
						
						trigger OnPostDataItem();
						begin
							FA := true;
							CurrReport.PageNo := 1;
							if AP /*AND Details*/ then
								ReportForNav.NewPageWithoutTransportTotals;
						
						end;
						
					}
					dataitem("Prod. Order Component";"Prod. Order Component")
					{
						DataItemLink = Status = FIELD(Status), "Prod. Order No." = FIELD("No.");
						DataItemLinkReference = "Production Order";
						DataItemTableView = sorting(Status, "Prod. Order No.", "Prod. Order Line No.", "Line No.");
						column(ReportForNavId_42; 42) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_ProdOrderComponent; ReportForNavWriteDataItem('ProdOrderComponent',"Prod. Order Component")) {}
						column(ProdOrderComponentFIELDCAPTION_UnitofMeasureCode; "Prod. Order Component".FieldCaption("Unit of Measure Code"))
						{
							IncludeCaption = false;
						}
						column(ProdOrderComponentFIELDCAPTION_Description; "Prod. Order Component".FieldCaption(Description))
						{
							IncludeCaption = false;
						}
						column(ProdOrderComponentFIELDCAPTION_ItemNo; "Prod. Order Component".FieldCaption("Item No."))
						{
							IncludeCaption = false;
						}
						column(STRSUBSTNO_Pct1Pct2_Description_ProdBOMDescription; StrSubstNo('%1 %2', Description, ProdBOM.Description))
						{
							IncludeCaption = false;
						}
						column(Description_ProdOrderComponent; "Prod. Order Component".Description)
						{
							IncludeCaption = false;
						}
						column(Abmessung3_Artikel; Artikel.Abmessung3)
						{
							IncludeCaption = false;
						}
						column(Abmessung2_Artikel; Artikel.Abmessung2)
						{
							IncludeCaption = false;
						}
						column(Abmessung1_Artikel; Artikel.Abmessung1)
						{
							IncludeCaption = false;
						}
						column(Inventory_Artikel; Artikel.Inventory)
						{
							IncludeCaption = false;
						}
						column(RemainingQuantity_ProdOrderComponent; "Prod. Order Component"."Remaining Quantity")
						{
							IncludeCaption = false;
						}
						column(V_; '___________')
						{
							IncludeCaption = false;
						}
						column(UnitofMeasureCode_ProdOrderComponent; "Prod. Order Component"."Unit of Measure Code")
						{
							IncludeCaption = false;
						}
						column(ItemNo_ProdOrderComponent; "Prod. Order Component"."Item No.")
						{
							IncludeCaption = false;
						}
						column(V_2; '_________________________________________________________________________________')
						{
							IncludeCaption = false;
						}
						column(STRSUBSTNO_ProdOrderComponent; StrSubstNo('*%1*', Rohteil))
						{
						}
						column(PulverEinfach; Art2."Pulvernr.(einseitig)")
						{
						}
						column(PulverBeide; Art2."Pulvernr.(beidseitig)")
						{
						}
						column(PulverDoppelt; Art2."Pulvernr.(doppelt)")
						{
						}
						column(Rohteil2; Rohteil)
						{
						}
						trigger OnPreDataItem();
						begin
							//SETRANGE(Art, Art::Artikel);
							//SETFILTER("Nr.", '<>%1', '');
							//c/gw/010305: - A13753  oben RAUS unten REIN
							//SETFILTER(Art, '%1|%2', Art::"1", Art::"0");
							if not Details then
								CurrReport.Break;
							ReportForNav.OnPreDataItem('ProdOrderComponent',"Prod. Order Component");
						end;
						
						trigger OnAfterGetRecord();
						begin
							//c/gw/010305: - A13753 hinzugekommen
							//IF (Art2  = Art::"1") AND ("Nr." = '') THEN
							// CurrReport.SKIP;
							if not Artikel.Get("Item No.") then
								Artikel.Init
							else begin
								Artikel.SetRange("Location Filter", ProdOrderLine."Location Code");
								Artikel.CalcFields(Inventory);
							end;
							//IF NOT ProdBOM.GET("Prod. Order Component".) THEN
							ProdBOM.Init;
						end;
						
					}
					trigger OnPreDataItem();
					begin
						ReportForNav.OnPreDataItem('SeiteSchleife',SeiteSchleife);
					end;
				}
				trigger OnPreDataItem();
				begin
					AnzSchleifen := (Abs(AnzKopien) + 1);
					KopieText := '';
					SetRange(Number, 1, AnzSchleifen);
					ReportForNav.OnPreDataItem('KopieSchleife',KopieSchleife);
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number > 1 then
						KopieText := 'KOPIE';
				
				end;
				
				trigger OnPostDataItem();
				begin
					// Druckdaten in Montagekopf zurückschreiben:
					// IF NOT CurrReport.PREVIEW THEN
					//  "VK Packzettelkopf".DruckZähler("VK Packzettelkopf");
				end;
				
			}
			trigger OnPreDataItem();
			begin
				Firmendaten.Get;
				FormatAdr.Company(FirmaAdr, Firmendaten);
				ReportForNav.OnPreDataItem('ProductionOrder',"Production Order");
			end;
			
			trigger OnAfterGetRecord();
			begin
				if not VerkKopf.Get(VerkKopf."document type"::Order, "Evtl. Auftragsnr.") then
					VerkKopf.Init;
				if not VerkZeile.Get(VerkZeile."document type"::Order, "Evtl. Auftragsnr.", "Evtl. Auftragszeilennr.") then
					VerkZeile.Init;
				//due/tr/04.06.03/DUE1.07: Laufkarte gedruckt wird gesetzt
				if not CurrReport.Preview then begin
					if "Run Card Pinted Date" = 0D then begin
						"Production Order"."Run Card Pinted Date" := WorkDate;
						"Production Order"."Run Card Pinted Time" := Time;
						Modify(true);
						Commit;
					end;
				end;
				//c/wa/181103: - Abmessungen andrucken
				if not Art2.Get("Production Order"."Source No.") then
					Art2.Init;
				FA := Art2."Acceptance Protocol Code" = '';
				//FAZeileHolen
				"Production Order".CalcFields("Remaining Quantity");
				ProdOrderLine.SetRange(Status, "Production Order".Status);
				ProdOrderLine.SetRange("Prod. Order No.", "Production Order"."No.");
				ProdOrderLine.SetRange("Item No.", "Production Order"."Source No.");
				if not ProdOrderLine.Find('-') then
					ProdOrderLine.Init;
			
				// >> CC02
				ProdOrderRoutingLine.SetRange(Status, "Production Order".Status);
				ProdOrderRoutingLine.SetRange("Prod. Order No.", "Production Order"."No.");
				if ProdOrderRoutingLine.FindFirst then begin
					RoutingTan := 'Q' + ProdOrderRoutingLine."CCS PM Routing TAN";
				end;
				// << CC02
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(AnzKopien; AnzKopien)
					{
						ApplicationArea = Basic;
						Caption = 'Anzahl Kopien';
					}
					field(Details; Details)
					{
						ApplicationArea = Basic;
						Caption = 'mit Details';
					}
				}
			}
		}

		trigger OnOpenPage()
		begin
			Details := false;
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		ProdOrderLine: Record "Prod. Order Line";
		Art2: Record Item;
		Artikel: Record Item;
		VerkKopf: Record "Sales Header";
		VerkZeile: Record "Sales Line";
		Firmendaten: Record "Company Information";
		ProdBOMLine: Record "Production BOM Line";
		ProdBOM: Record "Production BOM Header";
		"VerkDruckZähler": Codeunit "Sales-Printed";
		FormatAdr: Codeunit "Format Address";
		DebAdr: array[8] of Text[50];
		FirmaAdr: array[8] of Text[50];
		MehrZeilen: Boolean;
		AnzKopien: Integer;
		AnzSchleifen: Integer;
		KopieText: Text[30];
		i: Integer;
		Details: Boolean;
		FA: Boolean;
		AP: Boolean;
		Rohteil: Code[20];
		ProdOrderRoutingLine: Record "Prod. Order Routing Line";
		RoutingTan: Text;

	procedure SetDetails(Value: Boolean)
	begin
		Details := Value;
	end;

	procedure IsFAgruppe(): Boolean
	begin
		//HS,DEPOT,ZELLEN und UTS
		exit(("Production Order"."Production Group Code" = 'HS') or
			 ("Production Order"."Production Group Code" = 'DEPOTS') or
			 ("Production Order"."Production Group Code" = 'ZELLEN') or
			 ("Production Order"."Production Group Code" = 'UTS'));
	end;

	local procedure OnPreSectionSeiteSchleife_Header1(var SeiteSchleife : Record Integer);
	begin
		with SeiteSchleife do begin
			ReportForNavSetShowOutput(not FA);
		end;
	end;
	local procedure OnPreSectionSeiteSchleife_Header2(var SeiteSchleife : Record Integer);
	begin
		with SeiteSchleife do begin
			ReportForNavSetShowOutput(FA);
		end;
	end;
	local procedure OnPreSectionSeiteSchleife_Footer3(var SeiteSchleife : Record Integer);
	begin
		with SeiteSchleife do begin
			ReportForNavSetShowOutput("Production Order"."Production Group Code" = 'PULVERN');
		end;
		"Prod. Order Component".SetRange("Prod. Order Component"."Prod. Order No.", "Production Order"."No.");
		"Prod. Order Component".FindFirst;
		Rohteil := "Prod. Order Component"."Item No.";
	end;
	local procedure OnPreSectionAcceptanceProtocolLine_Body4(var AcceptanceProtocolLine : Record "Acceptance Protocol Line");
	begin
		with AcceptanceProtocolLine do begin
			ReportForNavSetShowOutput(AcceptanceProtocolLine.Type = AcceptanceProtocolLine.Type::Header);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionAcceptanceProtocolLine_Body5(var AcceptanceProtocolLine : Record "Acceptance Protocol Line");
	begin
		with AcceptanceProtocolLine do begin
			ReportForNavSetShowOutput(AcceptanceProtocolLine.Type = AcceptanceProtocolLine.Type::Line);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionAcceptanceProtocolLine_Body6(var AcceptanceProtocolLine : Record "Acceptance Protocol Line");
	begin
		with AcceptanceProtocolLine do begin
			ReportForNavSetShowOutput(AcceptanceProtocolLine.Type = AcceptanceProtocolLine.Type::Footer);
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionProdOrderComponent_Body8(var "Prod. Order Component" : Record "Prod. Order Component");
	begin
		with "Prod. Order Component" do begin
			ReportForNavSetShowOutput(("Item No." = '')); //AND (Level>0));
		end;
	end;
	local procedure OnPreSectionProdOrderComponent_Body9(var "Prod. Order Component" : Record "Prod. Order Component");
	begin
		with "Prod. Order Component" do begin
			ReportForNavSetShowOutput(("Item No." = ''));// AND (Level=0));
		end;
	end;
	local procedure OnPreSectionProdOrderComponent_Body10(var "Prod. Order Component" : Record "Prod. Order Component");
	begin
		with "Prod. Order Component" do begin
			//c/gw/010305: - A13753 hinzugekommen
			ReportForNavSetShowOutput("Item No." <> '');
		end;
	end;
	local procedure OnPreSectionProdOrderComponent_Footer11(var "Prod. Order Component" : Record "Prod. Order Component");
	begin
		with "Prod. Order Component" do begin
			ReportForNavSetShowOutput("Production Order"."Production Group Code" <> 'PULVERN');
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'SeiteSchleife':
				begin
						ReportForNavShowOutput := true; OnPreSectionSeiteSchleife_Header1(SeiteSchleife); jsonObject.Add('$Header1$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionSeiteSchleife_Header2(SeiteSchleife); jsonObject.Add('$Header2$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionSeiteSchleife_Footer3(SeiteSchleife); jsonObject.Add('$Footer3$Pre',ReportForNavShowOutput);
				end;
			'AcceptanceProtocolLine':
				begin
					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$AcceptanceProtocolLine$CurrentKey$Text',AcceptanceProtocolLine.CurrentKey); GlobalLanguage := currLanguage;
					ReportForNavShowOutput := true; OnPreSectionAcceptanceProtocolLine_Body4(AcceptanceProtocolLine); jsonObject.Add('$Body4$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionAcceptanceProtocolLine_Body5(AcceptanceProtocolLine); jsonObject.Add('$Body5$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionAcceptanceProtocolLine_Body6(AcceptanceProtocolLine); jsonObject.Add('$Body6$Pre',ReportForNavShowOutput);
				end;
			'ProdOrderComponent':
				begin
					ReportForNavShowOutput := true; OnPreSectionProdOrderComponent_Body8("Prod. Order Component"); jsonObject.Add('$Body8$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionProdOrderComponent_Body9("Prod. Order Component"); jsonObject.Add('$Body9$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionProdOrderComponent_Body10("Prod. Order Component"); jsonObject.Add('$Body10$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionProdOrderComponent_Footer11("Prod. Order Component"); jsonObject.Add('$Footer11$Pre',ReportForNavShowOutput);
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
