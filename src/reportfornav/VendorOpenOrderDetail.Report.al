#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60027 "CCO Vendor - Open Order Detail"
{
	Caption = 'Vendor - Order Detail';
	WordLayout = './Layouts/CCOVendor-OpenOrderDetail.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(Vendor;Vendor)
		{
			PrintOnlyIfDetail = true;
			RequestFilterFields = "No.", "Search Name", Priority;
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_Vendor; ReportForNavWriteDataItem('Vendor',Vendor)) {}
			column("USERID"; UserId)
			{
				IncludeCaption = false;
			}
			column(COMPANYNAME; COMPANYNAME)
			{
				IncludeCaption = false;
			}
			column(ReportForNavPageNo; Format(ReportForNav.PagePlaceHolder))
			{
				IncludeCaption = false;
			}
			column(STRSUBSTNO_Text000_PeriodText; StrSubstNo(Text000, PeriodText))
			{
				IncludeCaption = false;
			}
			column(TODAY_0_4; Format(Today, 0, 4))
			{
				IncludeCaption = false;
			}
			column(STRSUBSTNO_Pct1_Pct2_VendorTABLECAPTION_VendFilter; StrSubstNo('%1: %2', Vendor.TableCaption, VendFilter))
			{
				IncludeCaption = false;
			}
			column(STRSUBSTNO_Text001_PurchLineFilter; StrSubstNo(Text001, PurchLineFilter))
			{
				IncludeCaption = false;
			}
			column(PurchaseLineFIELDCAPTION_OutstandingQuantity; "Purchase Line".FieldCaption("Outstanding Quantity"))
			{
				IncludeCaption = false;
			}
			column(PurchaseLineFIELDCAPTION_Quantity; "Purchase Line".FieldCaption(Quantity))
			{
				IncludeCaption = false;
			}
			column(PurchaseLineFIELDCAPTION_Description; "Purchase Line".FieldCaption(Description))
			{
				IncludeCaption = false;
			}
			column(PurchaseLineFIELDCAPTION_No; "Purchase Line".FieldCaption("No."))
			{
				IncludeCaption = false;
			}
			column(PurchaseLineFIELDCAPTION_Type; "Purchase Line".FieldCaption(Type))
			{
				IncludeCaption = false;
			}
			column(Name_Vendor; Vendor.Name)
			{
				IncludeCaption = false;
			}
			column(No_Vendor; Vendor."No.")
			{
				IncludeCaption = false;
			}
			dataitem("Purchase Line";"Purchase Line")
			{
				DataItemLink = "Pay-to Vendor No." = FIELD("No."), "Shortcut Dimension 1 Code" = FIELD("Global Dimension 1 Filter"), "Shortcut Dimension 2 Code" = FIELD("Global Dimension 2 Filter");
				DataItemTableView = sorting("Document Type", "Pay-to Vendor No.", "Currency Code") where("Document Type" = const(Order), "Outstanding Quantity" = filter(<> 0));
				RequestFilterFields = "Expected Receipt Date";
				RequestFilterHeading = 'Purchase Order Line';
				column(ReportForNavId_16; 16) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_PurchaseLine; ReportForNavWriteDataItem('PurchaseLine',"Purchase Line")) {}
				column(PlannedReceiptDate_PurchaseLine; "Purchase Line"."Planned Receipt Date")
				{
					IncludeCaption = false;
				}
				column(PromisedReceiptDate_PurchaseLine; "Purchase Line"."Promised Receipt Date")
				{
					IncludeCaption = false;
				}
				column(VendorOrderNo_PurchOrderHeader; PurchOrderHeader."Vendor Order No.")
				{
					IncludeCaption = false;
				}
				column(OutstandingQuantity_PurchaseLine; "Purchase Line"."Outstanding Quantity")
				{
					IncludeCaption = false;
				}
				column(Quantity_PurchaseLine; "Purchase Line".Quantity)
				{
					IncludeCaption = false;
				}
				column(Description_PurchaseLine; "Purchase Line".Description)
				{
					IncludeCaption = false;
				}
				column(No_PurchaseLine; "Purchase Line"."No.")
				{
					IncludeCaption = false;
				}
				column(Type_PurchaseLine; "Purchase Line".Type)
				{
					IncludeCaption = false;
				}
				column(OrderDate_PurchOrderHeader; PurchOrderHeader."Order Date")
				{
					IncludeCaption = false;
				}
				column(No_PurchOrderHeader; PurchOrderHeader."No.")
				{
					IncludeCaption = false;
				}
				trigger OnPreDataItem();
				begin
					ReportForNav.OnPreDataItem('PurchaseLine',"Purchase Line");
				end;
				trigger OnAfterGetRecord();
				begin
					NewOrder := "Document No." <> PurchOrderHeader."No.";
					if NewOrder then
						PurchOrderHeader.Get(PurchOrderHeader."document type"::Order, "Document No.");
					if "Expected Receipt Date" <= WorkDate then
						BackOrderQty := "Outstanding Quantity"
					else
						BackOrderQty := 0;
					Currency.InitRoundingPrecision;
					PurchOrderAmount := ROUND("Outstanding Amount" / (1 + "VAT %" / 100), Currency."Amount Rounding Precision");
					PurchOrderAmountLCY := PurchOrderAmount;
					if "Currency Code" <> '' then begin
						if PurchOrderHeader."Currency Factor" <> 0 then
							PurchOrderAmountLCY :=
							  ROUND(
								CurrExchRate.ExchangeAmtFCYToLCY(
								  WorkDate, PurchOrderHeader."Currency Code",
								  PurchOrderAmountLCY, PurchOrderHeader."Currency Factor"));
						if PrintAmountsInLCY then begin
							"Direct Unit Cost" :=
							  ROUND(
								CurrExchRate.ExchangeAmtFCYToLCY(
								  WorkDate, PurchOrderHeader."Currency Code",
								  "Direct Unit Cost", PurchOrderHeader."Currency Factor"));
							PurchOrderAmount := PurchOrderAmountLCY;
						end;
					end;
					if PurchOrderHeader."Prices Including VAT" then begin
						"Direct Unit Cost" := "Direct Unit Cost" / (1 + "VAT %" / 100);
						"Inv. Discount Amount" := "Inv. Discount Amount" / (1 + "VAT %" / 100);
					end;
					"Inv. Discount Amount" := "Inv. Discount Amount" * "Outstanding Quantity" / Quantity;
					CurrencyCode2 := PurchOrderHeader."Currency Code";
					if PrintAmountsInLCY then
						CurrencyCode2 := '';
					CurrencyTotalBuffer.UpdateTotal(
					  CurrencyCode2,
					  PurchOrderAmount,
					  Counter1,
					  Counter1);
				end;
				
			}
			dataitem(Integer;Integer)
			{
				DataItemTableView = sorting(Number) where(Number = filter(1 ..));
				column(ReportForNavId_28; 28) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_Integer; ReportForNavWriteDataItem('Integer',Integer)) {}
				column(Name_Vendor2; Vendor.Name)
				{
					IncludeCaption = false;
				}
				trigger OnPreDataItem();
				begin
					ReportForNav.OnPreDataItem('Integer',Integer);
				end;
				trigger OnAfterGetRecord();
				begin
					if Number = 1 then
						OK := CurrencyTotalBuffer.Find('-')
					else
						OK := CurrencyTotalBuffer.Next <> 0;
					if not OK then
						CurrReport.Break;
					CurrencyTotalBuffer2.UpdateTotal(
					  CurrencyTotalBuffer."Currency Code",
					  CurrencyTotalBuffer."Total Amount",
					  Counter1,
					  Counter1);
				end;
				
				trigger OnPostDataItem();
				begin
					CurrencyTotalBuffer.DeleteAll;
				end;
				
			}
			trigger OnPreDataItem();
			begin
				ReportForNav.SetNewPagePerRecord('Vendor', PrintOnlyOnePerPage);
				ReportForNav.OnPreDataItem('Vendor',Vendor);
			end;
			
		}
		dataitem(Integer2;Integer)
		{
			DataItemTableView = sorting(Number) where(Number = filter(1 ..));
			column(ReportForNavId_30; 30) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_Integer2; ReportForNavWriteDataItem('Integer2',Integer2)) {}
			trigger OnPreDataItem();
			begin
				ReportForNav.OnPreDataItem('Integer2',Integer2);
			end;
			trigger OnAfterGetRecord();
			begin
				if Number = 1 then
					OK := CurrencyTotalBuffer2.Find('-')
				else
					OK := CurrencyTotalBuffer2.Next <> 0;
				if not OK then
					CurrReport.Break;
			end;
			
			trigger OnPostDataItem();
			begin
				CurrencyTotalBuffer2.DeleteAll;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(PrintAmountsInLCY; PrintAmountsInLCY)
					{
						ApplicationArea = Basic;
						Caption = 'Show Amounts in LCY';
					}
					field(PrintOnlyOnePerPage; PrintOnlyOnePerPage)
					{
						ApplicationArea = Basic;
						Caption = 'New Page per Vendor';
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		VendFilter := Vendor.GetFilters;
		PurchLineFilter := "Purchase Line".GetFilters;
		PeriodText := "Purchase Line".GetFilter("Expected Receipt Date");
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Receiving Date: %1';
		Text001: label 'Purchase Order Line: %1';
		CurrExchRate: Record "Currency Exchange Rate";
		CurrencyTotalBuffer: Record "Currency Total Buffer" temporary;
		CurrencyTotalBuffer2: Record "Currency Total Buffer" temporary;
		PurchOrderHeader: Record "Purchase Header";
		Currency: Record Currency;
		PrintAmountsInLCY: Boolean;
		PeriodText: Text[30];
		PrintOnlyOnePerPage: Boolean;
		VendFilter: Text[250];
		PurchLineFilter: Text[250];
		BackOrderQty: Decimal;
		PurchOrderAmount: Decimal;
		PurchOrderAmountLCY: Decimal;
		NewOrder: Boolean;
		OK: Boolean;
		Counter1: Integer;
		CurrencyCode2: Code[10];

	local procedure OnPreSectionVendor_Header2(var Vendor : Record Vendor);
	begin
		with Vendor do begin
			ReportForNavSetShowOutput(PrintAmountsInLCY);
		end;
	end;
	local procedure OnPreSectionVendor_Header3(var Vendor : Record Vendor);
	begin
		with Vendor do begin
			ReportForNavSetShowOutput((CurrReport.PageNo = 1) and (VendFilter <> ''));
		end;
	end;
	local procedure OnPreSectionVendor_Header4(var Vendor : Record Vendor);
	begin
		with Vendor do begin
			ReportForNavSetShowOutput((CurrReport.PageNo = 1) and (PurchLineFilter <> ''));
		end;
	end;
	local procedure OnPreSectionVendor_Header5(var Vendor : Record Vendor);
	begin
		with Vendor do begin
			ReportForNavSetShowOutput((CurrReport.PageNo = 1) and ((VendFilter <> '') or (PurchLineFilter <> '')));
		end;
	end;
	local procedure OnPreSectionPurchaseLine_Body8(var "Purchase Line" : Record "Purchase Line");
	begin
		with "Purchase Line" do begin
			ReportForNavSetShowOutput((NewOrder) and (PrintAmountsInLCY));
		end;
	end;
	local procedure OnPreSectionPurchaseLine_Body9(var "Purchase Line" : Record "Purchase Line");
	begin
		with "Purchase Line" do begin
			ReportForNavSetShowOutput((not NewOrder) and (PrintAmountsInLCY));
		end;
	end;
	local procedure OnPreSectionPurchaseLine_Body10(var "Purchase Line" : Record "Purchase Line");
	begin
		with "Purchase Line" do begin
			ReportForNavSetShowOutput((NewOrder) and (not PrintAmountsInLCY));
		end;
	end;
	local procedure OnPreSectionPurchaseLine_Body11(var "Purchase Line" : Record "Purchase Line");
	begin
		with "Purchase Line" do begin
			ReportForNavSetShowOutput((not NewOrder) and (not PrintAmountsInLCY));
		end;
	end;
	local procedure OnPreSectionInteger_Body12(var Integer : Record Integer);
	begin
		with Integer do begin
			ReportForNavSetShowOutput(PrintAmountsInLCY);
		end;
	end;
	local procedure OnPreSectionInteger_Body13(var Integer : Record Integer);
	begin
		with Integer do begin
			ReportForNavSetShowOutput(not PrintAmountsInLCY);
		end;
	end;
	local procedure OnPreSectionInteger2_Body15(var Integer2 : Record Integer);
	begin
		with Integer2 do begin
			ReportForNavSetShowOutput(PrintAmountsInLCY);
		end;
	end;
	local procedure OnPreSectionInteger2_Body16(var Integer2 : Record Integer);
	begin
		with Integer2 do begin
			ReportForNavSetShowOutput(not PrintAmountsInLCY);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

		ReportForNavVendorBuffer : Array [1] of Decimal;
		ReportForNavVendorTotals : Array [1] of Decimal;
	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'Vendor':
				begin
					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$Vendor$CurrentKey$Text',Vendor.CurrentKey); GlobalLanguage := currLanguage;
					with Vendor do begin
						ReportForNavVendorTotals[1] += PurchOrderAmountLCY; ReportForNavVendorBuffer[1] := PurchOrderAmountLCY; PurchOrderAmountLCY := ReportForNavVendorTotals[1];
						ReportForNavShowOutput := true; OnPreSectionVendor_Header2(Vendor); jsonObject.Add('$Header2$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionVendor_Header3(Vendor); jsonObject.Add('$Header3$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionVendor_Header4(Vendor); jsonObject.Add('$Header4$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionVendor_Header5(Vendor); jsonObject.Add('$Header5$Pre',ReportForNavShowOutput);
						PurchOrderAmountLCY := ReportForNavVendorBuffer[1]; 
					end;
				end;
			'PurchaseLine':
				begin
					ReportForNavShowOutput := true; OnPreSectionPurchaseLine_Body8("Purchase Line"); jsonObject.Add('$Body8$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionPurchaseLine_Body9("Purchase Line"); jsonObject.Add('$Body9$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionPurchaseLine_Body10("Purchase Line"); jsonObject.Add('$Body10$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionPurchaseLine_Body11("Purchase Line"); jsonObject.Add('$Body11$Pre',ReportForNavShowOutput);
				end;
			'Integer':
				begin
					ReportForNavShowOutput := true; OnPreSectionInteger_Body12(Integer); jsonObject.Add('$Body12$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionInteger_Body13(Integer); jsonObject.Add('$Body13$Pre',ReportForNavShowOutput);
				end;
			'Integer2':
				begin
					ReportForNavShowOutput := true; OnPreSectionInteger2_Body15(Integer2); jsonObject.Add('$Body15$Pre',ReportForNavShowOutput);
					ReportForNavShowOutput := true; OnPreSectionInteger2_Body16(Integer2); jsonObject.Add('$Body16$Pre',ReportForNavShowOutput);
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
