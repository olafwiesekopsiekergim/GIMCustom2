#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60011 "CCO Reminder"
{
    Caption = 'Reminder';
    WordLayout = './Layouts/CCOReminder.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Issued Reminder Header"; "Issued Reminder Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.";
            RequestFilterHeading = 'Reminder';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_IssuedReminderHeader; ReportForNavWriteDataItem('IssuedReminderHeader', "Issued Reminder Header")) { }
            dataitem(Integer; Integer)
            {
                DataItemTableView = sorting(Number) where(Number = const(1));
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Integer; ReportForNavWriteDataItem('Integer', Integer)) { }
                column(CompanyInfoPicture; CompanyInfo.Picture)
                {
                    IncludeCaption = false;
                }
                column(CompanyInfoPicture2; CompanyInfo."Picture 2")
                {
                    IncludeCaption = false;
                }
                column(EMail_SalesPerson; SalesPerson."E-Mail")
                {
                    IncludeCaption = false;
                }
                column(Phone_SalesPerson; SalesPerson."Phone No.")
                {
                    IncludeCaption = false;
                }
                column(Code_SalesPerson; SalesPerson.Code)
                {
                    IncludeCaption = false;
                }
                column(KopfTxt; KopfTxt)
                {
                    IncludeCaption = false;
                }
                column(STRSUBSTNO_Text002_ReportForNavPageNo; StrSubstNo(Text002, ReportForNav.PagePlaceHolder))
                {
                    IncludeCaption = false;
                }
                column(No_IssuedReminderHeader; "Issued Reminder Header"."No.")
                {
                    IncludeCaption = false;
                }
                column(CustomerNo_IssuedReminderHeader_Lbl; "Issued Reminder Header".FieldCaption("Customer No."))
                {
                    IncludeCaption = false;
                }
                column(CustomerNo_IssuedReminderHeader; "Issued Reminder Header"."Customer No.")
                {
                    IncludeCaption = false;
                }
                column(DocumentDate_IssuedReminderHeader; Format("Issued Reminder Header"."Document Date", 0, '<Standard Format,4>'))
                {
                    IncludeCaption = false;
                }
                column(PhoneNo_CompanyInfo; CompanyInfo."Phone No.")
                {
                    IncludeCaption = false;
                }
                column(FaxNo_CompanyInfo; CompanyInfo."Fax No.")
                {
                    IncludeCaption = false;
                }
                column(FirmenAnschr1; FirmenAnschr1)
                {
                    IncludeCaption = false;
                }
                column(CustAddr8; CustAddr[8])
                {
                    IncludeCaption = false;
                }
                column(CustAddr7; CustAddr[7])
                {
                    IncludeCaption = false;
                }
                column(CustAddr6; CustAddr[6])
                {
                    IncludeCaption = false;
                }
                column(CustAddr5; CustAddr[5])
                {
                    IncludeCaption = false;
                }
                column(CustAddr4; CustAddr[4])
                {
                    IncludeCaption = false;
                }
                column(CustAddr3; CustAddr[3])
                {
                    IncludeCaption = false;
                }
                column(CustAddr2; CustAddr[2])
                {
                    IncludeCaption = false;
                }
                column(CustAddr1; CustAddr[1])
                {
                    IncludeCaption = false;
                }
                dataitem(DimensionLoop; Integer)
                {
                    DataItemLinkReference = "Issued Reminder Header";
                    DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                    column(ReportForNavId_53; 53) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_DimensionLoop; ReportForNavWriteDataItem('DimensionLoop', DimensionLoop)) { }
                    column(DimText; DimText)
                    {
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        if not ShowInternalInfo then
                            CurrReport.Break;
                        ReportForNav.OnPreDataItem('DimensionLoop', DimensionLoop);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        if Number = 1 then begin
                            if not PostedDocDim.Find('-') then
                                CurrReport.Break;
                        end else
                            if not Continue then
                                CurrReport.Break;
                        Clear(DimText);
                        Continue := false;
                        repeat
                            OldDimText := DimText;
                            if DimText = '' then
                                DimText := StrSubstNo(
                                  '%1 - %2', PostedDocDim."Dimension Code", PostedDocDim."Dimension Value Code")
                            else
                                DimText :=
                                  StrSubstNo(
                                    '%1; %2 - %3', DimText,
                                    PostedDocDim."Dimension Code", PostedDocDim."Dimension Value Code");
                            if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                DimText := OldDimText;
                                Continue := true;
                                exit;
                            end;
                        until (PostedDocDim.Next = 0);
                    end;

                }
                dataitem("Issued Reminder Line"; "Issued Reminder Line")
                {
                    DataItemLink = "Reminder No." = FIELD("No.");
                    DataItemLinkReference = "Issued Reminder Header";
                    DataItemTableView = sorting("Reminder No.", "Line No.");
                    column(ReportForNavId_55; 55) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_IssuedReminderLine; ReportForNavWriteDataItem('IssuedReminderLine', "Issued Reminder Line")) { }
                    column(WahrCode; WÃ¤hrCode)
                    {
                        IncludeCaption = false;
                    }
                    column(RemainingAmount_IssuedReminderLine; "Issued Reminder Line"."Remaining Amount")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(Description_IssuedReminderLine; "Issued Reminder Line".Description)
                    {
                        IncludeCaption = false;
                    }
                    column(IssuedReminderLineFIELDCAPTION_NoofReminders; "Issued Reminder Line".FieldCaption("No. of Reminders"))
                    {
                        IncludeCaption = false;
                    }
                    column(IssuedReminderLineFIELDCAPTION_DocumentDate; "Issued Reminder Line".FieldCaption("Document Date"))
                    {
                        IncludeCaption = false;
                    }
                    column(IssuedReminderLineFIELDCAPTION_DocumentType; "Issued Reminder Line".FieldCaption("Document Type"))
                    {
                        IncludeCaption = false;
                    }
                    column(IssuedReminderLineFIELDCAPTION_DocumentNo; "Issued Reminder Line".FieldCaption("Document No."))
                    {
                        IncludeCaption = false;
                    }
                    column(IssuedReminderLineFIELDCAPTION_OriginalAmount; "Issued Reminder Line".FieldCaption("Original Amount"))
                    {
                        IncludeCaption = false;
                    }
                    column(IssuedReminderLineFIELDCAPTION_RemainingAmount; "Issued Reminder Line".FieldCaption("Remaining Amount"))
                    {
                        IncludeCaption = false;
                    }
                    column(NoofReminders_IssuedReminderLine; "Issued Reminder Line"."No. of Reminders")
                    {
                        IncludeCaption = false;
                    }
                    column(DocumentType_IssuedReminderLine; "Issued Reminder Line"."Document Type")
                    {
                        IncludeCaption = false;
                    }
                    column(OriginalAmount_IssuedReminderLine; "Issued Reminder Line"."Original Amount")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(DueDate_IssuedReminderLine; "Issued Reminder Line"."Due Date")
                    {
                        IncludeCaption = false;
                    }
                    column(DocumentNo_IssuedReminderLine; "Issued Reminder Line"."Document No.")
                    {
                        IncludeCaption = false;
                    }
                    column(DocumentDate_IssuedReminderLine; "Issued Reminder Line"."Document Date")
                    {
                        IncludeCaption = false;
                    }
                    column(DocText; DocText)
                    {
                        IncludeCaption = false;
                    }
                    column(No_IssuedReminderLine; "Issued Reminder Line"."No.")
                    {
                        IncludeCaption = false;
                    }
                    column(ReminderInterestAmount; ReminderInterestAmount)
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(TotalText; TotalText)
                    {
                        IncludeCaption = false;
                    }
                    column(RemainingAmount_ReminderInterestAmount; "Remaining Amount" + ReminderInterestAmount)
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(VATAmount_IssuedReminderLine_Lbl; "Issued Reminder Line".FieldCaption("VAT Amount"))
                    {
                        IncludeCaption = false;
                    }
                    column(VATAmount_IssuedReminderLine; "Issued Reminder Line"."VAT Amount")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(TotalInclVATText; TotalInclVATText)
                    {
                        IncludeCaption = false;
                    }
                    column(RemainingAmount_ReminderInterestAmount_VATAmount; "Remaining Amount" + ReminderInterestAmount + "VAT Amount")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        if Find('-') then begin
                            StartLineNo := 0;
                            repeat
                                Continue := Type = Type::" ";
                                StartLineNo := "Line No.";
                            until (Next = 0) or not Continue;
                        end;
                        if Find('+') then begin
                            EndLineNo := "Line No." + 1;
                            repeat
                                Continue := Type = Type::" ";
                                if Continue and (Description = '') then
                                    EndLineNo := "Line No.";
                            until (Next(-1) = 0) or not Continue;
                        end;
                        VATAmountLine.DeleteAll;
                        SetFilter("Line No.", '<%1', EndLineNo);
                        ReportForNav.OnPreDataItem('IssuedReminderLine', "Issued Reminder Line");
                    end;

                    trigger OnAfterGetRecord();
                    var
                        lSalesInvHeader: Record "Sales Invoice Header";
                    begin
                        ReminderInterestAmount := 0; // Inserted by ForNAV
                                                     //c/mt/240615 START
                        DocText := '';
                        //c/mt/240615 STOP
                        VATAmountLine.Init;
                        VATAmountLine."VAT Identifier" := "VAT Identifier";
                        VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                        VATAmountLine."Tax Group Code" := "Tax Group Code";
                        VATAmountLine."VAT %" := "VAT %";
                        VATAmountLine."VAT Base" := Amount;
                        VATAmountLine."VAT Amount" := "VAT Amount";
                        VATAmountLine."Amount Including VAT" := Amount + "VAT Amount";
                        VATAmountLine.InsertLine;
                        CustEntry.Init;
                        case Type of
                            Type::"G/L Account":
                                "Remaining Amount" := Amount;
                            Type::"Customer Ledger Entry":
                                begin
                                    ReminderInterestAmount := Amount;
                                    //c/mt/240615 START
                                    //IF CustEntry.GET("Entry No.") THEN;
                                    if CustEntry.Get("Entry No.") then begin
                                        if CustEntry."Document Type" = CustEntry."document type"::Invoice then begin
                                            if lSalesInvHeader.Get(CustEntry."Document No.") then begin
                                                if (lSalesInvHeader."Order No." <> '') then begin
                                                    if CustEntry."External Document No." = '' then
                                                        DocText := StrSubstNo(DUE003, lSalesInvHeader."Order No.")
                                                    else
                                                        DocText := StrSubstNo(DUE004, lSalesInvHeader."Order No.", CustEntry."External Document No.");
                                                end else begin
                                                    if CustEntry."External Document No." <> '' then
                                                        DocText := StrSubstNo(DUE005, CustEntry."External Document No.");
                                                end;
                                            end;
                                        end;
                                    end;
                                    //c/mt/240615 STOP
                                end;
                        end;
                    end;

                }
                dataitem(IssuedReminderLine2; "Issued Reminder Line")
                {
                    DataItemLink = "Reminder No." = FIELD("No.");
                    DataItemLinkReference = "Issued Reminder Header";
                    DataItemTableView = sorting("Reminder No.", "Line No.");
                    column(ReportForNavId_80; 80) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_IssuedReminderLine2; ReportForNavWriteDataItem('IssuedReminderLine2', IssuedReminderLine2)) { }
                    column(Description_IssuedReminderLine22; IssuedReminderLine2.Description)
                    {
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        SetFilter("Line No.", '>=%1', EndLineNo);
                        ReportForNav.OnPreDataItem('IssuedReminderLine2', IssuedReminderLine2);
                    end;

                }
                dataitem(VATCounter; Integer)
                {
                    DataItemTableView = sorting(Number);
                    column(ReportForNavId_82; 82) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter', VATCounter)) { }
                    column(VATBase_VATAmountLine; VATAmountLine."VAT Base")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(VATAmount_VATAmountLine; VATAmountLine."VAT Amount")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(AmountIncludingVAT_VATAmountLine; VATAmountLine."Amount Including VAT")
                    {
                        AutoFormatExpression = "Issued Reminder Line".GetCurrencyCodeFromHeader;
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(VATPct_VATAmountLine; VATAmountLine."VAT %")
                    {
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        if "Issued Reminder Line"."VAT Amount" = 0 then
                            CurrReport.Break;
                        if VATAmountLine.Count < 2 then
                            CurrReport.Break;
                        SetRange(Number, 1, VATAmountLine.Count);
                        ReportForNav.OnPreDataItem('VATCounter', VATCounter);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        VATAmountLine.GetLine(Number);
                    end;

                }
                dataitem(VATCounterLCY; Integer)
                {
                    DataItemTableView = sorting(Number);
                    column(ReportForNavId_87; 87) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_VATCounterLCY; ReportForNavWriteDataItem('VATCounterLCY', VATCounterLCY)) { }
                    column(VALSpecLCYHeader; VALSpecLCYHeader)
                    {
                        IncludeCaption = false;
                    }
                    column(VALExchRate; VALExchRate)
                    {
                        IncludeCaption = false;
                    }
                    column(VALVATBaseLCY; VALVATBaseLCY)
                    {
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(VALVATAmountLCY; VALVATAmountLCY)
                    {
                        AutoFormatType = 1;
                        IncludeCaption = false;
                    }
                    column(VATPct_VATAmountLine2; VATAmountLine."VAT %")
                    {
                        DecimalPlaces = 0 : 5;
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    begin
                        if (not GLSetup."Print VAT specification in LCY") or
                           ("Issued Reminder Header"."Currency Code" = '') or
                           (VATAmountLine.GetTotalVATAmount = 0) then
                            CurrReport.Break;
                        SetRange(Number, 1, VATAmountLine.Count);
                        if GLSetup."LCY Code" = '' then
                            VALSpecLCYHeader := Text011 + Text012
                        else
                            VALSpecLCYHeader := Text011 + Format(GLSetup."LCY Code");
                        CurrExchRate.FindCurrency("Issued Reminder Header"."Posting Date", "Issued Reminder Header"."Currency Code", 1);
                        CustEntry.SetRange("Customer No.", "Issued Reminder Header"."Customer No.");
                        CustEntry.SetRange("Document Type", CustEntry."document type"::Reminder);
                        CustEntry.SetRange("Document No.", "Issued Reminder Header"."No.");
                        if CustEntry.FindFirst then begin
                            CustEntry.CalcFields("Amount (LCY)", Amount);
                            CurrFactor := 1 / (CustEntry."Amount (LCY)" / CustEntry.Amount);
                            VALExchRate := StrSubstNo(Text013, ROUND(1 / CurrFactor * 100, 0.000001), CurrExchRate."Exchange Rate Amount");
                        end else begin
                            CurrFactor := CurrExchRate.ExchangeRate("Issued Reminder Header"."Posting Date", "Issued Reminder Header"."Currency Code");
                            VALExchRate := StrSubstNo(Text013, CurrExchRate."Relational Exch. Rate Amount", CurrExchRate."Exchange Rate Amount");
                        end;
                        ReportForNav.OnPreDataItem('VATCounterLCY', VATCounterLCY);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        VATAmountLine.GetLine(Number);
                        VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / CurrFactor);
                        VALVATAmountLCY := ROUND(VATAmountLine."VAT Amount" / CurrFactor);
                    end;

                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('Integer', Integer);
                end;
            }
            trigger OnPreDataItem();
            begin
                CompanyInfo.Get;
                FormatAddrCodeunit.Company(CompanyAddr, CompanyInfo);
                if MitLogo then
                    CompanyInfo.CalcFields("Picture 2");
                CompanyInfo.CalcFields(Picture);
                ReportForNav.OnPreDataItem('IssuedReminderHeader', "Issued Reminder Header");
            end;

            trigger OnAfterGetRecord();
            var
                lIssuedRemLine: Record "Issued Reminder Line";
                lCustLedgEntry: Record "Cust. Ledger Entry";
            begin
                Clear(SalesPerson); //c/mt/250615
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //DUE
                FirmenAnschr1 := CompanyInfo.Name + '|' + CompanyInfo."Address 2" + '|' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                   CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                FonTxt := CompanyInfo."Phone No.";
                faxTxt := CompanyInfo."Fax No.";
                Clear(KopfTxt);
                //IF MahnstufeR."Text in Mahnung"='' THEN
                KopfTxt := StrSubstNo(DUE001, Format("Issued Reminder Header"."Reminder Level"));
                //ELSE
                //   KopfTxt   := STRSUBSTNO(DUE002,MahnstufeR."Text in Mahnung");
                //c/wa/300399: WÃ¤hrung
                if "Currency Code" = '' then
                    WÃ¤hrCode := GLSetup."LCY Code"
                else
                    WÃ¤hrCode := "Currency Code";
                //DUE Ende
                //c/mt/250615 START
                lIssuedRemLine.SetCurrentkey("Reminder No.", "Line No.");
                lIssuedRemLine.SetRange("Reminder No.", "No.");
                lIssuedRemLine.SetRange(Type, lIssuedRemLine.Type::"Customer Ledger Entry");
                if lIssuedRemLine.FindFirst then begin
                    if lCustLedgEntry.Get(lIssuedRemLine."Entry No.") then begin
                        if SalesPerson.Get(lCustLedgEntry."Salesperson Code") then;
                    end;
                end;
                //c/mt/250615 STOP
                // PostedDocDim.SETRANGE("Table ID",DATABASE::"Issued Reminder Header");
                // PostedDocDim.SETRANGE("Document No.","Issued Reminder Header"."No.");
                PostedDocDim.SetRange("Dimension Set ID", "Issued Reminder Header"."Dimension Set ID");

                //FormatAddr(CustAddr);
                FormatAddrCodeunit.IssuedReminder(CustAddr, "Issued Reminder Header");

                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text000, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text001, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text000, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text001, "Currency Code");
                end;

                if not CurrReport.Preview then begin
                    if LogInteraction then
                        SegManagement.LogDocument(
                          8, "No.", 0, 0, Database::Customer, "Customer No.", '', '', "Posting Description", '');
                    IncrNoPrinted;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                    }
                }
            }
        }

        trigger OnOpenPage()
        var
            DocumentType: Enum "Interaction Log Entry Document Type";
        begin
            LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Rmdr.") <> '';
        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Total %1';
        Text001: label 'Total %1 Incl. VAT';
        Text002: label 'Page %1';
        Anzahl: Integer;
        GLSetup: Record "General Ledger Setup";
        CompanyInfo: Record "Company Information";
        VATAmountLine: Record "VAT Amount Line" temporary;
        PostedDocDim: Record "Dimension Set Entry";
        Language2: Codeunit Language;
        CurrExchRate: Record "Currency Exchange Rate";
        FormatAddrCodeunit: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        CustAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        TotalText: Text[50];
        TotalInclVATText: Text[50];
        ReminderInterestAmount: Decimal;
        EndLineNo: Integer;
        Continue: Boolean;
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        LogInteraction: Boolean;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        VALSpecLCYHeader: Text[80];
        VALExchRate: Text[50];
        CurrFactor: Decimal;
        Text011: label 'VAT Amount Specification in ';
        Text012: label 'Local Currency';
        Text013: label 'Exchange rate: %1/%2';
        CustEntry: Record "Cust. Ledger Entry";
        StartLineNo: Integer;
        "---DUE...": Integer;
        MahnstufeR: Record "Reminder Level";
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        KopfTxt: Text[80];
        MitLogo: Boolean;
        FormOpened: Boolean;
        DUE001: label '%1. Reminder ';
        DUE002: label '%1 Reminder ';
        "WÃ¤hrCode": Code[10];
        FonTxt: Text[30];
        faxTxt: Text[30];
        DocText: Text[250];
        DUE003: label 'Auftrag %1';
        DUE004: label 'Order No. %1   -   Ext. Document No. %2';
        DUE005: label 'Ext. Document No. %1';
        SalesPerson: Record "Salesperson/Purchaser";

    local procedure OnPreSectionInteger_Header2(var Integer: Record Integer);
    begin
        with Integer do begin
            ReportForNavSetShowOutput(CurrReport.PageNo = 1);
        end;
    end;

    local procedure OnPreSectionInteger_Header3(var Integer: Record Integer);
    begin
        with Integer do begin
            ReportForNavSetShowOutput(CurrReport.PageNo > 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop_Body5(var DimensionLoop: Record Integer);
    begin
        with DimensionLoop do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop_Body6(var DimensionLoop: Record Integer);
    begin
        with DimensionLoop do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body8(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := ("Line No." < StartLineNo);
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body9(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := "Line No." = StartLineNo;
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body10(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := Type = Type::" ";
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body11(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := (Type = Type::"Customer Ledger Entry");
        end;
        Anzahl := 0;
        if "Issued Reminder Line"."Document Type".AsInteger() = 1 then
            "Issued Reminder Line"."No. of Reminders" := Anzahl;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body12(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavSetShowOutput(DocText <> '');
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body13(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := ((Type = Type::"G/L Account") and (ShowInternalInfo));
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Body14(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := ((Type = Type::"G/L Account") and (not ShowInternalInfo));
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Footer17(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := ReminderInterestAmount <> 0;
        end;
    end;

    local procedure OnPreSectionIssuedReminderLine_Footer19(var "Issued Reminder Line": Record "Issued Reminder Line");
    begin
        with "Issued Reminder Line" do begin
            ReportForNavShowOutput := "VAT Amount" <> 0
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavIssuedReminderLineBuffer: Array[3] of Decimal;
        ReportForNavIssuedReminderLineTotals: Array[3] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'IssuedReminderHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'Integer':
                begin
                    ReportForNavIssuedReminderLineTotals[1] := 0;
                    ReportForNavIssuedReminderLineTotals[2] := 0;
                    ReportForNavIssuedReminderLineTotals[3] := 0;
                    ReportForNavShowOutput := true;
                    OnPreSectionInteger_Header2(Integer);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionInteger_Header3(Integer);
                    jsonObject.Add('$Header3$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop_Body5(DimensionLoop);
                    jsonObject.Add('$Body5$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop_Body6(DimensionLoop);
                    jsonObject.Add('$Body6$Pre', ReportForNavShowOutput);
                end;
            'IssuedReminderLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body8("Issued Reminder Line");
                    jsonObject.Add('$Body8$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body9("Issued Reminder Line");
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body10("Issued Reminder Line");
                    jsonObject.Add('$Body10$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body11("Issued Reminder Line");
                    jsonObject.Add('$Body11$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body12("Issued Reminder Line");
                    jsonObject.Add('$Body12$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body13("Issued Reminder Line");
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionIssuedReminderLine_Body14("Issued Reminder Line");
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    with "Issued Reminder Line" do begin
                        ReportForNavIssuedReminderLineTotals[1] += "Remaining Amount";
                        ReportForNavIssuedReminderLineBuffer[1] := "Remaining Amount";
                        "Remaining Amount" := ReportForNavIssuedReminderLineTotals[1];
                        ReportForNavIssuedReminderLineTotals[2] += "VAT Amount";
                        ReportForNavIssuedReminderLineBuffer[2] := "VAT Amount";
                        "VAT Amount" := ReportForNavIssuedReminderLineTotals[2];
                        ReportForNavIssuedReminderLineTotals[3] += ReminderInterestAmount;
                        ReportForNavIssuedReminderLineBuffer[3] := ReminderInterestAmount;
                        ReminderInterestAmount := ReportForNavIssuedReminderLineTotals[3];
                        ReportForNavShowOutput := true;
                        OnPreSectionIssuedReminderLine_Footer17("Issued Reminder Line");
                        jsonObject.Add('$Footer17$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionIssuedReminderLine_Footer19("Issued Reminder Line");
                        jsonObject.Add('$Footer19$Pre', ReportForNavShowOutput);
                        "Remaining Amount" := ReportForNavIssuedReminderLineBuffer[1];
                        "VAT Amount" := ReportForNavIssuedReminderLineBuffer[2];
                        ReminderInterestAmount := ReportForNavIssuedReminderLineBuffer[3];
                    end;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
