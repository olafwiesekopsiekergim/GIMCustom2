#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60040 "CCO Purchase Quote DUE"
{
    Caption = 'Quote DUE';
    WordLayout = './Layouts/CCOPurchaseQuoteDUE.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Purchase Header"; "Purchase Header")
        {
            DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const(Quote));
            RequestFilterFields = "No.", "Buy-from Vendor No.", "No. Printed";
            RequestFilterHeading = 'Purchase Quote';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PurchaseHeader; ReportForNavWriteDataItem('PurchaseHeader', "Purchase Header")) { }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(ItemDrawing_Description; '')
                    {
                        IncludeCaption = false;
                    }
                    column(LieferTerminK; LieferTerminK)
                    {
                        IncludeCaption = false;
                    }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 3")
                    {
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(Buy_fromVendorNo_PurchaseHeader; "Purchase Header"."Buy-from Vendor No.")
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_PurchaseHeader; "Purchase Header"."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
                    {
                        IncludeCaption = false;
                    }
                    column(PurchaseHeaderOrderDate_0_7; Format("Purchase Header"."Order Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Telefonnr_BenutzerER; Kundendienst."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; Kundendienst.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_SalesPurchPerson; SalesPurchPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_SalesPurchPerson; SalesPurchPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE001; DUE001)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr8; CustAddr[8])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr7; CustAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_DUE004_PurchaseHeaderNo_PurchaseHeaderDirektliefA; StrSubstNo(DUE004, "Purchase Header"."No."))
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005, Format(ReportForNav.PagePlaceHolder)))
                    {
                        IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Purchase Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_68; 68) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not DocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 %2', DocDim1."Dimension Code", DocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        DocDim1."Dimension Code", DocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (DocDim1.Next = 0);
                        end;

                    }
                    dataitem("Purchase Line"; "Purchase Line")
                    {
                        DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
                        DataItemLinkReference = "Purchase Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
                        column(ReportForNavId_70; 70) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_PurchaseLine; ReportForNavWriteDataItem('PurchaseLine', "Purchase Line")) { }
                        trigger OnPreDataItem();
                        begin
                            CurrReport.Break;
                            ReportForNav.OnPreDataItem('PurchaseLine', "Purchase Line");
                        end;

                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_71; 71) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Purchase Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // >> #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem(RoundLoop; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_73; 73) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_RoundLoop; ReportForNavWriteDataItem('RoundLoop', RoundLoop)) { }
                        column(Description_PurchaseLine; "Purchase Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_PurchaseLine; "Purchase Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(Position_PurchaseLine; "Purchase Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_PurchaseLine; "Purchase Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_PurchaseLine; "Purchase Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(PurchaseLineNo___PurchaseLineVendorItemNo; "Purchase Line"."No." + '   /   ' + "Purchase Line"."Vendor Item No.")
                        {
                            IncludeCaption = false;
                        }
                        column(ArtInfoText; ArtInfoText)
                        {
                            IncludeCaption = false;
                        }
                        column(VATDiscountAmount; -VATDiscountAmount)
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalAmountInclVAT; TotalAmountInclVAT)
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATAmount; VATAmount)
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATBaseAmount; VATBaseAmount)
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalInclVATText; TotalInclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalExclVATText; TotalExclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
                        {
                            IncludeCaption = false;
                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_88; 88) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText3; DimText)
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                // DocDim2.SETRANGE("Table ID",DATABASE::"Purchase Line");
                                // DocDim2.SETRANGE("Document Type","Purchase Line"."Document Type");
                                // DocDim2.SETRANGE("Document No.","Purchase Line"."Document No.");
                                // DocDim2.SETRANGE("Line No.","Purchase Line"."Line No.");
                                DocDim2.SetRange("Dimension Set ID", "Purchase Line"."Dimension Set ID");

                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not DocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 %2', DocDim2."Dimension Code", DocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            DocDim2."Dimension Code", DocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (DocDim2.Next = 0);
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            MoreLines := PurchLine.Find('+');
                            while MoreLines and (PurchLine.Description = '') and (PurchLine."Description 2" = '') and
                                  (PurchLine."No." = '') and (PurchLine.Quantity = 0) and
                                  (PurchLine.Amount = 0) do
                                MoreLines := PurchLine.Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            PurchLine.SetRange("Line No.", 0, PurchLine."Line No.");
                            SetRange(Number, 1, PurchLine.Count);
                            ReportForNav.OnPreDataItem('RoundLoop', RoundLoop);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then
                                PurchLine.Find('-')
                            else
                                PurchLine.Next;
                            "Purchase Line" := PurchLine;
                            if not "Purchase Header"."Prices Including VAT" and
                               (PurchLine."VAT Calculation Type" = PurchLine."vat calculation type"::"Full VAT")
                            then
                                PurchLine."Line Amount" := 0;
                            if (PurchLine.Type = PurchLine.Type::"G/L Account") and (not ShowInternalInfo) then
                                "Purchase Line"."No." := '';
                            ArtInfoZeichn := '';
                            ArtInfoAbm := '';
                            case PurchLine.Type of
                            // PurchLine.Type::Item:
                            //	 begin
                            //		 if not Item.Get(PurchLine."No.") then
                            //			 Item.Init;
                            //		 ItemDrawing.SetRange("Item No.", Item."No.");
                            //		 if not ItemDrawing.FindLast then
                            //			 ItemDrawing.Init;
                            //		 if (ItemDrawing.Description + Item.Abmessung1 + Item.Abmessung2 + Item.Abmessung3) = '' then
                            //			 ItemDrawing.Description := ''
                            //		 else begin
                            //			 if ItemDrawing.Description <> '' then
                            //				 ArtInfoZeichn := StrSubstNo(DUE020, ItemDrawing.Description);
                            //			 if (Item.Abmessung1 + Item.Abmessung2 + Item.Abmessung3) <> '' then
                            //				 ArtInfoAbm := StrSubstNo(DUE021, Item.Abmessung1, Item.Abmessung2, Item.Abmessung3);
                            //			 if (ArtInfoZeichn <> '') and (ArtInfoAbm <> '') then
                            //				 ItemDrawing.Description := StrSubstNo('%1 - %2', ArtInfoZeichn, ArtInfoAbm)
                            //			 else
                            //				 if (ArtInfoZeichn <> '') then
                            //					 ItemDrawing.Description := ArtInfoZeichn
                            //				 else
                            //					 ItemDrawing.Description := ArtInfoAbm;
                            //		 end;
                            //	 end;
                            // else
                            //	 ItemDrawing.Description := '';
                            end;
                        end;

                        trigger OnPostDataItem();
                        begin
                            PurchLine.DeleteAll;
                        end;

                    }
                    dataitem(VATCounter; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_90; 90) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter', VATCounter)) { }
                        column(InvoiceDiscountAmount_VATAmountLine; VATAmountLine."Invoice Discount Amount")
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(InvDiscBaseAmount_VATAmountLine; VATAmountLine."Inv. Disc. Base Amount")
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(LineAmount_VATAmountLine; VATAmountLine."Line Amount")
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATAmount_VATAmountLine; VATAmountLine."VAT Amount")
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATBase_VATAmountLine; VATAmountLine."VAT Base")
                        {
                            AutoFormatExpression = "Purchase Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATIdentifier_VATAmountLine; VATAmountLine."VAT Identifier")
                        {
                            IncludeCaption = false;
                        }
                        column(VATPct_VATAmountLine; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if VATAmount = 0 then
                                CurrReport.Break;
                            if VATAmountLine.Count < 2 then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            ReportForNav.OnPreDataItem('VATCounter', VATCounter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                        end;

                    }
                    dataitem(VATCounterLCY; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_98; 98) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounterLCY; ReportForNavWriteDataItem('VATCounterLCY', VATCounterLCY)) { }
                        column(VALSpecLCYHeader; VALSpecLCYHeader)
                        {
                            IncludeCaption = false;
                        }
                        column(VALExchRate; VALExchRate)
                        {
                            IncludeCaption = false;
                        }
                        column(VALVATBaseLCY; VALVATBaseLCY)
                        {
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VALVATAmountLCY; VALVATAmountLCY)
                        {
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATIdentifier_VATAmountLine2; VATAmountLine."VAT Identifier")
                        {
                            IncludeCaption = false;
                        }
                        column(VATPct_VATAmountLine2; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if (not GLSetup."Print VAT specification in LCY") or
                               ("Purchase Header"."Currency Code" = '') or
                               (VATAmountLine.GetTotalVATAmount = 0) then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            if GLSetup."LCY Code" = '' then
                                VALSpecLCYHeader := Text007 + Text008
                            else
                                VALSpecLCYHeader := Text007 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Purchase Header"."Posting Date", "Purchase Header"."Currency Code", 1);
                            VALExchRate := StrSubstNo(Text009, CurrExchRate."Relational Exch. Rate Amount", CurrExchRate."Exchange Rate Amount");
                            ReportForNav.OnPreDataItem('VATCounterLCY', VATCounterLCY);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                               "Purchase Header"."Posting Date", "Purchase Header"."Currency Code",
                                               VATAmountLine."VAT Base", "Purchase Header"."Currency Factor"));
                            VALVATAmountLCY := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                                                 "Purchase Header"."Posting Date", "Purchase Header"."Currency Code",
                                                 VATAmountLine."VAT Amount", "Purchase Header"."Currency Factor"));
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_105; 105) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        column(Description_ShipmentMethod; ShipmentMethod.Description)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_PaymentTerms; PaymentTerms.Description)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_109; 109) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
                        trigger OnPreDataItem();
                        begin
                            if "Purchase Header"."Buy-from Vendor No." = "Purchase Header"."Pay-to Vendor No." then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total2', Total2);
                        end;

                    }
                    dataitem(Total3; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_110; 110) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total3; ReportForNavWriteDataItem('Total3', Total3)) { }
                        trigger OnPreDataItem();
                        begin
                            if ("Purchase Header"."Sell-to Customer No." = '') and (ShipToAddr[1] = '') then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total3', Total3);
                        end;

                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_111; 111) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Purchase Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin
                    Clear(PurchLine);
                    Clear(PurchPost);
                    PurchLine.DeleteAll;
                    VATAmountLine.DeleteAll;
                    PurchPost.GetPurchLines("Purchase Header", PurchLine, 0);
                    PurchLine.CalcVATAmountLines(0, "Purchase Header", PurchLine, VATAmountLine);
                    PurchLine.UpdateVATOnLines(0, "Purchase Header", PurchLine, VATAmountLine);
                    VATAmount := VATAmountLine.GetTotalVATAmount;
                    VATBaseAmount := VATAmountLine.GetTotalVATBase;
                    VATDiscountAmount :=
                      VATAmountLine.GetTotalVATDiscount("Purchase Header"."Currency Code", "Purchase Header"."Prices Including VAT");
                    TotalAmountInclVAT := VATAmountLine.GetTotalAmountInclVAT;
                    if Number > 1 then
                        CopyText := Text003;


                    CompanyInfo.CalcFields(Picture, "Picture 3");
                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        PurchCountPrinted.Run("Purchase Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                EMailTxt := '';
                wwwTxt := '';
                if MitLogo then;
                ReportForNav.OnPreDataItem('PurchaseHeader', "Purchase Header");
            end;

            trigger OnAfterGetRecord();
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //DUE
                //"Purchase Header".CALCFIELDS("Direct Job Shipment");//Direktlief. Auftragsnummern
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter."Address 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get(Sachbearbeiter) then
                    Clear(BenutzerER);
                CompanyInfo.Get;
                //DUE
                // DocDim1.SETRANGE("Table ID",DATABASE::"Purchase Header");
                // DocDim1.SETRANGE("Document Type","Purchase Header"."Document Type");
                // DocDim1.SETRANGE("Document No.","Purchase Header"."No.");
                DocDim1.SetRange("Dimension Set ID", "Purchase Header"."Dimension Set ID");

                if "Purchaser Code" = '' then begin
                    SalesPurchPerson.Init;
                    PurchaserText := '';
                end else begin
                    SalesPurchPerson.Get("Purchaser Code");
                    PurchaserText := Text000
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text006, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text001, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text002, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text006, "Currency Code");
                end;
                FormatAddr.PurchHeaderBuyFrom(BuyFromAddr, "Purchase Header");
                if ("Purchase Header"."Buy-from Vendor No." <> "Purchase Header"."Pay-to Vendor No.") then;
                //FormatAddr.PurchHeaderPayTo(VendAddr,"Purchase Header");
                FormatAddr.PurchHeaderBuyFrom(CustAddr, "Purchase Header");
                if "Payment Terms Code" = '' then
                    PaymentTerms.Init
                else
                    PaymentTerms.Get("Payment Terms Code");
                if "Shipment Method Code" = '' then
                    ShipmentMethod.Init
                else
                    ShipmentMethod.Get("Shipment Method Code");
                FormatAddr.PurchHeaderShipTo(ShipToAddr, "Purchase Header");
                if not CurrReport.Preview then begin
                    if ArchiveDocument then
                        ArchiveManagement.StorePurchDocument("Purchase Header", LogInteraction);
                    if LogInteraction then begin
                        CalcFields("No. of Archived Versions");
                        SegManagement.LogDocument(
                          13, "No.", "Doc. No. Occurrence", "No. of Archived Versions", Database::Vendor, "Buy-from Vendor No.",
                          "Purchaser Code", '', "Posting Description", '');
                    end;
                end;
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    WährTxt := GLSetup."LCY Code";
                end else begin
                    WährTxt := "Currency Code";
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(ArchiveDocument; ArchiveDocument)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Archive Document';

                        trigger OnValidate()
                        begin
                            if not ArchiveDocument then
                                LogInteraction := false;
                        end;
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';

                        trigger OnValidate()
                        begin
                            if LogInteraction then
                                ArchiveDocument := true;

                        end;
                    }
                }
            }
        }

        trigger OnOpenPage()
        var
            DocumentType: Enum "Interaction Log Entry Document Type";
        begin
            ArchiveDocument := ArchiveManagement.PurchaseDocArchiveGranule;
            LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Purch. Ord.") <> '';
        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        CompanyInfo.Get;
        CompanyInfo.CalcFields(Picture, "Picture 3");//, Logo);
                                                     ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
        // MitLogo := TRUE;
        ///AW End
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Purchaser';
        Text001: label 'Total %1';
        Text002: label 'Total %1 Incl. VAT';
        Text003: label 'COPY';
        Text004: label 'Order %1';
        Text005: label 'Page %1';
        Text006: label 'Total %1 Excl. VAT';
        //ItemDrawing: Record UnknownRecord5013401;
        GLSetup: Record "General Ledger Setup";
        CompanyInfo: Record "Company Information";
        ShipmentMethod: Record "Shipment Method";
        PaymentTerms: Record "Payment Terms";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        VATAmountLine: Record "VAT Amount Line" temporary;
        PurchLine: Record "Purchase Line" temporary;
        DocDim1: Record "Dimension Set Entry";
        DocDim2: Record "Dimension Set Entry";
        RespCenter: Record "Responsibility Center";
        Language2: Codeunit Language;
        CurrExchRate: Record "Currency Exchange Rate";
        PurchCountPrinted: Codeunit "Purch.Header-Printed";
        FormatAddr: Codeunit "Format Address";
        PurchPost: Codeunit "Purch.-Post";
        ArchiveManagement: Codeunit ArchiveManagement;
        SegManagement: Codeunit SegManagement;
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        BuyFromAddr: array[8] of Text[50];
        PurchaserText: Text[30];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        TotalText: Text[50];
        TotalInclVATText: Text[50];
        TotalExclVATText: Text[50];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        ArchiveDocument: Boolean;
        LogInteraction: Boolean;
        VATAmount: Decimal;
        VATBaseAmount: Decimal;
        VATDiscountAmount: Decimal;
        TotalAmountInclVAT: Decimal;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        VALSpecLCYHeader: Text[80];
        VALExchRate: Text[50];
        Text007: label 'VAT Amount Specification in ';
        Text008: label 'Local Currency';
        Text009: label 'Exchange rate: %1/%2';
        DUE001: label 'Ship-to Address:';
        DUE002: label 'E-mail:';
        DUE003: label 'Web:';
        DUE004: label 'Quote No. %1';
        DUE005: label 'Please state this no. on requests and orders.';
        DUE006: label 'We qote to our known conditions and subject to technical changes.';
        DUE007: label 'Unit Price';
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'It applies at the time of the supply the valid value added tax.';
        DUE017: label 'We hope that our offer assures to you. With all suggestions for improvement and further inquiries we are to you gladly ';
        DUE018: label 'at the disposal and assure to you in the case of order a correct execution.';
        DUE019: label 'Best regards';
        "---DUE...": Integer;
        BenutzerER: Record "User Setup";
        DebitorR: Record Customer;
        ZeilenDuplikatRecSet: Record "Sales Line";
        Kundendienst: Record "Salesperson/Purchaser";
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WährTxt": Text[10];
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        LieferTerminK: Text[20];
        LieferTerminZ: Text[30];
        AusgKalkStatus: Text[30];
        AusgAngKalkStatus: Text[30];
        "AusgÜbSchrEinzelpreis/P.E.": Text[30];
        MitLogo: Boolean;
        FormOpened: Boolean;
        verwenden: Boolean;
        FrachtJN: Boolean;
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        GesKorrSumme: Decimal;
        BelegZwNetto: Decimal;
        AktuellerPosWert: array[3] of Decimal;
        "xPos.-Zus.-Zähl-Summen drucken": Boolean;
        "ZusammenzählungsText": Text[50];
        "NächsterZusammenzählungsText": Text[50];
        "PosZusammenzählungsSumme": array[3] of Decimal;
        "LetzterZusammenzählungsText": Text[50];
        "LetztePosZusammenzählungsSumme": array[3] of Decimal;
        AusgVKPreis: Decimal;
        "AusgWährTxt": Text[10];
        AusgBetragRechnsUndRabBetrag: Decimal;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        ArtInfoText: Text[120];
        ArtInfoZeichn: Text[80];
        ArtInfoAbm: Text[80];
        Item: Record Item;
        DUE020: label 'Zchg-Nr. %1';
        DUE021: label 'Abm. %1 x %2 x %3';
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";
        TempTMLine: Record "CCS TM Line Document" temporary;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionPageLoop_Header2(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput(CurrReport.PageNo <= 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body8(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body9(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body13(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput((PurchLine.Type.AsInteger() = 0));// AND
                                                                        // ("Purchase Line".Schriftattribut<>"Purchase Line".Schriftattribut::fett));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body14(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput((PurchLine.Type.AsInteger() = 0));// AND
                                                                        // ("Purchase Line".Schriftattribut="Purchase Line".Schriftattribut::fett));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body15(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput("Purchase Line".Type = "Purchase Line".Type::"G/L Account");
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body16(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Purchase Line".Type = "Purchase Line".Type::Item) and
                                  not FrachtJN);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Body17(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(("Purchase Line".Type = "Purchase Line".Type::Item) and
                                  (not FrachtJN));// and
                                                  //(ItemDrawing.Description <> ''));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer20(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(PurchLine."Inv. Discount Amount" <> 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer21(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(VATAmount = 0);
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer22(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(not "Purchase Header"."Prices Including VAT" and (VATAmount <> 0));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer23(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput(
              (VATDiscountAmount <> 0) and (VATAmount <> 0) and
              "Purchase Header"."Prices Including VAT" and ("Purchase Header"."VAT Base Discount %" <> 0));
        end;
    end;

    local procedure OnPreSectionRoundLoop_Footer24(var RoundLoop: Record Integer);
    begin
        with RoundLoop do begin
            ReportForNavSetShowOutput("Purchase Header"."Prices Including VAT" and (VATAmount <> 0));
        end;
    end;

    local procedure OnPreSectionTotal3_Body39(var Total3: Record Integer);
    begin
        with Total3 do begin
            ReportForNavShowOutput := "Purchase Header"."Sell-to Customer No." <> '';
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavRoundLoopBuffer: Array[2] of Decimal;
        ReportForNavRoundLoopTotals: Array[2] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'PurchaseHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'PageLoop':
                begin
                    ReportForNavRoundLoopTotals[1] := 0;
                    ReportForNavRoundLoopTotals[2] := 0;
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header2(PageLoop);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop1':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body8(DimensionLoop1);
                    jsonObject.Add('$Body8$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body9(DimensionLoop1);
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                end;
            'RoundLoop':
                begin
                    values := 'PurchaseLine';
                    ReportForNav.AddAdditionalValues(jsonObject, values, "Purchase Line");
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body13(RoundLoop);
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body14(RoundLoop);
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body15(RoundLoop);
                    jsonObject.Add('$Body15$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body16(RoundLoop);
                    jsonObject.Add('$Body16$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionRoundLoop_Body17(RoundLoop);
                    jsonObject.Add('$Body17$Pre', ReportForNavShowOutput);
                    with RoundLoop do begin
                        ReportForNavRoundLoopTotals[1] += PurchLine."Line Amount";
                        ReportForNavRoundLoopBuffer[1] := PurchLine."Line Amount";
                        PurchLine."Line Amount" := ReportForNavRoundLoopTotals[1];
                        ReportForNavRoundLoopTotals[2] += PurchLine."Inv. Discount Amount";
                        ReportForNavRoundLoopBuffer[2] := PurchLine."Inv. Discount Amount";
                        PurchLine."Inv. Discount Amount" := ReportForNavRoundLoopTotals[2];
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer20(RoundLoop);
                        jsonObject.Add('$Footer20$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer21(RoundLoop);
                        jsonObject.Add('$Footer21$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer22(RoundLoop);
                        jsonObject.Add('$Footer22$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer23(RoundLoop);
                        jsonObject.Add('$Footer23$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionRoundLoop_Footer24(RoundLoop);
                        jsonObject.Add('$Footer24$Pre', ReportForNavShowOutput);
                        PurchLine."Line Amount" := ReportForNavRoundLoopBuffer[1];
                        PurchLine."Inv. Discount Amount" := ReportForNavRoundLoopBuffer[2];
                    end;
                end;
            'Total3':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionTotal3_Body39(Total3);
                    jsonObject.Add('$Body39$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
