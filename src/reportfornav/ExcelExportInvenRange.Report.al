#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60039 "CCO Excel Export Inven. Range"
{
	WordLayout = './Layouts/CCOExcelExportInven.Range.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(Item;Item)
		{
			DataItemTableView = sorting("No.");
			RequestFilterFields = "No.";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_Item; ReportForNavWriteDataItem('Item',Item)) {}
			column("USERID"; UserId)
			{
			}
			column(ReportForNavPageNo; Format(ReportForNav.PagePlaceHolder))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(TODAY_0_4; Format(Today, 0, 4))
			{
			}
			column(ValueEntryFIELDCAPTION_ItemNo; "Value Entry".FieldCaption("Item No."))
			{
			}
			dataitem(Location;Location)
			{
				RequestFilterFields = "Code";
				column(ReportForNavId_7; 7) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_Location; ReportForNavWriteDataItem('Location',Location)) {}
				dataitem("Value Entry";"Value Entry")
				{
					DataItemTableView = sorting("Item No.", "Valuation Date", "Location Code", "Variant Code") order(ascending);
					column(ReportForNavId_8; 8) {} // Autogenerated by ForNav - Do not delete
					column(ReportForNav_ValueEntry; ReportForNavWriteDataItem('ValueEntry',"Value Entry")) {}
					column(Reichweite; _Reichweite)
					{
					}
					column(VerkaufMenge; _VerkaufMenge)
					{
					}
					column(VerbrauchFertigungMenge; _VerbrauchFertigungMenge)
					{
					}
					column(BewertLagBestZumEinstPreis; _BewertLagBestZumEinstPreis)
					{
					}
					column(Code_Location; Location.Code)
					{
					}
					column(InventoryPostingGroup_Item; Item."Inventory Posting Group")
					{
					}
					column(GenProdPostingGroup_Item; Item."Gen. Prod. Posting Group")
					{
					}
					column(Name_Location; Location.Name)
					{
					}
					column(LagerbestandStichtag; _LagerbestandStichtag)
					{
					}
					column(Einstandspreis; _Einstandspreis)
					{
					}
					column(Description_Item; Item.Description)
					{
					}
					column(ItemNo_ValueEntry; "Value Entry"."Item No.")
					{
					}
					trigger OnPreDataItem();
					begin
						SetRange("Item No.", Item."No.");
						SetFilter("Location Code", Location.Code);
						SetFilter("Valuation Date", StrSubstNo('..%1', Stichtag));
						ReportForNav.OnPreDataItem('ValueEntry',"Value Entry");
					end;
					
					trigger OnAfterGetRecord();
					begin
						Find('+');
						CalcSums("Cost Amount (Actual)");
						_BewertLagBestZumEinstPreis := "Cost Amount (Actual)";
						_Einstandspreis := "Cost Amount (Actual)" / _LagerbestandStichtag;
						_VerbrauchFertigungMenge := Get_VerbrauchFertigungMenge(Item."No.", Location.Code, Zeitraum);
						_VerkaufMenge := Get_VerkaufMenge(Item."No.", Location.Code, Zeitraum);
						_Reichweite := Get_Reichweite;
					end;
					
				}
				trigger OnPreDataItem();
				begin
					ReportForNav.OnPreDataItem('Location',Location);
				end;
				trigger OnAfterGetRecord();
				begin
					Item.SetFilter("Location Filter", Location.Code);
					Item.CalcFields("Net Change");
					if Item."Net Change" = 0 then
						CurrReport.Skip
					else
						_LagerbestandStichtag := Item."Net Change";
				end;
				
			}
			trigger OnPreDataItem();
			begin
				Item.SetFilter("Date Filter", StrSubstNo('..%1', Stichtag));
				ReportForNav.OnPreDataItem('Item',Item);
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(Output; Output)
					{
						ApplicationArea = Basic;
						Caption = 'Output';
					}
					field(Stichtag; Stichtag)
					{
						ApplicationArea = Basic;
						Caption = 'Stichtag';
					}
					field(Zeitraum; Zeitraum)
					{
						ApplicationArea = Basic;
						Caption = 'Zeitraum';
					}
					field(_Tage; _Tage)
					{
						ApplicationArea = Basic;
						Caption = 'das sind Tage:';
					}
				}
			}
		}

		trigger OnInit()
		begin
			Stichtag := Today;
			Zeitraum := StrSubstNo('%1%2%3', Format(CalcDate('<-1M>', Today + 1)), '..', Today);
			Init_Zeitraum(Zeitraum);
			_Tage := Init_Tage(Zeitraum);
		end;

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		if Output = Output::"+ Excel" then
			ExcelBufferToExcel;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Stichtag: Date;
		Zeitraum: Text[30];
		_Tage: Integer;
		"- OutputFields ---------------": Char;
		_Einstandspreis: Decimal;
		_LagerbestandStichtag: Decimal;
		_BewertLagBestZumEinstPreis: Decimal;
		_VerbrauchFertigungMenge: Decimal;
		_VerkaufMenge: Decimal;
		_Reichweite: Decimal;
		"-----------------------XlGlobs": Char;
		Output: Option Normal,"+ Excel";
		ExcelBufferTempRec: Record "Excel Buffer" temporary;
		ExcelBufferCellArr: array[256] of Text[1024];
		ExcelBufferSubHeaderCellArr: array[1, 12] of Text[1024];
		ExcelBufferSubHeaderLineCount: Integer;
		ExcelBufferLineCount: Integer;

	procedure Init_Zeitraum(var Text: Text[1024])
	var
		C1: Codeunit 41;
		D1: Date;
	begin
		MakeDateText(Text);
		if StrPos(Text, '..') = 0 then
			if Evaluate(D1, Text) then
				Text := Format(D1);
		if StrPos(Text, '..') <> 0 then begin
			if Evaluate(D1, CopyStr(Text, 1, StrPos(Text, '..') - 1)) then
				Text := Format(D1) + CopyStr(Text, StrPos(Text, '..'));
			if Evaluate(D1, CopyStr(Text, StrPos(Text, '..') + 2)) then
				Text := CopyStr(Text, 1, StrPos(Text, '..') + 1) + Format(D1);
		end;
		C1.MakeDateFilter(Text);
	end;

	local procedure MakeDateText(VAR DateText: Text[250]): Integer
	var
		Date: Date;
		PartOfText: Text[250];
		Position: Integer;
		Length: Integer;
		TodayText: Label 'TODAY';//	HEUTIGESDATUM
		WorkdateText: Label 'WORKDATE';//	ARBEITSDATUM
	begin
		Position := 1;
		Length := STRLEN(DateText);
		ReadCharacter(' ', DateText, Position, Length);
		IF NOT FindText(PartOfText, DateText, Position, Length) THEN
			EXIT(0);
		CASE PartOfText OF
			COPYSTR('TODAY', 1, STRLEN(PartOfText)), COPYSTR(TodayText, 1, STRLEN(PartOfText)):
				Date := TODAY;
			COPYSTR('WORKDATE', 1, STRLEN(PartOfText)), COPYSTR(WorkdateText, 1, STRLEN(PartOfText)):
				Date := WORKDATE;
			ELSE
				EXIT(0);
		END;
		Position := Position + STRLEN(PartOfText);
		ReadCharacter(' ', DateText, Position, Length);
		IF Position > Length THEN BEGIN
			DateText := FORMAT(Date);
			EXIT(0);
		END;
		EXIT(Position);
	end;

	LOCAL procedure ReadCharacter(Character: Text[50]; Text: Text; VAR Position: Integer; Length: Integer)
	begin
		WHILE (Position <= Length) AND (STRPOS(Character, UPPERCASE(COPYSTR(Text, Position, 1))) <> 0) DO
			Position := Position + 1;
	end;

	LOCAL procedure FindText(VAR PartOfText: Text[250]; Text: Text; Position: Integer; Length: Integer): Boolean
	var
		Position2: Integer;
		AlphabetText: label 'ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ', Locked = true;
	begin
		Position2 := Position;
		ReadCharacter(AlphabetText, Text, Position, Length);
		IF Position = Position2 THEN
			EXIT(FALSE);
		PartOfText := UPPERCASE(COPYSTR(Text, Position2, Position - Position2));
		EXIT(TRUE);
	end;

	procedure Init_Tage(lZeitraum: Text[30]): Integer
	var
		lDateRec: Record Date;
	begin
		with lDateRec do begin
			SetRange("Period Type", "period type"::Date);
			SetFilter("Period Start", lZeitraum);
			exit(Count);
		end;
	end;

	procedure Get_VerbrauchFertigungMenge(pArtikelnr: Code[20]; pLagerortcode: Code[10]; pZeitraum: Text[30]) RetVal: Decimal
	var
		lItemRec: Record Item;
	begin
		with lItemRec do begin
			Get(pArtikelnr);
			SetFilter("Location Filter", pLagerortcode);
			SetFilter("Date Filter", pZeitraum);
			CalcFields("Consumption (Qty.)");  // Verbrauch
			RetVal := "Consumption (Qty.)";
		end;
	end;

	procedure Get_VerkaufMenge(pArtikelnr: Code[20]; pLagerortcode: Code[10]; pZeitraum: Text[30]) RetVal: Decimal
	var
		lItemRec: Record Item;
	begin
		with lItemRec do begin
			Get(pArtikelnr);
			SetFilter("Location Filter", pLagerortcode);
			SetFilter("Date Filter", pZeitraum);
			CalcFields("Sales (Qty.)");  // Verkauf
			RetVal := "Sales (Qty.)";
		end;
	end;

	procedure Get_Reichweite() RetVal: Integer
	var
		lTage: Integer;
	begin
		if _VerbrauchFertigungMenge + _VerkaufMenge > 0 then begin
			lTage := ROUND(_LagerbestandStichtag / ((_VerbrauchFertigungMenge + _VerkaufMenge) / _Tage), 1.0, '<');
			if lTage > 9999 then
				lTage := 9999;  // maximale Zahl fürs CALCDATE
								//RetVal := CALCDATE(STRSUBSTNO('<+%1D>', lTage), Stichtag);
			RetVal := lTage;
		end else
			RetVal := 9999;
	end;

	procedure "-----------------------xlfuncs"()
	begin
	end;

	procedure InitExcelSubHeader(): Integer
	var
		RowNo: Integer;
		ColNo: Integer;
	begin
		// BEGIN
		//  ExcelBufferSubHeaderCellArr[1,1] := 'Artikelnr.';
		//  ExcelBufferSubHeaderCellArr[1,2] := 'Beschreibung';
		//  ExcelBufferSubHeaderCellArr[1,3] := 'Einstandspreis';
		//  ExcelBufferSubHeaderCellArr[1,4] := 'Lagerbestand (Stichtag)';
		//  ExcelBufferSubHeaderCellArr[1,5] := 'Lagerort';
		//  ExcelBufferSubHeaderCellArr[1,6] := 'Produktbuchungsgruppe';
		//  //c/mt/030614 START
		//  //ExcelBufferSubHeaderCellArr[1,7] := 'Lagerbuchungsgruppe';
		//  ExcelBufferSubHeaderCellArr[1,7] := 'Artikelkategoriencode';
		//  //c/mt/030614 STOP
		//  ExcelBufferSubHeaderCellArr[1,8] := 'Lagerortcode';
		//  ExcelBufferSubHeaderCellArr[1,9] := 'Bewertung Lag-best. z. Einstpr.';
		//  ExcelBufferSubHeaderCellArr[1,10] := 'Verbauch Fertigung Menge';
		//  ExcelBufferSubHeaderCellArr[1,11] := 'Verkauf Menge';
		//  ExcelBufferSubHeaderCellArr[1,12] := 'Reichweite';
		// END;
		// FOR RowNo := 1 TO ARRAYLEN(ExcelBufferSubHeaderCellArr,1) DO BEGIN
		//  FOR ColNo := 1 TO ARRAYLEN(ExcelBufferSubHeaderCellArr,2) DO
		//	ExcelBufferCellArr[ColNo] := ExcelBufferSubHeaderCellArr[RowNo, ColNo];
		//  InToExcelBufferCell(RowNo, ExcelBufferCellArr);
		// END;
		// EXIT(ARRAYLEN(ExcelBufferSubHeaderCellArr,1));
	end;

	procedure InitExcelBufferLine(ExcelBufferCellArr: array[256] of Text[1024])
	var
		RowNo: Integer;
		ColNo: Integer;
	begin
		// IF ExcelBufferSubHeaderLineCount = 0 THEN BEGIN
		//  ExcelBufferSubHeaderLineCount := InitExcelSubHeader;
		//  ExcelBufferLineCount := ExcelBufferSubHeaderLineCount;
		// END;
		// ExcelBufferLineCount += 1;
		// InToExcelBufferCell(ExcelBufferLineCount, ExcelBufferCellArr);
	end;

	procedure InToExcelBufferCell(RowNo: Integer; var LineArr: array[256] of Text[1024])
	var
		ColNo: Integer;
	begin
		// FOR ColNo := 1 TO ARRAYLEN(ExcelBufferSubHeaderCellArr,2) DO BEGIN
		//  ExcelBufferTempRec.VALIDATE("Row No.", RowNo);
		//  ExcelBufferTempRec.VALIDATE("Column No.", ColNo);
		//  ExcelBufferTempRec.VALIDATE("Cell Value as Text", LineArr[ColNo]);
		//  ExcelBufferTempRec.INSERT;
		// END;
	end;

	procedure ExcelBufferToExcel()
	begin
		// IF ExcelBufferTempRec.COUNT = 0 THEN BEGIN
		//  MESSAGE('Es gibt nichts in Excel auszugeben')
		// END ELSE BEGIN
		//  ExcelBufferTempRec.CreateBook();
		//  ExcelBufferTempRec.CreateSheet( STRSUBSTNO('Lagerreichweite am %1', Stichtag)
		//								, 'R50030 Excel Export Lagerreichweite'
		//								, COMPANYNAME
		//								, USERID);
		//  ExcelReportSetFormat;
		//  ExcelBufferTempRec.GiveUserControl();
		// END;
	end;

	procedure ExcelReportSetFormat()
	var
		xlStandardCellWidth: label '10,71';
		xlStandardCellHight: label '12,75';
		xlSpecCellA1: label 'A1';
		xlFirstRow: label '1';
		xlLastRow: label '65536';
		xlFirstCol: label 'A';
		xlLastCol: label 'IV';
		xlMinPageWide: label '1';
		xlMaxPageWide: label '32767';
		xlMinPageTall: label '1';
		xlMaxPageTall: label '32767';
		xlDefaultIntegerFrmTxt: label '#.##0;[Rot]-#.##0';
		xlDefaultCurrencyFrmTxt: label '#.##0,00;[Rot]-#.##0,00';
		xlHorzAlignGeneral: label '1';
		xlHorzAlignLeft: label '2';
		xlHorzAlignlCenter: label '3';
		xlHorzAlignRight: label '4';
		xlHorzAlignFill: label '5';
		xlHorzAlignJustify: label '6';
		xlHorzAlignCenterAcrossSelect: label '7';
		xlHorzAlignDistributed: label '8';
		xlTotalRow: Text[30];
	begin
		begin
			/*
			  // nicht relevant
			  '  ODER'
			  // noch nicht relevant
			*/
		end;

	end;

	local procedure OnPreSectionValueEntry_Body3(var "Value Entry" : Record "Value Entry");
	begin
		with "Value Entry" do begin
			if Output = Output::"+ Excel" then begin
				ExcelBufferCellArr[1] := StrSubstNo('%1', "Item No.");
				ExcelBufferCellArr[2] := StrSubstNo('%1', Item.Description);
				ExcelBufferCellArr[3] := StrSubstNo('%1', _Einstandspreis);
				ExcelBufferCellArr[4] := StrSubstNo('%1', _LagerbestandStichtag);
				ExcelBufferCellArr[5] := StrSubstNo('%1', Location.Name);
				ExcelBufferCellArr[6] := StrSubstNo('%1', Item."Gen. Prod. Posting Group");
				//c/mt/030614 START
				//ExcelBufferCellArr[7] := STRSUBSTNO('%1', Item."Inventory Posting Group");
				ExcelBufferCellArr[7] := StrSubstNo('%1', Item."Item Category Code");
				//c/mt/030614 STOP
				ExcelBufferCellArr[8] := StrSubstNo('%1', Location.Code);
				ExcelBufferCellArr[9] := StrSubstNo('%1', _BewertLagBestZumEinstPreis);
				ExcelBufferCellArr[10] := StrSubstNo('%1', _VerbrauchFertigungMenge);
				ExcelBufferCellArr[11] := StrSubstNo('%1', _VerkaufMenge);
				ExcelBufferCellArr[12] := StrSubstNo('%1', _Reichweite);
				InitExcelBufferLine(ExcelBufferCellArr);
			end;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'Location':
				begin
					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$Location$CurrentKey$Text',Location.CurrentKey); GlobalLanguage := currLanguage;
				end;
			'ValueEntry':
				begin
					ReportForNavShowOutput := true; OnPreSectionValueEntry_Body3("Value Entry"); jsonObject.Add('$Body3$Pre',ReportForNavShowOutput);
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
