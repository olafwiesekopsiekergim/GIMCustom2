#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60033 "CCO Customer Item Sales DüSi"
{
	Caption = 'Customer/Item Sales';
	WordLayout = './Layouts/CCOCustomerItemSalesDüSi.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(Customer;Customer)
		{
			PrintOnlyIfDetail = true;
			RequestFilterFields = "No.", "Search Name", "Customer Posting Group";
			column(ReportForNavId_6836; 6836) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer',Customer)) {}
			column(STRSUBSTNO_Text000_PeriodText_; StrSubstNo(Text000, PeriodText))
			{
			}
			column(CurrReport_PAGENO; Format(ReportForNav.PagePlaceHolder))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(PrintOnlyOnePerPage; PrintOnlyOnePerPage)
			{
			}
			column(Customer_TABLECAPTION__________CustFilter; TableCaption + ': ' + CustFilter)
			{
			}
			column(CustFilter; CustFilter)
			{
			}
			column(Value_Entry__TABLECAPTION__________ItemLedgEntryFilter; "Item Ledger Entry".TableCaption + ': ' + ItemLedgEntryFilter)
			{
			}
			column(ItemLedgEntryFilter; ItemLedgEntryFilter)
			{
			}
			column(Customer__No__; Customer."No.")
			{
			}
			column(Customer_Name; Customer.Name)
			{
			}
			column(Customer__Phone_No__; Customer."Phone No.")
			{
			}
			column(ValueEntryBuffer__Sales_Amount__Actual__; ValueEntryBuffer."Sales Amount (Actual)")
			{
			}
			column(ValueEntryBuffer__Discount_Amount_; -ValueEntryBuffer."Discount Amount")
			{
			}
			column(Profit; Profit)
			{
				AutoFormatType = 1;
			}
			column(ProfitPct; ProfitPct)
			{
				DecimalPlaces = 1 : 1;
			}
			column(Customer_Item_SalesCaption; Customer_Item_SalesCaptionLbl)
			{
			}
			column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
			{
			}
			column(All_amounts_are_in_LCYCaption; All_amounts_are_in_LCYCaptionLbl)
			{
			}
			column(ValueEntryBuffer__Item_No__Caption; ValueEntryBuffer__Item_No__CaptionLbl)
			{
			}
			column(Item_DescriptionCaption; Item_DescriptionCaptionLbl)
			{
			}
			column(ValueEntryBuffer__Invoiced_Quantity_Caption; ValueEntryBuffer__Invoiced_Quantity_CaptionLbl)
			{
			}
			column(Item__Base_Unit_of_Measure_Caption; Item__Base_Unit_of_Measure_CaptionLbl)
			{
			}
			column(ValueEntryBuffer__Sales_Amount__Actual___Control44Caption; ValueEntryBuffer__Sales_Amount__Actual___Control44CaptionLbl)
			{
			}
			column(ValueEntryBuffer__Discount_Amount__Control45Caption; ValueEntryBuffer__Discount_Amount__Control45CaptionLbl)
			{
			}
			column(Profit_Control46Caption; Profit_Control46CaptionLbl)
			{
			}
			column(ProfitPct_Control47Caption; ProfitPct_Control47CaptionLbl)
			{
			}
			column(Customer__Phone_No__Caption; FieldCaption("Phone No."))
			{
			}
			column(TotalCaption; TotalCaptionLbl)
			{
			}
			dataitem("Item Ledger Entry";"Item Ledger Entry")
			{
				DataItemLink = "Source No." = FIELD("No."), "Posting Date" = FIELD("Date Filter"), "Global Dimension 1 Code" = FIELD("Global Dimension 1 Filter"), "Global Dimension 2 Code" = FIELD("Global Dimension 2 Filter");
				DataItemTableView = sorting("Source Type", "Source No.", "Item No.", "Variant Code", "Posting Date") where("Source Type" = const(Customer));
				RequestFilterFields = "Item No.", "Posting Date";
				column(ReportForNavId_7209; 7209) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_ItemLedgerEntry; ReportForNavWriteDataItem('ItemLedgerEntry',"Item Ledger Entry")) {}
				trigger OnPreDataItem();
				begin
					ValueEntryBuffer.Reset;
					ValueEntryBuffer.DeleteAll;
					NextEntryNo := 1;
					ReportForNav.OnPreDataItem('ItemLedgerEntry',"Item Ledger Entry");
				end;
				
				trigger OnAfterGetRecord();
				begin
					ValueEntryBuffer.SetRange("Item No.", "Item No.");
					if not ValueEntryBuffer.Find('-') then begin
						ValueEntryBuffer.Init;
						ValueEntryBuffer."Entry No." := NextEntryNo;
						ValueEntryBuffer."Item No." := "Item No.";
						ValueEntryBuffer.Insert;
						NextEntryNo := NextEntryNo + 1;
					end;
					CalcFields("Sales Amount (Actual)", "Cost Amount (Actual)", "Cost Amount (Non-Invtbl.)");
					ValueEntryBuffer."Invoiced Quantity" := ValueEntryBuffer."Invoiced Quantity" + "Invoiced Quantity";
					ValueEntryBuffer."Sales Amount (Actual)" := ValueEntryBuffer."Sales Amount (Actual)" + "Sales Amount (Actual)";
					ValueEntryBuffer."Cost Amount (Actual)" := ValueEntryBuffer."Cost Amount (Actual)" + "Cost Amount (Actual)";
					ValueEntry.SetCurrentkey("Item Ledger Entry No.");
					ValueEntry.SetRange("Item Ledger Entry No.", "Entry No.");
					if ValueEntry.FindSet then
						repeat
							ValueEntryBuffer."Discount Amount" := ValueEntryBuffer."Discount Amount" + ValueEntry."Discount Amount";
						until ValueEntry.Next = 0;
					ValueEntryBuffer."Cost Amount (Non-Invtbl.)" := ValueEntryBuffer."Cost Amount (Non-Invtbl.)" + "Cost Amount (Non-Invtbl.)";
					ValueEntryBuffer.Modify;
				end;
				
			}
			dataitem(Integer;Integer)
			{
				DataItemTableView = sorting(Number);
				column(ReportForNavId_5444; 5444) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_Integer; ReportForNavWriteDataItem('Integer',Integer)) {}
				column(ValueEntryBuffer__Item_No__; ValueEntryBuffer."Item No.")
				{
				}
				column(Item_Description; Item.Description)
				{
				}
				column(Item_Zoll; Item."Tariff No.")
				{
				}
				column(Item_Origin; Item."Country/Region of Origin Code")
				{
				}
				column(ValueEntryBuffer__Invoiced_Quantity_; -ValueEntryBuffer."Invoiced Quantity")
				{
					DecimalPlaces = 0 : 5;
				}
				column(ValueEntryBuffer__Sales_Amount__Actual___Control44; ValueEntryBuffer."Sales Amount (Actual)")
				{
					AutoFormatType = 1;
				}
				column(ValueEntryBuffer__Discount_Amount__Control45; -ValueEntryBuffer."Discount Amount")
				{
					AutoFormatType = 1;
				}
				column(Profit_Control46; Profit)
				{
					AutoFormatType = 1;
				}
				column(ProfitPct_Control47; ProfitPct)
				{
					DecimalPlaces = 1 : 1;
				}
				column(Item__Base_Unit_of_Measure_; Item."Base Unit of Measure")
				{
				}
				trigger OnPreDataItem();
				begin
					ValueEntryBuffer.Reset;
					SetRange(Number, 1, ValueEntryBuffer.Count);
					ReportForNav.OnPreDataItem('Integer',Integer);
				end;
				
				trigger OnAfterGetRecord();
				begin
					if Number = 1 then
						ValueEntryBuffer.Find('-')
					else
						ValueEntryBuffer.Next;
					Profit :=
					  ValueEntryBuffer."Sales Amount (Actual)" +
					  ValueEntryBuffer."Cost Amount (Actual)" +
					  ValueEntryBuffer."Cost Amount (Non-Invtbl.)";
					if Item.Get(ValueEntryBuffer."Item No.") then;
				end;
				
			}
			trigger OnPreDataItem();
			begin
				ReportForNav.SetNewPagePerRecord('Customer', PrintOnlyOnePerPage);
				ReportForNav.OnPreDataItem('Customer',Customer);
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(PrintOnlyOnePerPage; PrintOnlyOnePerPage)
					{
						ApplicationArea = Basic;
						Caption = 'New Page per Customer';
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		CustFilter := Customer.GetFilters;
		ItemLedgEntryFilter := "Item Ledger Entry".GetFilters;
		PeriodText := "Item Ledger Entry".GetFilter("Posting Date");
		;ReportsForNavPre;
	end;
	var
		Text000: label 'Period: %1';
		Item: Record Item;
		ValueEntry: Record "Value Entry";
		ValueEntryBuffer: Record "Value Entry" temporary;
		CustFilter: Text;
		ItemLedgEntryFilter: Text;
		PeriodText: Text[30];
		NextEntryNo: Integer;
		PrintOnlyOnePerPage: Boolean;
		Profit: Decimal;
		ProfitPct: Decimal;
		Customer_Item_SalesCaptionLbl: label 'Customer/Item Sales';
		CurrReport_PAGENOCaptionLbl: label 'Page';
		All_amounts_are_in_LCYCaptionLbl: label 'All amounts are in LCY';
		ValueEntryBuffer__Item_No__CaptionLbl: label 'Item No.';
		Item_DescriptionCaptionLbl: label 'Description';
		ValueEntryBuffer__Invoiced_Quantity_CaptionLbl: label 'Invoiced Quantity';
		Item__Base_Unit_of_Measure_CaptionLbl: label 'Unit of Measure';
		ValueEntryBuffer__Sales_Amount__Actual___Control44CaptionLbl: label 'Amount';
		ValueEntryBuffer__Discount_Amount__Control45CaptionLbl: label 'Discount Amount';
		Profit_Control46CaptionLbl: label 'Profit';
		ProfitPct_Control47CaptionLbl: label 'Profit %';
		TotalCaptionLbl: label 'Total';

	procedure InitializeRequest(NewPagePerCustomer: Boolean)
	begin
		PrintOnlyOnePerPage := NewPagePerCustomer;
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'Customer':
				begin
					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$Customer$CurrentKey$Text',Customer.CurrentKey); GlobalLanguage := currLanguage;
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
