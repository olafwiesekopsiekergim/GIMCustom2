#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60016 "CCO Credit Insurance Note"
{
	WordLayout = './Layouts/CCOCreditInsuranceNote.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(Customer;Customer)
		{
			CalcFields = "Sales (LCY)", "Balance (LCY)", "Net Change (LCY)", "Net Change - VKR(LCY)", "Balance -VKR(LCY)";
			DataItemTableView = sorting("No.");
			RequestFilterFields = "Date Filter", "Kette Kreditlimit", "Salesperson Code", "Country/Region Code";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer',Customer)) {}
			column(FilterTxt; FilterTxt)
			{
				IncludeCaption = false;
			}
			column("USERID"; UserId)
			{
				IncludeCaption = false;
			}
			column(ReportForNavPageNo; Format(ReportForNav.PagePlaceHolder))
			{
				IncludeCaption = false;
			}
			column(COMPANYNAME; COMPANYNAME)
			{
				IncludeCaption = false;
			}
			column(TODAY_0_4; Format(Today, 0, 4))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_CreditLimit_LCY_; Customer.FieldCaption("Credit Limit (LCY)"))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_Balance_LCY_; Customer.FieldCaption("Balance (LCY)"))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_Sales_LCY_; Customer.FieldCaption("Sales (LCY)"))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_SalespersonCode; Customer.FieldCaption("Salesperson Code"))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_City; Customer.FieldCaption(City))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_Name; Customer.FieldCaption(Name))
			{
				IncludeCaption = false;
			}
			column(CustomerFIELDCAPTION_No; Customer.FieldCaption("No."))
			{
				IncludeCaption = false;
			}
			column(Meldebetrag; Meldebetrag)
			{
				IncludeCaption = false;
			}
			column(CreditLimit_LCY_Customer; "Credit Limit (LCY)")
			{
				IncludeCaption = false;
			}
			column(Balance_LCY_Customer; "Balance -VKR(LCY)")
			{
				AutoCalcField = true;
			}
			column(Sales_LCY_Customer; "Sales (LCY)")
			{
				AutoCalcField = true;
				IncludeCaption = false;
			}
			column(SalespersonCode_Customer; Customer."Salesperson Code")
			{
				IncludeCaption = false;
			}
			column(City_Customer; Customer.City)
			{
				IncludeCaption = false;
			}
			column(Name_Customer; Customer.Name)
			{
				IncludeCaption = false;
			}
			column(No_Customer; Customer."No.")
			{
				IncludeCaption = false;
			}
			column(City_DebitorKette; DebitorKette.City)
			{
				IncludeCaption = false;
			}
			column(Name_DebitorKette; DebitorKette.Name)
			{
				IncludeCaption = false;
			}
			column(KetteKreditlimit_Customer; Customer."Kette Kreditlimit")
			{
				IncludeCaption = false;
			}
			column(MeldebetragTotal; MeldebetragTotal)
			{
				IncludeCaption = false;
			}
			column(LimitTotal; LimitTotal)
			{
				IncludeCaption = false;
			}
			column(SaldoTotal; SaldoTotal)
			{
				IncludeCaption = false;
			}
			column(VerkaufTotal; VerkaufTotal)
			{
				IncludeCaption = false;
			}
			column(Total; 'Total')
			{
				IncludeCaption = false;
			}
			column("Überschreitung"; Überschreitung)
			{
				IncludeCaption = false;
			}
			column("ÜberschreitungTotal"; ÜberschreitungTotal)
			{
				IncludeCaption = false;
			}
			trigger OnPreDataItem();
			begin
				LastFieldNo := FieldNo("Kette Kreditlimit");
				MeldebetragTotal := 0;
				SaldoTotal := 0;
				VerkaufTotal := 0;
				LimitTotal := 0;
				ÜberschreitungTotal := 0;
				//Customer.SETFILTER("Date Filter",'..%1',Stichtagsdatum);
				ReportForNav.OnPreDataItem('Customer',Customer);
			end;
			
			trigger OnAfterGetRecord();
			begin
				if not DebitorKette.Get(Customer."Kette Kreditlimit") then
					DebitorKette := Customer;
			end;
			
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field("ab Kreditlimit (MW)"; "ab Kreditlimit (MW)")
					{
						ApplicationArea = Basic;
						Caption = 'ab Kreditlimit (MW)';
					}
					field("bis Kreditlimit (MW)"; "bis Kreditlimit (MW)")
					{
						ApplicationArea = Basic;
						Caption = 'bis Kreditlimit (MW)';
					}
					field("nur Debitoren mit Meldebetrag"; "nur Debitoren mit Meldebetrag")
					{
						ApplicationArea = Basic;
						Caption = 'nur Debitoren mit Meldebetrag';
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		FilterTxt := CopyStr(Customer.GetFilters, 1, 200);
		Stichtagsdatum := Customer.GetRangemax("Date Filter");
		;ReportsForNavPre;
	end;
	var
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		Meldebetrag: Decimal;
		MeldebetragTotal: Decimal;
		SaldoTotal: Decimal;
		"ÜberschreitungTotal": Decimal;
		"Überschreitung": Decimal;
		VerkaufTotal: Decimal;
		LimitTotal: Decimal;
		DebitorKette: Record Customer;
		FilterTxt: Text[200];
		"ab Kreditlimit (MW)": Decimal;
		"bis Kreditlimit (MW)": Decimal;
		"nur Debitoren mit Meldebetrag": Boolean;
		drucken: Boolean;
		Stichtagsdatum: Date;

	local procedure OnPreSectionCustomer_GroupHeader3(var Customer : Record Customer);
	begin
		with Customer do begin
			ReportForNavShowOutput := FooterPrinted;
			FooterPrinted := false;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupHeader4(var Customer : Record Customer);
	begin
		with Customer do begin
			ReportForNavShowOutput :=
			  ReportForNavTotalsCausedBy = LastFieldNo;
		end;
	end;
	local procedure OnPreSectionCustomer_Body5(var Customer : Record Customer);
	begin
		with Customer do begin
			if (Customer."Kette Kreditlimit" = '') then begin
				if Customer."Net Change - VKR(LCY)" > Customer."Credit Limit (LCY)" then
					Meldebetrag := Customer."Credit Limit (LCY)"
				else
					Meldebetrag := Customer."Net Change - VKR(LCY)";
				if Meldebetrag < 0 then Meldebetrag := 0;
				Überschreitung := Customer."Net Change - VKR(LCY)" - Customer."Credit Limit (LCY)";
				if Überschreitung < 0 then Überschreitung := 0;
				//MeldebetragTotal := MeldebetragTotal + Meldebetrag;
			end;
			if (Customer."Kette Kreditlimit" <> '') then
				ReportForNavSetShowOutput(false)
			else begin
				drucken := true;
				if ("ab Kreditlimit (MW)" >= Customer."Credit Limit (LCY)") then
					drucken := false;
				if drucken and ("bis Kreditlimit (MW)" <> 0) and
				   ("bis Kreditlimit (MW)" <= Customer."Credit Limit (LCY)") then
					drucken := false;
				if drucken and "nur Debitoren mit Meldebetrag" and
				   (Meldebetrag = 0) then
					drucken := false;
				if drucken then begin
					SaldoTotal := SaldoTotal + Customer."Net Change - VKR(LCY)";
					VerkaufTotal := VerkaufTotal + Customer."Sales (LCY)";
					LimitTotal := LimitTotal + Customer."Credit Limit (LCY)";
					MeldebetragTotal := MeldebetragTotal + Meldebetrag;
					ÜberschreitungTotal := ÜberschreitungTotal + Überschreitung;
				end;
				ReportForNavSetShowOutput(drucken);
			end;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupFooter6(var Customer : Record Customer);
	begin
		with Customer do begin
			if not FooterPrinted then
				LastFieldNo := ReportForNavTotalsCausedBy;
			ReportForNavShowOutput := not FooterPrinted;
			FooterPrinted := true;
		end;
	end;
	local procedure OnPreSectionCustomer_GroupFooter7(var Customer : Record Customer);
	begin
		with Customer do begin
			if (Customer."Kette Kreditlimit" <> '') then begin
				if Customer."Net Change - VKR(LCY)" > Customer."Credit Limit (LCY)" then
					Meldebetrag := Customer."Credit Limit (LCY)"
				else
					Meldebetrag := Customer."Net Change - VKR(LCY)";
				if Meldebetrag < 0 then Meldebetrag := 0;
			end;
			if (Customer."Kette Kreditlimit" = '') then
				ReportForNavSetShowOutput(false)
			else begin
				drucken := true;
				if ("ab Kreditlimit (MW)" >= Customer."Credit Limit (LCY)") then
					drucken := false;
				if drucken and ("bis Kreditlimit (MW)" <> 0) and
				   ("bis Kreditlimit (MW)" <= Customer."Credit Limit (LCY)") then
					drucken := false;
				if drucken and "nur Debitoren mit Meldebetrag" and
				   (Meldebetrag = 0) then
					drucken := false;
				if drucken then begin
					SaldoTotal := SaldoTotal + Customer."Balance -VKR(LCY)";
					VerkaufTotal := VerkaufTotal + Customer."Sales (LCY)";
					LimitTotal := LimitTotal + Customer."Credit Limit (LCY)";
					MeldebetragTotal := MeldebetragTotal + Meldebetrag;
					ÜberschreitungTotal := ÜberschreitungTotal + Überschreitung;
				end;
				ReportForNavSetShowOutput(drucken);
			end;
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

		ReportForNavCustomerBuffer : Array [4] of Decimal;
		ReportForNavCustomerTotals : Array [4] of Decimal;
	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'Customer':
				begin
					ReportForNavShowOutput := true; OnPreSectionCustomer_Body5(Customer); jsonObject.Add('$Body5$Pre',ReportForNavShowOutput);
					with Customer do begin
						ReportForNavCustomerTotals[1] += "Sales (LCY)"; ReportForNavCustomerBuffer[1] := "Sales (LCY)"; "Sales (LCY)" := ReportForNavCustomerTotals[1];
						ReportForNavCustomerTotals[2] += "Balance (LCY)"; ReportForNavCustomerBuffer[2] := "Balance (LCY)"; "Balance (LCY)" := ReportForNavCustomerTotals[2];
						ReportForNavCustomerTotals[3] += "Credit Limit (LCY)"; ReportForNavCustomerBuffer[3] := "Credit Limit (LCY)"; "Credit Limit (LCY)" := ReportForNavCustomerTotals[3];
						ReportForNavCustomerTotals[4] += "Net Change (LCY)"; ReportForNavCustomerBuffer[4] := "Net Change (LCY)"; "Net Change (LCY)" := ReportForNavCustomerTotals[4];
						ReportForNavShowOutput := true; ReportForNavTotalsCausedBy := 50015; OnPreSectionCustomer_GroupHeader3(Customer); jsonObject.Add('$GroupHeader3$Pre$50015$Boolean',ReportForNavShowOutput);
						ReportForNavShowOutput := true; ReportForNavTotalsCausedBy := 50015; OnPreSectionCustomer_GroupHeader4(Customer); jsonObject.Add('$GroupHeader4$Pre$50015$Boolean',ReportForNavShowOutput);
						ReportForNavShowOutput := true; ReportForNavTotalsCausedBy := 50015; OnPreSectionCustomer_GroupFooter6(Customer); jsonObject.Add('$GroupFooter6$Pre$50015$Boolean',ReportForNavShowOutput);
						ReportForNavShowOutput := true; ReportForNavTotalsCausedBy := 50015; OnPreSectionCustomer_GroupFooter7(Customer); jsonObject.Add('$GroupFooter7$Pre$50015$Boolean',ReportForNavShowOutput);
						"Sales (LCY)" := ReportForNavCustomerBuffer[1]; 
						"Balance (LCY)" := ReportForNavCustomerBuffer[2]; 
						"Credit Limit (LCY)" := ReportForNavCustomerBuffer[3]; 
						"Net Change (LCY)" := ReportForNavCustomerBuffer[4]; 
					end;
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
