#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60008 "CCO Service Quote"
{
    Caption = 'Service Quote';
    WordLayout = './Layouts/CCOServiceQuote.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Service Header"; "Service Header")
        {
            DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const(Quote));
            RequestFilterFields = "No.", "Customer No.";
            column(ReportForNavId_1634; 1634) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_ServiceHeader; ReportForNavWriteDataItem('ServiceHeader', "Service Header")) { }
            column(DocumentType_ServHeader; "Service Header"."Document Type")
            {
            }
            column(No_ServHeader; "Service Header"."No.")
            {
            }
            column(HomePageCaption; HomePageCaptionLbl)
            {
            }
            column(EmailCaption; EmailCaptionLbl)
            {
            }
            column(WahrTxt; WÃ¤hrTxt)
            {
            }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_5701; 5701) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_6455; 6455) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                    }
                    column(CompanyInfoPicture3; CompanyInfo."Picture 2")
                    {
                    }
                    column(HomePage; CompanyInfo."Home Page")
                    {
                    }
                    column(Email; CompanyInfo."E-Mail")
                    {
                    }
                    column(DUE001; DUE001)
                    {
                    }
                    column(DUE002; DUE002)
                    {
                    }
                    column(DUE005; DUE005)
                    {
                    }
                    column(DUE019; DUE019)
                    {
                    }
                    column(BilltoCustomerNo; "Service Header"."Bill-to Customer No.")
                    {
                    }
                    column(FixTerminLieferung; "Service Header"."fix Termin-Lieferung")
                    {
                    }
                    column(OrderTime_ServHeader; "Service Header"."Order Time")
                    {
                    }
                    column(YourRef; "Service Header"."Your Reference")
                    {
                    }
                    column(ExternalNo; "Service Header"."External Document No.")
                    {
                    }
                    column(ContractNo_ServHeader; "Service Header"."Contract No.")
                    {
                    }
                    column(PODate; "Service Header"."PO Date")
                    {
                    }
                    column(Quotelimit; "Service Header"."Quote Expiration Date")
                    {
                    }
                    column(OrderDate_ServHeader; Format("Service Header"."Order Date"))
                    {
                    }
                    column(Status_ServHeader; "Service Header".Status)
                    {
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                    }
                    column(STRSUBSTNO_DUE004_SalesHeaderNo; StrSubstNo(DUE004, "Service Header"."No."))
                    {
                    }
                    column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
                    {
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                    }
                    column(No1_ServHeader; "Service Header"."No.")
                    {
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                    }
                    column(CompanyAddr6; CompanyAddr[6])
                    {
                    }
                    column(CompanyAddr5; CompanyAddr[5])
                    {
                    }
                    column(BilltoName_ServHeader; "Service Header"."Bill-to Name")
                    {
                    }
                    column(CompanyAddr4; CompanyAddr[4])
                    {
                    }
                    column(CompanyAddr3; CompanyAddr[3])
                    {
                    }
                    column(CompanyAddr2; CompanyAddr[2])
                    {
                    }
                    column(CompanyAddr1; CompanyAddr[1])
                    {
                    }
                    column(OrderConfirmationCopyText; StrSubstNo(Text001, CopyText))
                    {
                    }
                    column(CurrReportPageNo; StrSubstNo(Text002, Format(ReportForNav.PagePlaceHolder)))
                    {
                    }
                    column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
                    {
                    }
                    column(EMail_ServHeader; "Service Header"."E-Mail")
                    {
                    }
                    column(PhoneNo_ServHeader; "Service Header"."Phone No.")
                    {
                    }
                    column(KundendienstMail; Kundendienst."E-Mail")
                    {
                    }
                    column(KundendienstPhone; Kundendienst."Phone No.")
                    {
                    }
                    column(OutputNo; OutputNo)
                    {
                    }
                    column(PageCaption; StrSubstNo(Text002, ''))
                    {
                    }
                    column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(TEXT005, Format(ReportForNav.PagePlaceHolder)))
                    {
                    }
                    column(SerHdrOrderDateCaption; SerHdrOrderDateCaptionLbl)
                    {
                    }
                    column(InvoicetoCaption; InvoicetoCaptionLbl)
                    {
                    }
                    column(CompanyInfoPhoneNoCaption; CompanyInfoPhoneNoCaptionLbl)
                    {
                    }
                    column(ServiceHeaderEMailCaption; ServiceHeaderEMailCaptionLbl)
                    {
                    }
                    column(OrderTime_ServHeaderCaption; "Service Header".FieldCaption("Order Time"))
                    {
                    }
                    column(Status_ServHeaderCaption; "Service Header".FieldCaption(Status))
                    {
                    }
                    column(No1_ServHeaderCaption; "Service Header".FieldCaption("No."))
                    {
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_7574; 7574) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                        }
                        column(DimensionLoopNumber; DimensionLoop1.Number)
                        {
                        }
                        column(HeaderDimensionsCaption; HeaderDimensionsCaptionLbl)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not DimSetEntry1.FindSet then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo('%1 %2', DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until DimSetEntry1.Next = 0;
                        end;

                    }
                    dataitem("Service Order Comment"; "Service Comment Line")
                    {
                        DataItemLink = "Table Subtype" = FIELD("Document Type"), "No." = FIELD("No.");
                        DataItemLinkReference = "Service Header";
                        DataItemTableView = sorting("Table Name", "Table Subtype", "No.", Type, "Table Line No.", "Line No.") where("Table Name" = const("Service Header"), Type = const(General));
                        column(ReportForNavId_9034; 9034) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_ServiceOrderComment; ReportForNavWriteDataItem('ServiceOrderComment', "Service Order Comment")) { }
                        column(LineNo_ServOrderComment; "Service Order Comment"."Line No.")
                        {
                        }
                        column(TblSubtype_ServOrderComm; "Service Order Comment"."Table Subtype")
                        {
                        }
                        column(Type_ServOrderComment; "Service Order Comment".Type)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('ServiceOrderComment', "Service Order Comment");
                        end;
                    }
                    dataitem("Service Item Line"; "Service Item Line")
                    {
                        DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
                        DataItemLinkReference = "Service Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
                        column(ReportForNavId_6416; 6416) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_ServiceItemLine; ReportForNavWriteDataItem('ServiceItemLine', "Service Item Line")) { }
                        column(ShowInternalInfo; ShowInternalInfo)
                        {
                        }
                        column(SerialNo_ServItemLine; "Service Item Line"."Serial No.")
                        {
                        }
                        column(Description_ServItemLine; "Service Item Line".Description)
                        {
                        }
                        column(ItemNo_ServItemLineServ; "Service Item Line"."Service Item No.")
                        {
                        }
                        column(SerItmGrCode_ServLineType; "Service Item Line"."Service Item Group Code")
                        {
                        }
                        column(Warranty_ServLineType; "Service Item Line".Warranty)
                        {
                        }
                        column(LoanerNo_ServLineType; "Service Item Line"."Loaner No.")
                        {
                        }
                        column(ServShelfNo_ServLineType; "Service Item Line"."Service Shelf No.")
                        {
                        }
                        column(Warranty1_ServLineType; Format(Warranty))
                        {
                        }
                        column(DocNo_ServLineType; "Service Item Line"."Document No.")
                        {
                        }
                        column(LineNo_ServLineType; "Service Item Line"."Line No.")
                        {
                        }
                        column(ItemNo; "Service Item Line"."Item No.")
                        {
                        }
                        column(ServiceItemLinesCaption; ServiceItemLinesCaptionLbl)
                        {
                        }
                        column(Standort_ServItemLineCaption; FieldCaption("Location of Service Item"))
                        {
                        }
                        column(SerialNo_ServItemLineCaption; FieldCaption("Serial No."))
                        {
                        }
                        column(Description_ServItemLineCaption; FieldCaption(Description))
                        {
                        }
                        column(ItemNo_ServItemLineServCaption; FieldCaption("Service Item No."))
                        {
                        }
                        column(ServItemGroupCode_ServItemLineCaption; FieldCaption("Service Item Group Code"))
                        {
                        }
                        column(Warranty_ServLineTypeCaption; FieldCaption(Warranty))
                        {
                        }
                        column(ItemNo_ServItemLineCaption; FieldCaption("Item No."))
                        {
                        }
                        column(LoanerNo_ServLineTypeCaption; FieldCaption("Loaner No."))
                        {
                        }
                        column(ServShelfNo_ServLineTypeCaption; FieldCaption("Service Shelf No."))
                        {
                        }
                        column(GebaudeCpt; GebaudeCpt)
                        {
                        }
                        column(EbeneCpt; EbeneCpt)
                        {
                        }
                        column(RaumCpt; RaumCpt)
                        {
                        }
                        column(Gebaude; ServiceItem.GebÃ¤ude)
                        {
                        }
                        column(Ebene; ServiceItem.Ebene)
                        {
                        }
                        column(Raum; ServiceItem.Raum)
                        {
                        }
                        column(Standort; "Service Item Line"."Location of Service Item")
                        {
                        }
                        dataitem("Fault Comment"; "Service Comment Line")
                        {
                            DataItemLink = "Table Subtype" = FIELD("Document Type"), "No." = FIELD("Document No."), "Table Line No." = FIELD("Line No.");
                            DataItemTableView = sorting("Table Name", "Table Subtype", "No.", Type, "Table Line No.", "Line No.") where("Table Name" = const("Service Header"), Type = const(Fault));
                            column(ReportForNavId_8902; 8902) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_FaultComment; ReportForNavWriteDataItem('FaultComment', "Fault Comment")) { }
                            column(Comment_FaultComment; "Fault Comment".Comment)
                            {
                            }
                            column(Number_FaultComment; Number1)
                            {
                            }
                            column(TableSubtype_FaultComment; "Fault Comment"."Table Subtype")
                            {
                            }
                            column(Type_FaultComment; "Fault Comment".Type)
                            {
                            }
                            column(LineNo_FaultComment; "Fault Comment"."Line No.")
                            {
                            }
                            column(FaultCommentsCaption; FaultCommentsCaptionLbl)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                ReportForNav.OnPreDataItem('FaultComment', "Fault Comment");
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                Number2 := 0;
                                Number1 := Number1 + 1;
                            end;

                        }
                        dataitem("Resolution Comment"; "Service Comment Line")
                        {
                            DataItemLink = "Table Subtype" = FIELD("Document Type"), "No." = FIELD("Document No."), "Table Line No." = FIELD("Line No.");
                            DataItemTableView = sorting("Table Name", "Table Subtype", "No.", Type, "Table Line No.", "Line No.") where("Table Name" = const("Service Header"), Type = const(Resolution));
                            column(ReportForNavId_5074; 5074) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_ResolutionComment; ReportForNavWriteDataItem('ResolutionComment', "Resolution Comment")) { }
                            column(Comment_ResolutionComment; "Resolution Comment".Comment)
                            {
                            }
                            column(Number_ResolutionComment; Number2)
                            {
                            }
                            column(TblSubtype_ResolComment; "Resolution Comment"."Table Subtype")
                            {
                            }
                            column(Type_ResolutionComment; "Resolution Comment".Type)
                            {
                            }
                            column(LineNo_ResolutionComment; "Resolution Comment"."Line No.")
                            {
                            }
                            column(ResolutionCommentsCaption; ResolutionCommentsCaptionLbl)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                ReportForNav.OnPreDataItem('ResolutionComment', "Resolution Comment");
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                Number1 := 0;
                                Number2 := Number2 + 1;
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('ServiceItemLine', "Service Item Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            Number1 := 0;
                            Number2 := 0;

                            ServiceItem.Get("Service Item Line"."Service Item No.");

                            if "Service Item Line".Description = 'Schrank' then
                                "Service Item Line".Description := 'Sicherheitsschrank';
                            if "Service Item Line".Description = 'Abzug' then
                                "Service Item Line".Description := 'Laborabzug';
                            if "Service Item Line".Description = 'Aufsatz' then
                                "Service Item Line".Description := 'Filteraufsatz';
                        end;

                    }
                    dataitem("Service Line"; "Service Line")
                    {
                        DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
                        DataItemLinkReference = "Service Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
                        column(ReportForNavId_6560; 6560) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_ServiceLine; ReportForNavWriteDataItem('ServiceLine', "Service Line")) { }
                        column(TotalInclVATText; TotalInclVATText)
                        {
                        }
                        column(TotalExclVATText; TotalExclVATText)
                        {
                        }
                        column(VATAmountLineVATAmountText; VATText)
                        {
                        }
                        column(SerItemSlNo_ServLine; "Service Line"."Service Item Serial No.")
                        {
                        }
                        column(Type_ServLine; "Service Line".Type)
                        {
                        }
                        column(No_ServLine; "Service Line"."No.")
                        {
                        }
                        column(Description_ServLine; "Service Line".Description)
                        {
                        }
                        column(Description_ServLine2; "Service Line"."Description 2")
                        {
                        }
                        column(UnitPrice_ServLine; "Service Line"."Unit Price")
                        {
                        }
                        column(LineDiscount_ServLine; "Service Line"."Line Discount %")
                        {
                        }
                        column(Amt; Amt)
                        {
                        }
                        column(VariantCode_ServLine; "Service Line"."Variant Code")
                        {
                        }
                        column(GrossAmt; GrossAmt)
                        {
                        }
                        column(Quantity_ServLine; "Service Line".Quantity)
                        {
                        }
                        column(TotalAmt; TotalAmt)
                        {
                        }
                        column(TotalGrossAmt; TotalGrossAmt)
                        {
                        }
                        column(ServiLineItemNo; "Service Line"."Service Item No.")
                        {
                        }
                        column(DocumentNo_ServLine; "Service Line"."Document No.")
                        {
                        }
                        column(LineNo_ServLine; "Service Line"."Line No.")
                        {
                        }
                        column(ServiceLineCaption; ServiceLineCaptionLbl)
                        {
                        }
                        column(AmtCaption; AmtCaptionLbl)
                        {
                        }
                        column(GrossAmountCaption; GrossAmountCaptionLbl)
                        {
                        }
                        column(UOM_Code; "Service Line"."Unit of Measure Code")
                        {
                        }
                        column(UOM_ServLineCaption; FieldCaption("Unit of Measure"))
                        {
                        }
                        column(SerItemSlNo_ServLineCaption; FieldCaption("Service Item Serial No."))
                        {
                        }
                        column(TotalCaption; TotalCaptionLbl)
                        {
                        }
                        column(Type_ServLineCaption; FieldCaption(Type))
                        {
                        }
                        column(No_ServLineCaption; FieldCaption("No."))
                        {
                        }
                        column(Description_ServLineCaption; FieldCaption(Description))
                        {
                        }
                        column(UnitPrice_ServLineCaption; FieldCaption("Unit Price"))
                        {
                        }
                        column(LineDiscount_ServLineCaption; FieldCaption("Line Discount %"))
                        {
                        }
                        column(VariantCode_ServLineCaption; FieldCaption("Variant Code"))
                        {
                        }
                        column(Quantity_ServLineCaption; FieldCaption(Quantity))
                        {
                        }
                        column(PosCpt; PosCpt)
                        {
                        }
                        column(Qty; Qty)
                        {
                        }
                        column(ServItemSerialNo_ServLine; "Service Line"."Service Item Serial No.")
                        {
                        }
                        column(Position; "Service Line".Position)
                        {
                        }
                        column(QtyCaption; QtyCaptionLbl)
                        {
                        }
                        column(AmountCaption; AmountCaptionLbl)
                        {
                        }
                        column(TotalVATAmt; TotalVATAmt)
                        {
                        }
                        dataitem(DimesionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_2234; 2234) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimesionLoop2; ReportForNavWriteDataItem('DimesionLoop2', DimesionLoop2)) { }
                            column(DimText1; DimText)
                            {
                            }
                            column(LineDimensionsCaption; LineDimensionsCaptionLbl)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                DimSetEntry2.SetRange("Dimension Set ID", "Service Line"."Dimension Set ID");
                                ReportForNav.OnPreDataItem('DimesionLoop2', DimesionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not DimSetEntry2.FindSet then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo('%1 %2', DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until DimSetEntry2.Next = 0;
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            TotalAmt := 0;
                            TotalGrossAmt := 0;   //was ist der Unterschied zw. TotalGrossAmt und TotGrossAmt (aus Zeile 102)
                                                  //in den Variablen sind beide Versionen definiert
                            ReportForNav.OnPreDataItem('ServiceLine', "Service Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            Qty := Quantity;

                            Amt := "Line Amount";

                            TotalAmt += Amt;                       //Total Netto
                            GrossAmt := (1 + "VAT %" / 100) * Amt; //MWST berechnen + Netto
                            TotalGrossAmt += GrossAmt;         //Total Brutto
                            TotalVATAmt += GrossAmt - Amt;     //Total MWST = Brutto - Netto
                        end;

                    }
                    dataitem(Shipto; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_6218; 6218) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Shipto; ReportForNavWriteDataItem('Shipto', Shipto)) { }
                        column(DUE016; DUE016)
                        {
                        }
                        column(DUE021; DUE021)
                        {
                        }
                        column(DUE022; DUE022)
                        {
                        }
                        column(ShipToAddr6; ShipToAddr[6])
                        {
                        }
                        column(ShipToAddr5; ShipToAddr[5])
                        {
                        }
                        column(ShipToAddr4; ShipToAddr[4])
                        {
                        }
                        column(ShipToAddr3; ShipToAddr[3])
                        {
                        }
                        column(ShipToAddr2; ShipToAddr[2])
                        {
                        }
                        column(ShipToAddr1; ShipToAddr[1])
                        {
                        }
                        column(ShipToAddressCaption; ShipToAddressCaptionLbl)
                        {
                        }
                        column(Description_ShipmentMethod; ShipmentMethod.Description)
                        {
                        }
                        column(Description_PaymentTerms; PaymentTerms.Description)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowShippingAddr then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Shipto', Shipto);
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    if NoOfLoops <= 0 then
                        NoOfLoops := 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    OutputNo := 1;
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin
                    TotAmt := 0;
                    TotGrossAmt := 0;   //was ist der Unterschied zw. TotGrossAmt und TotalGrossAmt (aus Zeile 182)
                                        //in den Variablen sind beide Versionen definiert

                    if Number > 1 then
                        CopyText := Text000;
                    OutputNo += 1;

                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        ServCountPrinted.Run("Service Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('ServiceHeader', "Service Header");
            end;

            trigger OnAfterGetRecord();
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                DimSetEntry1.SetRange("Dimension Set ID", "Dimension Set ID");
                if RespCenter.Get("Responsibility Center") then begin
                    FirmenAnschr1 := RespCenter.Name + ' | ' + RespCenter."Address 2" + ' | ' + RespCenter."Post Code" + ' ' + RespCenter.City;
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                end else
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                FormatAddr.ServiceOrderSellto(CustAddr, "Service Header");
                ShowShippingAddr := "Ship-to Code" <> '';
                if ShowShippingAddr then
                    FormatAddr.ServiceOrderShipto(ShipToAddr, "Service Header");
                if LogInteraction then
                    if not CurrReport.Preview then begin
                        if "Contact No." <> '' then
                            SegManagement.LogDocument(
                              25, "No.", 0, 0, Database::Contact, "Contact No.", "Salesperson Code", '', '', '')
                        else
                            SegManagement.LogDocument(
                              25, "No.", 0, 0, Database::Customer, "Customer No.", "Salesperson Code", '', '', '')
                    end;
                DebitorR.Get("Service Header"."Customer No.");
                if "Service Header"."Service Salesperson Code" <> '' then
                    if not Kundendienst.Get("Service Header"."Service Salesperson Code") then Kundendienst.Init;
                if "Payment Terms Code" = '' then
                    PaymentTerms.Init
                else
                    PaymentTerms.Get("Payment Terms Code");
                if "Shipment Method Code" = '' then
                    ShipmentMethod.Init
                else
                    ShipmentMethod.Get("Shipment Method Code");
                if "Service Header"."Currency Code" = '' then begin
                    GLSetup.Get;
                    GLSetup.TestField("LCY Code");
                    WÃ¤hrTxt := GLSetup."LCY Code";
                end else begin
                    WÃ¤hrTxt := "Service Header"."Currency Code";
                end;

                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text010, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text012, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text011, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text010, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text012, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text011, "Currency Code");
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowServiceItems; ShowServiceItems)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Zeige Serviceartikel';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                        Enabled = LogInteractionEnable;
                    }
                }
            }
        }

        trigger OnInit()
        begin
            LogInteractionEnable := true;
        end;

        trigger OnOpenPage()
        var
            DocumentType: Enum "Interaction Log Entry Document Type";
        begin
            LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Service Quote") <> '';
            LogInteractionEnable := LogInteraction;
        end;

    }

    trigger OnInitReport()
    begin
        CompanyInfo.Get;
        CompanyInfo.CalcFields(Picture); //Logo);
        CompanyInfo.CalcFields("Picture 2");
        ServiceSetup.Get;
        case ServiceSetup."Logo Position on Documents" of
            ServiceSetup."logo position on documents"::"No Logo":
                ;
            ServiceSetup."logo position on documents"::Left:
                begin
                    CompanyInfo3.Get;
                    CompanyInfo3.CalcFields(Picture);
                end;
            ServiceSetup."logo position on documents"::Center:
                begin
                    CompanyInfo1.Get;
                    CompanyInfo1.CalcFields(Picture);
                end;
            ServiceSetup."logo position on documents"::Right:
                begin
                    CompanyInfo2.Get;
                    CompanyInfo2.CalcFields(Picture);
                end;
        end;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label ' COPY';
        Text001: label 'Service Quote%1';
        Text002: label 'Page %1';
        TotalText: Text[50];
        CompanyInfo: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        CompanyInfo3: Record "Company Information";
        CompanyInfoPicture3: Record "Company Information";
        ServiceSetup: Record "Service Mgt. Setup";
        RespCenter: Record "Responsibility Center";
        Language2: Codeunit Language;
        DimSetEntry1: Record "Dimension Set Entry";
        DimSetEntry2: Record "Dimension Set Entry";
        FormatAddr: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        ServCountPrinted: Codeunit "Service-Printed";
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        Number1: Integer;
        Number2: Integer;
        ShowInternalInfo: Boolean;
        ShowShippingAddr: Boolean;
        Continue: Boolean;
        CopyText: Text[30];
        CompanyAddr: array[8] of Text[50];
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        DimText: Text[120];
        OldDimText: Text[120];
        Qty: Decimal;
        Amt: Decimal;
        TotAmt: Decimal;
        LogInteraction: Boolean;
        GrossAmt: Decimal;
        TotGrossAmt: Decimal;
        OutputNo: Integer;
        [InDataSet]
        LogInteractionEnable: Boolean;
        SerHdrOrderDateCaptionLbl: label 'Order Date';
        InvoicetoCaptionLbl: label 'Invoice to';
        CompanyInfoPhoneNoCaptionLbl: label 'Phone No.';
        ServiceHeaderEMailCaptionLbl: label 'E-Mail';
        HeaderDimensionsCaptionLbl: label 'Header Dimensions';
        ServiceItemLinesCaptionLbl: label 'Service Item Lines';
        FaultCommentsCaptionLbl: label 'Fault Comments';
        ResolutionCommentsCaptionLbl: label 'Resolution Comments';
        ServiceLineCaptionLbl: label 'Service Line';
        AmtCaptionLbl: label 'Amount';
        GrossAmountCaptionLbl: label 'Gross Amount';
        TotalCaptionLbl: label 'Total';
        LineDimensionsCaptionLbl: label 'Line Dimensions';
        ShipToAddressCaptionLbl: label 'Ship-to Address';
        HomePageCaptionLbl: label 'Home Page';
        EmailCaptionLbl: label 'E-Mail';
        DUE001: label 'Delivery Address:';
        DUE002: label 'Vielen Dank fÃ¼r Ihre Anfrage. Wir bieten wie folgt an:';
        DUE019: label 'Your Contact:';
        DUE004: label 'Quote %1';
        DUE005: label 'Always mention.';
        FirmenAnschr1: Text[120];
        DebitorR: Record Customer;
        Kundendienst: Record "Salesperson/Purchaser";
        DUE016: label 'The value added tax current at the time of the delivery applies.';
        DUE021: label 'Our general terms and conditions of sale apply.';
        DUE022: label 'You will find our general terms and conditions following www.dueperthal.com or receive them by e-mail upon request';
        PaymentTerms: Record "Payment Terms";
        ShipmentMethod: Record "Shipment Method";
        TEXT005: label 'Page %1';
        PosCpt: label 'Pos.';
        "WÃ¤hrTxt": Text[10];
        GebaudeCpt: label 'GebÃ¤ude';
        EbeneCpt: label 'Ebene';
        RaumCpt: label 'Raum';
        ServiceItem: Record "Service Item";
        QtyCaptionLbl: label 'Quantity';
        AmountCaptionLbl: label 'Amount';
        ShowServiceItems: Boolean;
        GLSetup: Record "General Ledger Setup";
        TotalExclVATText: Text[50];
        TotalInclVATText: Text[50];
        VATText: label 'MwSt.-Total 19%';
        TotalAmt: Decimal;
        TotalVATAmt: Decimal;
        TotalGrossAmt: Decimal;
        Text012: label 'Total %1 incl. VAT';
        Text011: label 'Total %1 excl. VAT';
        Text010: label 'Total %1';
        ShowQty: Option Quantity,"Quantity Invoiced";

    local procedure OnPreSectionServiceItemLine_Body11(var "Service Item Line": Record "Service Item Line");
    begin
        with "Service Item Line" do begin
            ReportForNavSetShowOutput(ShowServiceItems);
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionServiceItemLine_Header4(var "Service Item Line": Record "Service Item Line");
    begin
        with "Service Item Line" do begin
            ReportForNavSetShowOutput(ShowServiceItems);
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionServiceLine_Body7(var "Service Line": Record "Service Line");
    begin
        with "Service Line" do begin
            ReportForNavSetShowOutput(false);
        end;
    end;

    local procedure OnPreSectionServiceLine_Body3(var "Service Line": Record "Service Line");
    begin
        with "Service Line" do begin
            ReportForNavSetShowOutput(("Service Line".Type <> "Service Line".Type::" ")
           and ("Service Line"."Line Amount" <> 0));
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionServiceLine_Body5(var "Service Line": Record "Service Line");
    begin
        with "Service Line" do begin
            ReportForNavSetShowOutput(("Service Line".Type <> "Service Line".Type::" ")
            and ("Service Line"."Line Amount" = 0) and ("Service Line".Type <> "Service Line".Type::Resource));
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionServiceLine_Body2(var "Service Line": Record "Service Line");
    begin
        with "Service Line" do begin
            ReportForNavSetShowOutput("Service Line".Type = "Service Line".Type::" ");
        end;
    end;

    local procedure OnPreSectionServiceLine_Body4(var "Service Line": Record "Service Line");
    begin
        with "Service Line" do begin
            ReportForNavSetShowOutput("Service Line"."Description 2" <> '');
        end;// Autogenerated by ForNav;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'ServiceHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'ServiceItemLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceItemLine_Body11("Service Item Line");
                    jsonObject.Add('$Body11$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceItemLine_Header4("Service Item Line");
                    jsonObject.Add('$Header4$Pre', ReportForNavShowOutput);
                end;
            'ServiceLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceLine_Body7("Service Line");
                    jsonObject.Add('$Body7$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceLine_Body3("Service Line");
                    jsonObject.Add('$Body3$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceLine_Body5("Service Line");
                    jsonObject.Add('$Body5$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceLine_Body2("Service Line");
                    jsonObject.Add('$Body2$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionServiceLine_Body4("Service Line");
                    jsonObject.Add('$Body4$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
