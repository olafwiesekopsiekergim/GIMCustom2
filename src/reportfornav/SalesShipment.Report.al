#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60022 "CCO Sales Shipment"
{
    Caption = 'Sales Shipment';
    WordLayout = './Layouts/CCOSalesShipment.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Sales Shipment Header"; "Sales Shipment Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Posted Sales Shipment';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_SalesShipmentHeader; ReportForNavWriteDataItem('SalesShipmentHeader', "Sales Shipment Header")) { }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 2")
                    {
                        IncludeCaption = false;
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(E_Mail_BenutzerER; Kundendienst."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(Telefonnr_BenutzerER; Kundendienst."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(FaxNo_DebitorR; DebitorR."Fax No.")
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_DebitorR; DebitorR."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(OrderNo_SalesShipmentHeader; "Sales Shipment Header"."Order No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Sell_toCustomerNo_SalesShipmentHeader; "Sales Shipment Header"."Sell-to Customer No.")
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_SalesShipmentHeader; "Sales Shipment Header"."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
                    {
                        IncludeCaption = false;
                    }
                    column(SalesShipmentHeaderOrderDate_0_7; Format("Sales Shipment Header"."Order Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(ExternalDocumentNo_SalesShipmentHeader; "Sales Shipment Header"."External Document No.")
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; Kundendienst.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(EMail_SalesPurchPerson; SalesPurchPerson."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_SalesPurchPerson; SalesPurchPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_SalesPurchPerson; SalesPurchPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE001; DUE001)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr8; CustAddr[8])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr7; CustAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_DUE004_SalesShipmentHeaderNo_Auftragsbezug; StrSubstNo(DUE004, "Sales Shipment Header"."No.", Auftragsbezug))
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_Text003_FORMAT_ReportForNavPageNo_; StrSubstNo(Text003, Format(ReportForNav.PagePlaceHolder)))
                    {
                        IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Sales Shipment Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_72; 72) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not PostedDocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 - %2', PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1; %2 - %3', DimText,
                                        PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (PostedDocDim1.Next = 0);
                        end;

                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_74; 74) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Shipment Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // >> #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem("Sales Shipment Line"; "Sales Shipment Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemLinkReference = "Sales Shipment Header";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_76; 76) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesShipmentLine; ReportForNavWriteDataItem('SalesShipmentLine', "Sales Shipment Line")) { }
                        column(SalesShipmentLineFIELDCAPTION_Description; "Sales Shipment Line".FieldCaption(Description))
                        {
                            IncludeCaption = false;
                        }
                        column(Position_SalesShipmentLine; "Sales Shipment Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_SalesShipmentLine; "Sales Shipment Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_SalesShipmentLine; "Sales Shipment Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_SalesShipmentLine; "Sales Shipment Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE010_DebArtikelnr; StrSubstNo(DUE010, "Bill-to Customer No."))
                        {
                            IncludeCaption = false;
                        }
                        column(No_SalesShipmentLine; "Sales Shipment Line"."No.")
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_SalesShipmentLine; "Sales Shipment Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(DUE041; DUE041)
                        {
                            IncludeCaption = false;
                        }
                        column(SerialNoText_SalesShipmentLine; SerialNoText)
                        {
                            IncludeCaption = false;
                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_86; 86) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText3; DimText)
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not PostedDocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 - %2', PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1; %2 - %3', DimText,
                                            PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (PostedDocDim2.Next = 0);
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            ReportForNav.OnPreDataItem('SalesShipmentLine', "Sales Shipment Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if not ShowCorrectionLines and Correction then
                                CurrReport.Skip;
                            //  PostedDocDim2.SETRANGE("Table ID",DATABASE::"Sales Shipment Line");
                            //  PostedDocDim2.SETRANGE("Document No.","Sales Shipment Line"."Document No.");
                            //  PostedDocDim2.SETRANGE("Line No.","Sales Shipment Line"."Line No.");
                            PostedDocDim2.SetRange("Dimension Set ID", "Sales Shipment Line"."Dimension Set ID");

                            // >> CC02
                            SerialNoText := '';
                            TempTrackingSpecification.SetRange("Source Ref. No.", "Sales Shipment Line"."Line No.");
                            if TempTrackingSpecification.FindSet then begin
                                repeat
                                    if TempTrackingSpecification."Serial No." <> '' then begin
                                        if SerialNoText = '' then
                                            SerialNoText := TempTrackingSpecification."Serial No."
                                        else
                                            SerialNoText += ', ' + TempTrackingSpecification."Serial No.";
                                    end;
                                until TempTrackingSpecification.Next = 0;
                            end;
                            // << CC02
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_88; 88) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        column(DUE022; DUE022)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE021; DUE021)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE019; DUE019)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE020; DUE020)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_92; 92) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
                        trigger OnPreDataItem();
                        begin
                            if not ShowCustAddr then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total2', Total2);
                        end;

                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_93; 93) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Shipment Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        CompanyInfo.CalcFields(Picture, "Picture 2");
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;

                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := 1 + Abs(NoOfCopies);
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then
                        CopyText := Text001;

                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        ShptCountPrinted.Run("Sales Shipment Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                EMailTxt := '';
                wwwTxt := '';
                if MitLogo then;
                ReportForNav.OnPreDataItem('SalesShipmentHeader', "Sales Shipment Header");
            end;

            trigger OnAfterGetRecord();
            var
                ItemTrackingDocMgt: Codeunit "Item Tracking Doc. Management";
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //DUE
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := RespCenter.Name + '|' + RespCenter.Address + '|' + RespCenter."Post Code" + ' ' + RespCenter.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter."Address 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + '|' + CompanyInfo."Address 2" + '|' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get("CCS DM Salesperson Code 2") then
                    Clear(BenutzerER);
                DebitorR.Get("Sell-to Customer No.");
                CompanyInfo.Get;
                //DUE
                //  PostedDocDim1.SETRANGE("Table ID",DATABASE::"Sales Shipment Header");
                //  PostedDocDim1.SETRANGE("Document No.","Sales Shipment Header"."No.");
                PostedDocDim1.SetRange("Dimension Set ID", "Sales Shipment Header"."Dimension Set ID");

                if "Salesperson Code" = '' then begin
                    SalesPurchPerson.Init;
                    SalesPersonText := '';
                end else begin
                    SalesPurchPerson.Get("Salesperson Code");
                    SalesPersonText := Text000;
                    //Düperthal
                    if BenutzerER."E-Mail" = '' then
                        BenutzerER."E-Mail" := SalesPurchPerson."E-Mail";
                    if "Sales Shipment Header"."CCS DM Salesperson Code 2" <> '' then
                        if not Kundendienst.Get("Sales Shipment Header"."CCS DM Salesperson Code 2") then Kundendienst.Init;
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                FormatAddr.SalesShptShipTo(CustAddr, "Sales Shipment Header");
                FormatAddr.SalesShptBillTo(ShipToAddr, CustAddr, "Sales Shipment Header");
                ShowCustAddr := "Bill-to Customer No." <> "Sell-to Customer No.";
                for i := 1 to ArrayLen(CustAddr) do
                    if CustAddr[i] <> ShipToAddr[i] then
                        ShowCustAddr := true;
                if LogInteraction then
                    if not CurrReport.Preview then
                        SegManagement.LogDocument(
                          5, "No.", 0, 0, Database::Customer, "Sell-to Customer No.", "Salesperson Code",
                          "Campaign No.", "Posting Description", '');


                // >> CC02
                ItemTrackingDocMgt.SetRetrieveAsmItemTracking(true);
                ItemTrackingDocMgt.RetrieveDocumentItemTracking(TempTrackingSpecification, "Sales Shipment Header"."No.", Database::"Sales Shipment Header", 0);
                ItemTrackingDocMgt.SetRetrieveAsmItemTracking(false);
                // << CC02
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                    }
                    field("Show Correction Lines"; ShowCorrectionLines)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Correction Lines';
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            InitLogInteraction;
        end;

    }

    trigger OnInitReport()
    begin
        CompanyInfo.Get;
        SalesSetup.Get;
        CompanyInfo.Get;
        SalesSetup.Get;
        CompanyInfo.CalcFields(Picture, "Picture 2");//, Logo);
                                                     ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        if not CurrReport.UseRequestPage then
            InitLogInteraction;
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Salesperson';
        Text001: label 'COPY';
        Text002: label 'Sales - Shipment %1';
        Text003: label 'Page %1';
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInfo: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        PostedDocDim1: Record "Dimension Set Entry";
        PostedDocDim2: Record "Dimension Set Entry";
        Language2: Codeunit Language;
        ShptCountPrinted: Codeunit "Sales Shpt.-Printed";
        SegManagement: Codeunit SegManagement;
        RespCenter: Record "Responsibility Center";
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        SalesPersonText: Text[20];
        ReferenceText: Text[30];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        ShowCustAddr: Boolean;
        i: Integer;
        FormatAddr: Codeunit "Format Address";
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        ShowCorrectionLines: Boolean;
        "---DUE...": Integer;
        BenutzerER: Record "User Setup";
        DebitorR: Record Customer;
        ZeilenDuplikatRecSet: Record "Sales Line";
        Kundendienst: Record "Salesperson/Purchaser";
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WährTxt": Text[10];
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        LieferTerminK: Text[20];
        LieferTerminZ: Text[30];
        AusgKalkStatus: Text[30];
        AusgAngKalkStatus: Text[30];
        "AusgÜbSchrEinzelpreis/P.E.": Text[30];
        MitLogo: Boolean;
        FormOpened: Boolean;
        verwenden: Boolean;
        FrachtJN: Boolean;
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        GesKorrSumme: Decimal;
        BelegZwNetto: Decimal;
        AktuellerPosWert: array[3] of Decimal;
        "xPos.-Zus.-Zähl-Summen drucken": Boolean;
        "ZusammenzählungsText": Text[50];
        "NächsterZusammenzählungsText": Text[50];
        "PosZusammenzählungsSumme": array[3] of Decimal;
        "LetzterZusammenzählungsText": Text[50];
        "LetztePosZusammenzählungsSumme": array[3] of Decimal;
        AusgVKPreis: Decimal;
        "AusgWährTxt": Text[10];
        AusgBetragRechnsUndRabBetrag: Decimal;
        DUE001: label 'Customer:';
        DUE002: label 'E-mail:';
        DUE003: label 'Web:';
        DUE004: label 'Delivery note %1';
        DUE005: label 'Please state this no. on requests and orders.';
        DUE006: label 'We qote to our known conditions and subject to technical changes.';
        DUE007: label 'Unit Price';
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'It applies at the time of the supply the valid value added tax.';
        DUE017: label 'We hope that our offer assures to you. With all suggestions for improvement and further inquiries we are to you gladly ';
        DUE018: label 'at the disposal and assure to you in the case of order a correct execution.';
        DUE019: label 'Your Contact Person:';
        Auftragsbezug: Text[50];
        DUE020: label 'We confirm that the goods were received completely';
        DUE021: label 'and in perfect condition:';
        DUE022: label '(Date / Stamp / Signature)';
        DUE041: label 'Delivery address = Recipient of service/delivery and Delivery date = Date of service/delivery rendered';
        TempTrackingSpecification: Record "Tracking Specification" temporary;
        SerialNoText: Text;
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";
        TempTMLine: Record "CCS TM Line Document" temporary;

    procedure InitLogInteraction()
    var
        DocumentType: Enum "Interaction Log Entry Document Type";
    begin
        LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Shpt. Note") <> '';
    end;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionPageLoop_Header2(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput(CurrReport.PageNo <= 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body8(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body9(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body12(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput(Type.AsInteger() = 0)// AND
                                                           //					  (Schriftattribut <> Schriftattribut::fett ));
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body13(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput((Type = Type::"G/L Account") and (not ShowInternalInfo));
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body14(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            // ReportForNavSetShowOutput((Type = 0) AND
            //					  (Schriftattribut = Schriftattribut::fett ));
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body15(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput((Type = Type::"G/L Account") and (not ShowInternalInfo));
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body16(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput((Type = Type::Item) and
                                  (not FrachtJN));// AND
                                                  // ("Bill-to Customer No." <> ''));	 //c/gw180800 Deb.Art.. hier noch dazu
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body17(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput((Type = Type::Item) and
                                  (not FrachtJN));// AND
                                                  // ("Bill-to Customer No." = ''));	 //c/gw180800 Deb.Art.. hier noch dazu
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body18(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput(Type = Type::Resource);
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body19(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            ReportForNavSetShowOutput("Description 2" <> '');
        end;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body1(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
            // >> CC02
            ReportForNavSetShowOutput(SerialNoText <> '');
            // << CC02
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionDimensionLoop2_Body21(var DimensionLoop2: Record Integer);
    begin
        with DimensionLoop2 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop2_Body22(var DimensionLoop2: Record Integer);
    begin
        with DimensionLoop2 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'SalesShipmentHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'PageLoop':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header2(PageLoop);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop1':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body8(DimensionLoop1);
                    jsonObject.Add('$Body8$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body9(DimensionLoop1);
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                end;
            'SalesShipmentLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body12("Sales Shipment Line");
                    jsonObject.Add('$Body12$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body13("Sales Shipment Line");
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body14("Sales Shipment Line");
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body15("Sales Shipment Line");
                    jsonObject.Add('$Body15$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body16("Sales Shipment Line");
                    jsonObject.Add('$Body16$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body17("Sales Shipment Line");
                    jsonObject.Add('$Body17$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body18("Sales Shipment Line");
                    jsonObject.Add('$Body18$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body19("Sales Shipment Line");
                    jsonObject.Add('$Body19$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body1("Sales Shipment Line");
                    jsonObject.Add('$Body1$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop2':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop2_Body21(DimensionLoop2);
                    jsonObject.Add('$Body21$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop2_Body22(DimensionLoop2);
                    jsonObject.Add('$Body22$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
