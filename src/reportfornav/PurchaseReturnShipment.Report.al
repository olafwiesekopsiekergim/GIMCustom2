#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60026 "CCO Purchase Return Shipment"
{
    Caption = 'Purchase Return Shipment';
    Permissions = TableData "User Setup" = r;
    WordLayout = './Layouts/CCOPurchaseReturnShipment.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Purchase Header"; "Purchase Header")
        {
            DataItemTableView = sorting("Document Type", "No.") where("Document Type" = const("Return Order"));
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Einkaufsauftrag';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PurchaseHeader; ReportForNavWriteDataItem('PurchaseHeader', "Purchase Header")) { }
            dataitem(KopieSchleife; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_KopieSchleife; ReportForNavWriteDataItem('KopieSchleife', KopieSchleife)) { }
                dataitem(SeiteSchleife; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_SeiteSchleife; ReportForNavWriteDataItem('SeiteSchleife', SeiteSchleife)) { }
                    column(ItemDrawing_Description; '')
                    {
                        IncludeCaption = false;
                    }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 3")
                    {
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(CustomsPermitNo_CompanyInfo; CompanyInfo."Customs Permit No.")
                    {
                        IncludeCaption = false;
                    }
                    column(VATRegistrationNo_CompanyInfo; CompanyInfo."VAT Registration No.")
                    {
                        IncludeCaption = false;
                    }
                    column(PurchaseHeaderOrderDate_0_7; Format("Purchase Header"."Order Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(Lieferanschrift_; 'Lieferanschrift:')
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr7; LieferAnAdr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr6; LieferAnAdr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr5; LieferAnAdr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr4; LieferAnAdr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr3; LieferAnAdr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr2; LieferAnAdr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(LieferAnAdr1; LieferAnAdr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_PurchaseHeader; "Purchase Header"."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(VerkEinkPersonTelefaxnr; VerkEinkPerson."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; User."Full Name")
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(Name_VerkEinkPerson; VerkEinkPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Buy_fromVendorNo_PurchaseHeader; "Purchase Header"."Buy-from Vendor No.")
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_VerkEinkPerson; VerkEinkPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr7; DebAdr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr6; DebAdr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr5; DebAdr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr4; DebAdr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr3; DebAdr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr2; DebAdr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(DebAdr1; DebAdr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(BittebeiRuckfragenundGutschriftenunbedingtangeben_; 'Bitte immer angeben!')
                    {
                        IncludeCaption = false;
                    }
                    column(RucksendungNr_PurchaseHeaderNo_DireklAuftrag; 'RÃ¼cksendung Nr. ' + "Purchase Header"."No." + DireklAuftrag)
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_SeitePct1_FORMAT_ReportForNavPageNo_; StrSubstNo('Seite %1', Format(ReportForNav.PagePlaceHolder)))
                    {
                        IncludeCaption = false;
                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemLinkReference = SeiteSchleife;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_69; 69) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Purchase Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // >> #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem("Purchase Line"; "Purchase Line")
                    {
                        DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
                        DataItemLinkReference = "Purchase Header";
                        DataItemTableView = sorting("Document Type", "Document No.", "Line No.") order(ascending);
                        column(ReportForNavId_71; 71) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_PurchaseLine; ReportForNavWriteDataItem('PurchaseLine', "Purchase Line")) { }
                        column(Position_PurchaseLine; "Purchase Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_PurchaseLine; "Purchase Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_PurchaseLine; "Purchase Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_PurchaseLine; "Purchase Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(No___VendorItemNo; "No." + '   /   ' + "Vendor Item No.")
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_PurchaseLine; "Purchase Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(AbmessungText; AbmessungText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            MWSTBetragZeile.DeleteAll;
                            MehrZeilen := Find('+');
                            while MehrZeilen and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
                                MehrZeilen := Next(-1) <> 0;
                            if not MehrZeilen then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            ReportForNav.OnPreDataItem('PurchaseLine', "Purchase Line");
                        end;

                        trigger OnAfterGetRecord();
                        var
                            ArtikelR: Record Item;
                            "MaÃeText": array[4] of Text[10];
                            i: Integer;
                        begin
                            MWSTBetragZeile.Init;
                            MWSTBetragZeile."VAT %" := "VAT %";
                            MWSTBetragZeile."VAT Base" := Amount;
                            MWSTBetragZeile."Amount Including VAT" := "Amount Including VAT";
                            MWSTBetragZeile.InsertLine;
                            //WA/c/11.11.98 - lieferantenart. nr. andrucken
                            ArtInfoZeichn := '';
                            ArtInfoAbm := '';
                            case "Purchase Line".Type of
                            // "Purchase Line".Type::Item:
                            //	 begin
                            //		 if not Item.Get("Purchase Line"."No.") then
                            //			 Item.Init;
                            //		 ItemDrawing.SetRange("Item No.", Item."No.");
                            //		 if ItemDrawing.FindLast then;
                            //		 if (ItemDrawing.Description + Item.Abmessung1 + Item.Abmessung2 + Item.Abmessung3) = '' then
                            //			 ItemDrawing.Description := ''
                            //		 else begin
                            //			 if ItemDrawing.Description <> '' then
                            //				 ArtInfoZeichn := StrSubstNo(DUE020, ItemDrawing.Description);
                            //			 if (Item.Abmessung1 + Item.Abmessung2 + Item.Abmessung3) <> '' then
                            //				 ArtInfoAbm := StrSubstNo(DUE021, Item.Abmessung1, Item.Abmessung2, Item.Abmessung3);
                            //			 if (ArtInfoZeichn <> '') and (ArtInfoAbm <> '') then
                            //				 ItemDrawing.Description := StrSubstNo('%1 - %2', ArtInfoZeichn, ArtInfoAbm)
                            //			 else
                            //				 if (ArtInfoZeichn <> '') then
                            //					 ItemDrawing.Description := ArtInfoZeichn
                            //				 else
                            //					 ItemDrawing.Description := ArtInfoAbm;
                            //		 end;
                            //	 end;
                            // else
                            //	 ItemDrawing.Description := '';
                            end;
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_79; 79) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        column(V_Datum_Stempel_Unterschrift_; '(Datum / Stempel / Unterschrift)')
                        {
                            IncludeCaption = false;
                        }
                        column(derWarewirdbestatigt_; 'der Ware wird bestÃ¤tigt:')
                        {
                            IncludeCaption = false;
                        }
                        column(DervollstandigeErhaltundeinwandfreieZustand; 'Der vollstÃ¤ndige Erhalt und einwandfreie Zustand')
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemLinkReference = SeiteSchleife;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_83; 83) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Purchase Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('SeiteSchleife', SeiteSchleife);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    AnzSchleifen := Abs(AnzKopien) + 1;
                    KopieText := '';
                    SetRange(Number, 1, AnzSchleifen);
                    ReportForNav.OnPreDataItem('KopieSchleife', KopieSchleife);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then
                        KopieText := 'KOPIE';

                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        EinkDruckZÃ¤hler.Run("Purchase Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                CompanyInfo.Get;
                FibuEinrR.Get;
                EKEinrR.Get;
                EMailTxt := '';
                wwwTxt := '';
                FormatAddr.Company(FirmaAdr, CompanyInfo);
                CompanyInfo.CalcFields(Picture, "Picture 3");
                ///c/AW/270303: - Logo fÃ¼r PDF-Druck implementiert
                //IF MitLogo THEN
                //CompanyInfo.CALCFIELDS("Logo fÃ¼r Angebotskopf");
                ///AW End
                if InteressentR."No." <> '' then begin
                    InteressentR.Get(InteressentR."No.");
                    FirmenAnschr2 := InteressentR.Name + ' ' + InteressentR."Name 2" + ' - ' + InteressentR."Address 2" + ' - ' +
                                     InteressentR."Post Code" + ' ' + InteressentR.City;
                    FirmenAnschr1 := InteressentR.Name + ' ' + InteressentR."Name 2" + ' - ' +
                                     InteressentR."Post Code" + ' ' + InteressentR.City;
                    MailTxt := InteressentR."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := 'E-mail:';
                    WebTxt := InteressentR."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := 'Web:';
                    FonTxt := InteressentR."Phone No.";
                    faxTxt := InteressentR."Fax No.";
                end else begin
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr1 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := 'E-mail:';
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := 'Web:';
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                ReportForNav.OnPreDataItem('PurchaseHeader', "Purchase Header");
            end;

            trigger OnAfterGetRecord();
            begin
                //DUE
                //"Purchase Header".CALCFIELDS("Direct Job Shipment");//Direktlief. Auftragsnummern
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter.Address + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo.Address + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get(Sachbearbeiter) then
                    Clear(BenutzerER);
                Clear(User);
                if User.Get(Sachbearbeiter) then;
                //Firmendaten := CompanyInfo;
                //CompanyInfo.CALCFIELDS(Logo);
                //DUE
                if not VerkEinkPerson.Get("Purchaser Code") then
                    Clear(VerkEinkPerson);
                if not BenutzerER.Get(Sachbearbeiter) then
                    Clear(BenutzerER);
                //c/wa/080699: - Fixtermin wieder rein (Herr Freund)
                //"Purchase Header".CALCFIELDS("Direct Job Shipment");
                //IF "Purchase Header"."Direct Job Shipment"<> FALSE THEN BEGIN
                LieferTerminK := '';
                if VKK.Get(VKK."document type"::Order, "CCS PR Direct Job Shipment") then
                    LieferDatumKopf := VKK."Shipment Date";
                begin
                    //LieferTerminK := "Purchase Header"."fix-Termin Lieferung";
                    LieferDatumKopf := "Expected Receipt Date";
                end;
                LieferTerminKopf();
                FormatAddr.PurchHeaderBuyFrom(DebAdr, "Purchase Header");
                if not ZlgBed.Get("Payment Terms Code") then
                    Clear(ZlgBed);
                if not LieferBed.Get("Shipment Method Code") then
                    Clear(LieferBed);
                FormatAddr.PurchHeaderShipTo(LieferAnAdr, "Purchase Header");
                KreditorR.Get("Purchase Header"."Buy-from Vendor No.");
                if LieferAnAdr[1] = '' then
                    LieferAnAdr[1] := 'An unsere Anschrift';
                if "Purchase Header"."Currency Code" = '' then begin
                    FibuEinrR.Get;
                    FibuEinrR.TestField(FibuEinrR."LCY Code");
                    WÃ¤hrTxt := FibuEinrR."LCY Code";
                end else begin
                    WÃ¤hrTxt := "Purchase Header"."Currency Code";
                end;
                //Direktlieferungsnr. kalkulieren
                //"Purchase Header".CALCFIELDS("Direktlief. Auftragsnummern");
                //IF "Direktlief. Auftragsnummern"<>'' THEN
                //  DireklAuftrag := ' / '+"Direktlief. Auftragsnummern"
                //ELSE
                //  DireklAuftrag := '';
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(AnzKopien; AnzKopien)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Anzahl Kopien';
                    }
                    field(MitLogo; MitLogo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Mit Logo';
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            //c/gw/220502: - Stichwort Interresent."Alternativer Absender"
            Clear(InteressentR);
            ///c/AW/110705: - wegen Druck ohne Requestform
            FormOpened := true;
            ///AW End
            MitLogo := true;
        end;

    }

    trigger OnInitReport()
    begin
        InteressentR."No." := '455930';
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        ;
        ReportsForNavPre;
    end;

    var
        Item: Record Item;
        ArtInfoAbm: Text[80];
        ArtInfoZeichn: Text[80];
        //ItemDrawing: Record UnknownRecord5013401;

        BenutzerER: Record "User Setup";
        User: Record User;
        InteressentR: Record Contact;
        KreditorR: Record Vendor;
        LieferBed: Record "Shipment Method";
        ZlgBed: Record "Payment Terms";
        VerkEinkPerson: Record "Salesperson/Purchaser";
        MWSTBetragZeile: Record "VAT Amount Line" temporary;
        VKK: Record "Sales Header";
        "EinkDruckZÃ¤hler": Codeunit "Purch.Header-Printed";
        FormatAddr: Codeunit "Format Address";
        DebAdr: array[8] of Text[50];
        LieferAnAdr: array[8] of Text[50];
        FirmaAdr: array[8] of Text[50];
        "VerkÃ¤uferText": Text[30];
        ReferenzText: Text[30];
        MehrZeilen: Boolean;
        AnzKopien: Integer;
        AnzSchleifen: Integer;
        KopieText: Text[30];
        LiefAdrAnzeigen: Boolean;
        i: Integer;
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WÃ¤hrTxt": Text[10];
        FibuEinrR: Record "General Ledger Setup";
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        EKEinrR: Record "Purchases & Payables Setup";
        FrachtJN: Boolean;
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        DireklAuftrag: Text[30];
        LieferTerminK: Text[20];
        AbmessungText: Text[120];
        LieferDatumKopf: Date;
        MitLogo: Boolean;
        FormOpened: Boolean;
        RespCenter: Record "Responsibility Center";
        CompanyAddr: array[8] of Text[50];
        CompanyInfo: Record "Company Information";
        DUE001: label 'Ship-to Address:';
        DUE002: label 'E-mail:';
        DUE003: label 'Web:';
        DUE004: label 'Quote No. %1 %2';
        DUE005: label 'Always state.';
        DUE006: label 'We qote to our known conditions and subject to technical changes.';
        DUE007: label 'Unit Price';
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'It applies at the time of the supply the valid value added tax.';
        DUE017: label 'We hope that our offer assures to you. With all suggestions for improvement and further inquiries we are to you gladly ';
        DUE018: label 'at the disposal and assure to you in the case of order a correct execution.';
        DUE019: label 'Best regards';
        DUE020: label 'Zchgnr.%1';
        DUE021: label 'Abm.%1 x %2 x %3';
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";

        TempTMLine: Record "CCS TM Line Document" temporary;

    procedure LieferTerminKopf()
    var
        Int1: Integer;
        Int2: Integer;
        Jahr: Code[10];
        Woche: Code[10];
    begin
        //Liefertermin TEXT[20] zuweisen
        if (LieferTerminK = '') and (LieferDatumKopf <> 0D) then begin
            Int1 := Date2dwy(LieferDatumKopf, 3);
            Int2 := Date2dwy(LieferDatumKopf, 2);
            Jahr := Format(Int1);
            Jahr := CopyStr(Jahr, 3, 2);
            Woche := Format(Int2);
            if StrLen(Woche) < 2 then
                Woche := '0' + Woche;
            //Kundenliefertermin := Jahr + Woche;
            //c/jk/211098 ende
            LieferTerminK := Jahr + '/' + Woche;
        end;
    end;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionSeiteSchleife_Header2(var SeiteSchleife: Record Integer);
    begin
        with SeiteSchleife do begin
            ReportForNavSetShowOutput(CurrReport.PageNo <= 1);
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body11(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput(Type.AsInteger() = 0) //AND
                                                            //					  (Schriftattribut <> Schriftattribut::fett ));
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body12(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            //ReportForNavSetShowOutput((Type = 0) AND
            // (Schriftattribut = Schriftattribut::fett ));
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body13(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput(Type = Type::"G/L Account");
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body14(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput((Type = Type::Item) and
                                  not FrachtJN);
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body15(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput("Purchase Line"."Description 2" <> '');
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body16(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput(false);
            //
            //ReportForNavSetShowOutput((Type = Type::Item) and
            //					(ItemDrawing.Description <> ''));
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Body17(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput(("Purchase Line"."Line Discount %" <> 0) and
                                  not FrachtJN);
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Footer19(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput("Inv. Discount Amount" <> 0);
        end;
    end;

    local procedure OnPreSectionPurchaseLine_Footer20(var "Purchase Line": Record "Purchase Line");
    begin
        with "Purchase Line" do begin
            ReportForNavSetShowOutput((FrachtKost + VerpackKost) <> 0);
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavPurchaseLineBuffer: Array[4] of Decimal;
        ReportForNavPurchaseLineTotals: Array[4] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'SeiteSchleife':
                begin
                    ReportForNavPurchaseLineTotals[1] := 0;
                    ReportForNavPurchaseLineTotals[2] := 0;
                    ReportForNavPurchaseLineTotals[3] := 0;
                    ReportForNavPurchaseLineTotals[4] := 0;
                    ReportForNavShowOutput := true;
                    OnPreSectionSeiteSchleife_Header2(SeiteSchleife);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                end;
            'PurchaseLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body11("Purchase Line");
                    jsonObject.Add('$Body11$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body12("Purchase Line");
                    jsonObject.Add('$Body12$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body13("Purchase Line");
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body14("Purchase Line");
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body15("Purchase Line");
                    jsonObject.Add('$Body15$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body16("Purchase Line");
                    jsonObject.Add('$Body16$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchaseLine_Body17("Purchase Line");
                    jsonObject.Add('$Body17$Pre', ReportForNavShowOutput);
                    with "Purchase Line" do begin
                        ReportForNavPurchaseLineTotals[1] += Amount;
                        ReportForNavPurchaseLineBuffer[1] := Amount;
                        Amount := ReportForNavPurchaseLineTotals[1];
                        ReportForNavPurchaseLineTotals[2] += "Amount Including VAT";
                        ReportForNavPurchaseLineBuffer[2] := "Amount Including VAT";
                        "Amount Including VAT" := ReportForNavPurchaseLineTotals[2];
                        ReportForNavPurchaseLineTotals[3] += "Inv. Discount Amount";
                        ReportForNavPurchaseLineBuffer[3] := "Inv. Discount Amount";
                        "Inv. Discount Amount" := ReportForNavPurchaseLineTotals[3];
                        ReportForNavPurchaseLineTotals[4] += "Line Discount Amount";
                        ReportForNavPurchaseLineBuffer[4] := "Line Discount Amount";
                        "Line Discount Amount" := ReportForNavPurchaseLineTotals[4];
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchaseLine_Footer19("Purchase Line");
                        jsonObject.Add('$Footer19$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchaseLine_Footer20("Purchase Line");
                        jsonObject.Add('$Footer20$Pre', ReportForNavShowOutput);
                        Amount := ReportForNavPurchaseLineBuffer[1];
                        "Amount Including VAT" := ReportForNavPurchaseLineBuffer[2];
                        "Inv. Discount Amount" := ReportForNavPurchaseLineBuffer[3];
                        "Line Discount Amount" := ReportForNavPurchaseLineBuffer[4];
                    end;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
