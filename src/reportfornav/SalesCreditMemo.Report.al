#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60028 "CCO Sales Credit Memo"
{
    Caption = 'Sales Credit Memo';
    Permissions = TableData "Sales Shipment Buffer" = rimd;
    WordLayout = './Layouts/CCOSalesCreditMemo.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Sales Cr.Memo Header"; "Sales Cr.Memo Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Posted Sales Credit Memo';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_SalesCrMemoHeader; ReportForNavWriteDataItem('SalesCrMemoHeader', "Sales Cr.Memo Header")) { }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(Auftragsnummer; "Sales Cr.Memo Header"."Order No.")
                    {
                    }
                    column(Rechnungsnummer; "Sales Cr.Memo Header"."Invoice No.")
                    {
                    }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 2")
                    {
                        IncludeCaption = false;
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(E_Mail_BenutzerER; Kundendienst."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(ExternalDocumentNo_SalesCrMemoHeader; "Sales Cr.Memo Header"."External Document No.")
                    {
                        IncludeCaption = false;
                    }
                    column(CopyText; CopyText)
                    {
                        IncludeCaption = false;
                    }
                    column(SalesCrMemoHeaderDueDate_0_7; Format("Sales Cr.Memo Header"."Due Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(VATRegistrationNo_SalesCrMemoHeader; "Sales Cr.Memo Header"."VAT Registration No.")
                    {
                        IncludeCaption = false;
                    }
                    column(SalesCrMemoHeaderDocumentDate_0_7; Format("Sales Cr.Memo Header"."Document Date", 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(UstIDText; UstIDText)
                    {
                        IncludeCaption = false;
                    }
                    column(Sell_toCustomerNo_SalesCrMemoHeader; "Sales Cr.Memo Header"."Sell-to Customer No.")
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_SalesCrMemoHeader; "Sales Cr.Memo Header"."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(OurAccountNo_DebitorR; DebitorR."Our Account No.")
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Telefonnr_BenutzerER; Kundendienst."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; Kundendienst.Name)
                    {
                    }
                    column(PhoneNo_SalesPurchPerson; SalesPurchPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(EMail_SalesPurchPerson; SalesPurchPerson."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_SalesPurchPerson; SalesPurchPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE001; DUE001)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr8; CustAddr[8])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr7; CustAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr6; CustAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr5; CustAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr4; CustAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr3; CustAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr2; CustAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(CustAddr1; CustAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE005; DUE005)
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_DUE004_SalesCrMemoHeaderNo; StrSubstNo(DUE004, "Sales Cr.Memo Header"."No."))
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_SeitePct1_FORMAT_ReportForNavPageNo_; StrSubstNo('Seite %1', Format(ReportForNav.PagePlaceHolder)))
                    {
                        IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Sales Cr.Memo Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_74; 74) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not PostedDocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 %2', PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (PostedDocDim1.Next = 0);
                        end;

                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_76; 76) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Cr.Memo Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // >> #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem("Sales Cr.Memo Line"; "Sales Cr.Memo Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemLinkReference = "Sales Cr.Memo Header";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_78; 78) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesCrMemoLine; ReportForNavWriteDataItem('SalesCrMemoLine', "Sales Cr.Memo Line")) { }
                        column(AusgUbSchrEinzelpreis_PE; "AusgÜbSchrEinzelpreis/P.E.")
                        {
                            IncludeCaption = false;
                        }
                        column(WahrTxt; WährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(LineAmount_GesKorrSumme; "Line Amount" - GesKorrSumme)
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(PosZusammenzahlungsSumme1; PosZusammenzählungsSumme[1])
                        {
                            IncludeCaption = false;
                        }
                        column(ZusammenzahlungsText; ZusammenzählungsText)
                        {
                            IncludeCaption = false;
                        }
                        column(Position_SalesCrMemoLine; "Sales Cr.Memo Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_SalesCrMemoLine; "Sales Cr.Memo Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(BelegZwNetto; BelegZwNetto)
                        {
                            IncludeCaption = false;
                        }
                        column(PostedReceiptDate; PostedReceiptDate)
                        {
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_SalesCrMemoLine; "Sales Cr.Memo Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_SalesCrMemoLine; "Sales Cr.Memo Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(No_SalesCrMemoLine; "Sales Cr.Memo Line"."No.")
                        {
                            IncludeCaption = false;
                        }
                        column(AusgWahrTxt; AusgWährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgVKPreis; AusgVKPreis)
                        {
                            IncludeCaption = false;
                        }
                        column(AusgBetragRechnsUndRabBetrag; AusgBetragRechnsUndRabBetrag)
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE010_DebArtikelnr; StrSubstNo(DUE010, "Bill-to Customer No."))
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_SalesCrMemoLine; "Sales Cr.Memo Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(LetztePosZusammenzahlungsSumme; LetztePosZusammenzählungsSumme)
                        {
                            IncludeCaption = false;
                        }
                        column(LetzterZusammenzahlungsText; LetzterZusammenzählungsText)
                        {
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE011_FORMAT_LineDiscountPct_; StrSubstNo(DUE011, Format("Line Discount %")))
                        {
                            IncludeCaption = false;
                        }
                        column(InvDiscountAmount_SalesCrMemoLine; -"Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(STRSUBSTNO_DUE011_SalesCrMemoHeaderInvoiceDiscCode; StrSubstNo(DUE011, "Sales Cr.Memo Header"."Invoice Disc. Code"))
                        {
                            IncludeCaption = false;
                        }
                        column(VerpackKost; VerpackKost)
                        {
                            IncludeCaption = false;
                        }
                        column(FrachtKost; FrachtKost)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE015; DUE015)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE014; DUE014)
                        {
                            IncludeCaption = false;
                        }
                        column(AmountIncludingVAT_SalesCrMemoLine; "Sales Cr.Memo Line"."Amount Including VAT")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalInclVATText; TotalInclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(AmountIncludingVAT_Amount; "Amount Including VAT" - Amount)
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(LineAmount_InvDiscountAmount; "Line Amount" - "Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalExclVATText; TotalExclVATText)
                        {
                            IncludeCaption = false;
                        }
                        dataitem("Sales Shipment Buffer"; Integer)
                        {
                            DataItemTableView = sorting(Number);
                            column(ReportForNavId_111; 111) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_SalesShipmentBuffer; ReportForNavWriteDataItem('SalesShipmentBuffer', "Sales Shipment Buffer")) { }
                            column(Quantity_SalesShipmentBuffer; SalesShipmentBuffer.Quantity)
                            {
                                DecimalPlaces = 0 : 5;
                                IncludeCaption = false;
                            }
                            column(PostingDate_SalesShipmentBuffer; SalesShipmentBuffer."Posting Date")
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                SetRange(Number, 1, SalesShipmentBuffer.Count);
                                ReportForNav.OnPreDataItem('SalesShipmentBuffer', "Sales Shipment Buffer");
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then
                                    SalesShipmentBuffer.Find('-')
                                else
                                    SalesShipmentBuffer.Next;
                            end;

                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_114; 114) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText3; DimText)
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                // PostedDocDim2.SETRANGE("Table ID",DATABASE::"Sales Cr.Memo Line");
                                // PostedDocDim2.SETRANGE("Document No.","Sales Cr.Memo Line"."Document No.");
                                // PostedDocDim2.SETRANGE("Line No.","Sales Cr.Memo Line"."Line No.");
                                PostedDocDim2.SetRange("Dimension Set ID", "Sales Cr.Memo Line"."Dimension Set ID");
                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not PostedDocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 %2', PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (PostedDocDim2.Next = 0);
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            VATAmountLine.DeleteAll;
                            SalesShipmentBuffer.Reset;
                            SalesShipmentBuffer.DeleteAll;
                            FirstValueEntryNo := 0;
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            VerpackKost := 0;
                            FrachtKost := 0;
                            //c/gw/160502: - Stichwort: PositonsZusammenzählung
                            /*IF NOT "Sales Cr.Memo Header"."Pos.-Zus.-Zähl-Summen drucken" THEN
													  "AusgÜbSchrEinzelpreis/P.E." := DUE007
													ELSE
													  MarkZeilenDuplikatErstellen("Sales Cr.Memo Line");*/ // siehe Komentar dort besonders betreff Fracht-Artikel

                            ReportForNav.OnPreDataItem('SalesCrMemoLine', "Sales Cr.Memo Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            SalesShipmentBuffer.DeleteAll;
                            PostedReceiptDate := 0D;
                            if Quantity <> 0 then
                                PostedReceiptDate := FindPostedShipmentDate;
                            if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
                                "No." := '';
                            VATAmountLine.Init;
                            VATAmountLine."VAT Identifier" := "VAT Identifier";
                            VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                            VATAmountLine."Tax Group Code" := "Tax Group Code";
                            VATAmountLine."VAT %" := "VAT %";
                            VATAmountLine."VAT Base" := Amount;
                            VATAmountLine."Amount Including VAT" := "Amount Including VAT";
                            VATAmountLine."Line Amount" := "Line Amount";
                            if "Allow Invoice Disc." then
                                VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
                            VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
                            VATAmountLine.InsertLine;
                        end;

                    }
                    dataitem(VATCounter; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_116; 116) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter', VATCounter)) { }
                        column(InvoiceDiscountAmount_VATAmountLine; VATAmountLine."Invoice Discount Amount")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(InvDiscBaseAmount_VATAmountLine; VATAmountLine."Inv. Disc. Base Amount")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(LineAmount_VATAmountLine; VATAmountLine."Line Amount")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATAmount_VATAmountLine; VATAmountLine."VAT Amount")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATBase_VATAmountLine; VATAmountLine."VAT Base")
                        {
                            AutoFormatExpression = "Sales Cr.Memo Header"."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATIdentifier_VATAmountLine; VATAmountLine."VAT Identifier")
                        {
                            IncludeCaption = false;
                        }
                        column(VATPct_VATAmountLine; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if VATAmountLine.GetTotalVATAmount = 0 then
                                CurrReport.Break;
                            if VATAmountLine.Count = 1 then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            ReportForNav.OnPreDataItem('VATCounter', VATCounter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                        end;

                    }
                    dataitem(VATCounterLCY; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_124; 124) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounterLCY; ReportForNavWriteDataItem('VATCounterLCY', VATCounterLCY)) { }
                        column(VALExchRate; VALExchRate)
                        {
                            IncludeCaption = false;
                        }
                        column(VALSpecLCYHeader; VALSpecLCYHeader)
                        {
                            IncludeCaption = false;
                        }
                        column(VALVATBaseLCY; VALVATBaseLCY)
                        {
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VALVATAmountLCY; VALVATAmountLCY)
                        {
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(VATIdentifier_VATAmountLine2; VATAmountLine."VAT Identifier")
                        {
                            IncludeCaption = false;
                        }
                        column(VATPct_VATAmountLine2; VATAmountLine."VAT %")
                        {
                            DecimalPlaces = 0 : 5;
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if (not GLSetup."Print VAT specification in LCY") or
                               ("Sales Cr.Memo Header"."Currency Code" = '') or
                               (VATAmountLine.GetTotalVATAmount = 0) then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            if GLSetup."LCY Code" = '' then
                                VALSpecLCYHeader := Text008 + Text009
                            else
                                VALSpecLCYHeader := Text008 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Sales Cr.Memo Header"."Posting Date", "Sales Cr.Memo Header"."Currency Code", 1);
                            CalculatedExchRate := ROUND(1 / "Sales Cr.Memo Header"."Currency Factor" * CurrExchRate."Exchange Rate Amount", 0.000001);
                            VALExchRate := StrSubstNo(Text010, CalculatedExchRate, CurrExchRate."Exchange Rate Amount");
                            ReportForNav.OnPreDataItem('VATCounterLCY', VATCounterLCY);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Sales Cr.Memo Header"."Currency Factor");
                            VALVATAmountLCY := ROUND(VATAmountLine."VAT Amount" / "Sales Cr.Memo Header"."Currency Factor");
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_131; 131) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        column(DUE041; DUE041)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE022; DUE022)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE021; DUE021)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE019; DUE019)
                        {
                            IncludeCaption = false;
                        }
                        column(DUE020; DUE020)
                        {
                            IncludeCaption = false;
                        }
                        column(Description_PaymentTerms; PaymentTerms.Description)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_138; 138) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
                        trigger OnPreDataItem();
                        begin
                            if not ShowShippingAddr then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total2', Total2);
                        end;

                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemLinkReference = PageLoop;
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_139; 139) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                            IncludeCaption = false;
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Purchase Header",
                                //									"Purchase Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Cr.Memo Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        CompanyInfo.CalcFields(Picture, "Picture 2");
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;

                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin

                    if Number > 1 then
                        CopyText := Text004;
                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        SalesCrMemoCountPrinted.Run("Sales Cr.Memo Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                wwwTxt := '';
                if MitLogo then;
                ReportForNav.OnPreDataItem('SalesCrMemoHeader', "Sales Cr.Memo Header");
            end;

            trigger OnAfterGetRecord();
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //DUE
                if "Payment Terms Code" = '' then
                    PaymentTerms.Init
                else
                    PaymentTerms.Get("Payment Terms Code");
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := RespCenter.Name + '|' + RespCenter.Address + '|' + RespCenter."Post Code" + ' ' + RespCenter.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter."Address 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + '|' + CompanyInfo."Address 2" + '|' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get("CCS DM Salesperson Code 2") then
                    Clear(BenutzerER);
                DebitorR.Get("Sell-to Customer No.");
                //c/gw/160502: - Stichwort: PositonsZusammenzählung
                /*IF NOT "Pos.-Zus.-Zähl-Summen drucken" THEN
							  "AusgÜbSchrEinzelpreis/P.E." :=  DUE007
							ELSE
							  "AusgÜbSchrEinzelpreis/P.E." := '';*/
                if "Currency Code" = '' then begin
                    GLSetup.Get;
                    GLSetup.TestField("LCY Code");
                    WährTxt := GLSetup."LCY Code";
                end else begin
                    WährTxt := "Currency Code";
                end;

                //UstID bei Innergemeinschaftlichen versand
                if "VAT Registration No." <> '' then
                    UstIDText := DUE031
                else
                    UstIDText := '';
                //Innergemeinschaflt. Lieferung (Steuerhinweis)
                LiefInnerg_DrittlandText := '';
                case "VAT Bus. Posting Group" of
                    'AUSL.':
                        LiefInnerg_DrittlandText := DUE033;
                    'EU':
                        LiefInnerg_DrittlandText := DUE032;
                end;
                //DUE Ende
                // PostedDocDim1.SETRANGE("Table ID",DATABASE::"Sales Cr.Memo Header");
                // PostedDocDim1.SETRANGE("Document No.","Sales Cr.Memo Header"."No.");
                PostedDocDim1.SetRange("Dimension Set ID", "Sales Cr.Memo Header"."Dimension Set ID");

                if "Return Order No." = '' then
                    ReturnOrderNoText := ''
                else
                    ReturnOrderNoText := FieldCaption("Return Order No.");
                if "Salesperson Code" = '' then begin
                    SalesPurchPerson.Init;
                    SalesPersonText := '';
                end else begin
                    SalesPurchPerson.Get("Salesperson Code");
                    SalesPersonText := Text000;
                    //Düperthal
                    if BenutzerER."E-Mail" = '' then
                        BenutzerER."E-Mail" := SalesPurchPerson."E-Mail";
                    if "Sales Cr.Memo Header"."CCS DM Salesperson Code 2" <> '' then
                        if not Kundendienst.Get("Sales Cr.Memo Header"."CCS DM Salesperson Code 2") then Kundendienst.Init;
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text007, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text001, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text002, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text007, "Currency Code");
                end;
                FormatAddr.SalesCrMemoBillTo(CustAddr, "Sales Cr.Memo Header");
                if "Applies-to Doc. No." = '' then
                    AppliedToText := ''
                else
                    AppliedToText := StrSubstNo(Text003, "Applies-to Doc. Type", "Applies-to Doc. No.");
                FormatAddr.SalesCrMemoShipTo(ShipToAddr, CustAddr, "Sales Cr.Memo Header");
                ShowShippingAddr := "Sell-to Customer No." <> "Bill-to Customer No.";
                for i := 1 to ArrayLen(ShipToAddr) do
                    if ShipToAddr[i] <> CustAddr[i] then
                        ShowShippingAddr := true;
                if LogInteraction then
                    if not CurrReport.Preview then
                        SegManagement.LogDocument(
                          6, "No.", 0, 0, Database::Customer, "Sell-to Customer No.", "Salesperson Code",
                          "Campaign No.", "Posting Description", '');

            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                    }
                }
            }
        }

        trigger OnOpenPage()
        var
            DocumentType: Enum "Interaction Log Entry Document Type";
        begin
            LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Cr. Memo") <> '';
        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        SalesSetup.Get;
        CompanyInfo.Get;
        CompanyInfo.CalcFields(Picture, "Picture 2");//, Logo);
                                                     ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        if not CurrReport.UseRequestPage then
            InitLogInteraction;
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Salesperson';
        Text001: label 'Total %1';
        Text002: label 'Total %1 Incl. VAT';
        Text003: label '(Applies to %1 %2)';
        Text004: label 'COPY';
        Text005: label 'Sales - Credit Memo %1';
        Text006: label 'Page %1';
        Text007: label 'Total %1 Excl. VAT';
        GLSetup: Record "General Ledger Setup";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInfo: Record "Company Information";
        VATAmountLine: Record "VAT Amount Line" temporary;
        PostedDocDim1: Record "Dimension Set Entry";
        PostedDocDim2: Record "Dimension Set Entry";
        Language2: Codeunit Language;
        SalesShipmentBuffer: Record "Sales Shipment Buffer" temporary;
        CurrExchRate: Record "Currency Exchange Rate";
        SalesCrMemoCountPrinted: Codeunit "Sales Cr. Memo-Printed";
        FormatAddr: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        RespCenter: Record "Responsibility Center";
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        ReturnOrderNoText: Text[30];
        SalesPersonText: Text[30];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        AppliedToText: Text[40];
        TotalText: Text[50];
        TotalExclVATText: Text[50];
        TotalInclVATText: Text[50];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        ShowShippingAddr: Boolean;
        i: Integer;
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        FirstValueEntryNo: Integer;
        PostedReceiptDate: Date;
        NextEntryNo: Integer;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        Text008: label 'VAT Amount Specification in ';
        Text009: label 'Local Currency';
        Text010: label 'Exchange rate: %1/%2';
        VALSpecLCYHeader: Text[80];
        VALExchRate: Text[50];
        CalculatedExchRate: Decimal;
        "---DUE...": Integer;
        BenutzerER: Record "User Setup";
        SalesSetup: Record "Sales & Receivables Setup";
        DebitorR: Record Customer;
        ZeilenDuplikatRecSet: Record "Sales Cr.Memo Line";
        PaymentTerms: Record "Payment Terms";
        Kundendienst: Record "Salesperson/Purchaser";
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WährTxt": Text[10];
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        LieferTerminK: Text[20];
        LieferTerminZ: Text[30];
        AusgKalkStatus: Text[30];
        AusgAngKalkStatus: Text[30];
        "AusgÜbSchrEinzelpreis/P.E.": Text[30];
        MitLogo: Boolean;
        FormOpened: Boolean;
        verwenden: Boolean;
        FrachtJN: Boolean;
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        GesKorrSumme: Decimal;
        BelegZwNetto: Decimal;
        AktuellerPosWert: Decimal;
        "xPos.-Zus.-Zähl-Summen drucken": Boolean;
        "ZusammenzählungsText": Text[50];
        "NächsterZusammenzählungsText": Text[50];
        "PosZusammenzählungsSumme": array[3] of Decimal;
        "LetzterZusammenzählungsText": Text[50];
        "LetztePosZusammenzählungsSumme": Decimal;
        AusgVKPreis: Decimal;
        "AusgWährTxt": Text[10];
        AusgBetragRechnsUndRabBetrag: Decimal;
        UstIDText: Text[30];
        LiefInnerg_DrittlandText: Text[250];
        DUE001: label 'Ship-to Address:';
        DUE002: label 'E-mail:';
        DUE003: label 'Web:';
        DUE004: label 'Credit Note %1';
        DUE005: label 'Always state.';
        DUE006: label 'Thank you for your inquiry. We offer as follows:';
        DUE007: label 'Unit Price';
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'It applies at the time of the supply the valid value added tax.';
        DUE017: label 'We hope that our offer assures to you. With all suggestions for improvement and further inquiries we are to you gladly ';
        DUE018: label 'at the disposal and assure to you in the case of order a correct execution.';
        DUE019: label 'Your Contact Person:';
        DUE031: label 'VAT Registration No.';
        DUE032: label 'Innergemeinschaftliche umsatzsteuerfreie Lieferung.';
        DUE033: label 'Steuerfreie Auslandslieferung in ein Drittland.';
        DUE034: label 'Bezüglich der Entgeltminderungen verweisen wir auf die aktuellen Zahlungs- und Konditionsvereinbarungen';
        DUE035: label 'Die Ware bleibt bis zur vollständigen Bezahlung unser Eigentum.';
        DUE020: label 'Our standard conditions of sale apply.';
        DUE021: label 'You will find our Conditions under www.dueperthal.com or get them on request via E-Mail.';
        DUE022: label 'Our tip: Web-enquiry with www.dueperthal.com. Every click pays!';
        DUE041: label 'Delivery address = Recipient of service/delivery and Delivery date = Date of service/delivery rendered';
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";
        TempTMLine: Record "CCS TM Line Document" temporary;

    procedure InitLogInteraction()
    var
        DocumentType: Enum "Interaction Log Entry Document Type";
    begin
        LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Cr. Memo") <> '';
    end;

    procedure FindPostedShipmentDate(): Date
    var
        ReturnReceiptHeader: Record "Return Receipt Header";
        SalesShipmentBuffer2: Record "Sales Shipment Buffer" temporary;
    begin
        NextEntryNo := 1;
        if "Sales Cr.Memo Line"."Return Receipt No." <> '' then
            if ReturnReceiptHeader.Get("Sales Cr.Memo Line"."Return Receipt No.") then
                exit(ReturnReceiptHeader."Posting Date");
        case "Sales Cr.Memo Line".Type of
            "Sales Cr.Memo Line".Type::Item:
                GenerateBufferFromValueEntry("Sales Cr.Memo Line");
            "Sales Cr.Memo Line".Type::"G/L Account", "Sales Cr.Memo Line".Type::Resource,
          "Sales Cr.Memo Line".Type::"Charge (Item)", "Sales Cr.Memo Line".Type::"Fixed Asset":
                GenerateBufferFromShipment("Sales Cr.Memo Line");
            "Sales Cr.Memo Line".Type::" ":
                exit(0D);
        end;
        SalesShipmentBuffer.Reset;
        SalesShipmentBuffer.SetRange("Document No.", "Sales Cr.Memo Line"."Document No.");
        SalesShipmentBuffer.SetRange("Line No.", "Sales Cr.Memo Line"."Line No.");
        if SalesShipmentBuffer.Find('-') then begin
            SalesShipmentBuffer2 := SalesShipmentBuffer;
            if SalesShipmentBuffer.Next = 0 then begin
                SalesShipmentBuffer.Get(SalesShipmentBuffer2."Document No.", SalesShipmentBuffer2."Line No.", SalesShipmentBuffer2."Entry No."
          );
                SalesShipmentBuffer.Delete;
                exit(SalesShipmentBuffer2."Posting Date");
                ;
            end;
            SalesShipmentBuffer.CalcSums(Quantity);
            if SalesShipmentBuffer.Quantity <> "Sales Cr.Memo Line".Quantity then begin
                SalesShipmentBuffer.DeleteAll;
                exit("Sales Cr.Memo Header"."Posting Date");
            end;
        end else
            exit("Sales Cr.Memo Header"."Posting Date");
    end;

    procedure GenerateBufferFromValueEntry(SalesCrMemoLine2: Record "Sales Cr.Memo Line")
    var
        ValueEntry: Record "Value Entry";
        ItemLedgerEntry: Record "Item Ledger Entry";
        TotalQuantity: Decimal;
        Quantity: Decimal;
    begin
        TotalQuantity := SalesCrMemoLine2."Quantity (Base)";
        ValueEntry.SetCurrentkey("Document No.");
        ValueEntry.SetRange("Document No.", SalesCrMemoLine2."Document No.");
        ValueEntry.SetRange("Posting Date", "Sales Cr.Memo Header"."Posting Date");
        ValueEntry.SetRange("Item Charge No.", '');
        ValueEntry.SetFilter("Entry No.", '%1..', FirstValueEntryNo);
        if ValueEntry.Find('-') then
            repeat
                if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then begin
                    if SalesCrMemoLine2."Qty. per Unit of Measure" <> 0 then
                        Quantity := ValueEntry."Invoiced Quantity" / SalesCrMemoLine2."Qty. per Unit of Measure"
                    else
                        Quantity := ValueEntry."Invoiced Quantity";
                    AddBufferEntry(
                      SalesCrMemoLine2,
                      -Quantity,
                      ItemLedgerEntry."Posting Date");
                    TotalQuantity := TotalQuantity - ValueEntry."Invoiced Quantity";
                end;
                FirstValueEntryNo := ValueEntry."Entry No." + 1;
            until (ValueEntry.Next = 0) or (TotalQuantity = 0);
    end;

    procedure GenerateBufferFromShipment(SalesCrMemoLine: Record "Sales Cr.Memo Line")
    var
        SalesCrMemoHeader: Record "Sales Cr.Memo Header";
        SalesCrMemoLine2: Record "Sales Cr.Memo Line";
        ReturnReceiptHeader: Record "Return Receipt Header";
        ReturnReceiptLine: Record "Return Receipt Line";
        TotalQuantity: Decimal;
        Quantity: Decimal;
    begin
        TotalQuantity := 0;
        SalesCrMemoHeader.SetCurrentkey("Return Order No.");
        SalesCrMemoHeader.SetFilter("No.", '..%1', "Sales Cr.Memo Header"."No.");
        SalesCrMemoHeader.SetRange("Return Order No.", "Sales Cr.Memo Header"."Return Order No.");
        if SalesCrMemoHeader.Find('-') then
            repeat
                SalesCrMemoLine2.SetRange("Document No.", SalesCrMemoHeader."No.");
                SalesCrMemoLine2.SetRange("Line No.", SalesCrMemoLine."Line No.");
                SalesCrMemoLine2.SetRange(Type, SalesCrMemoLine.Type);
                SalesCrMemoLine2.SetRange("No.", SalesCrMemoLine."No.");
                SalesCrMemoLine2.SetRange("Unit of Measure Code", SalesCrMemoLine."Unit of Measure Code");
                if SalesCrMemoLine2.Find('-') then
                    repeat
                        TotalQuantity := TotalQuantity + SalesCrMemoLine2.Quantity;
                    until SalesCrMemoLine2.Next = 0;
            until SalesCrMemoHeader.Next = 0;
        ReturnReceiptLine.SetCurrentkey("Return Order No.", "Return Order Line No.");
        ReturnReceiptLine.SetRange("Return Order No.", "Sales Cr.Memo Header"."Return Order No.");
        ReturnReceiptLine.SetRange("Return Order Line No.", SalesCrMemoLine."Line No.");
        ReturnReceiptLine.SetRange("Line No.", SalesCrMemoLine."Line No.");
        ReturnReceiptLine.SetRange(Type, SalesCrMemoLine.Type);
        ReturnReceiptLine.SetRange("No.", SalesCrMemoLine."No.");
        ReturnReceiptLine.SetRange("Unit of Measure Code", SalesCrMemoLine."Unit of Measure Code");
        ReturnReceiptLine.SetFilter(Quantity, '<>%1', 0);
        if ReturnReceiptLine.Find('-') then
            repeat
                if "Sales Cr.Memo Header"."Get Return Receipt Used" then
                    CorrectShipment(ReturnReceiptLine);
                if Abs(ReturnReceiptLine.Quantity) <= Abs(TotalQuantity - SalesCrMemoLine.Quantity) then
                    TotalQuantity := TotalQuantity - ReturnReceiptLine.Quantity
                else begin
                    if Abs(ReturnReceiptLine.Quantity) > Abs(TotalQuantity) then
                        ReturnReceiptLine.Quantity := TotalQuantity;
                    Quantity :=
                      ReturnReceiptLine.Quantity - (TotalQuantity - SalesCrMemoLine.Quantity);
                    SalesCrMemoLine.Quantity := SalesCrMemoLine.Quantity - Quantity;
                    TotalQuantity := TotalQuantity - ReturnReceiptLine.Quantity;
                    if ReturnReceiptHeader.Get(ReturnReceiptLine."Document No.") then begin
                        AddBufferEntry(
                          SalesCrMemoLine,
                          -Quantity,
                          ReturnReceiptHeader."Posting Date");
                    end;
                end;
            until (ReturnReceiptLine.Next = 0) or (TotalQuantity = 0);
    end;

    procedure CorrectShipment(var ReturnReceiptLine: Record "Return Receipt Line")
    var
        SalesCrMemoLine: Record "Sales Cr.Memo Line";
    begin
        SalesCrMemoLine.SetCurrentkey("Return Receipt No.", "Return Receipt Line No.");
        SalesCrMemoLine.SetRange("Return Receipt No.", ReturnReceiptLine."Document No.");
        SalesCrMemoLine.SetRange("Return Receipt Line No.", ReturnReceiptLine."Line No.");
        if SalesCrMemoLine.Find('-') then
            repeat
                ReturnReceiptLine.Quantity := ReturnReceiptLine.Quantity - SalesCrMemoLine.Quantity;
            until SalesCrMemoLine.Next = 0;
    end;

    procedure AddBufferEntry(SalesCrMemoLine: Record "Sales Cr.Memo Line"; QtyOnShipment: Decimal; PostingDate: Date)
    begin
        SalesShipmentBuffer.SetRange("Document No.", SalesCrMemoLine."Document No.");
        SalesShipmentBuffer.SetRange("Line No.", SalesCrMemoLine."Line No.");
        SalesShipmentBuffer.SetRange("Posting Date", PostingDate);
        if SalesShipmentBuffer.Find('-') then begin
            SalesShipmentBuffer.Quantity := SalesShipmentBuffer.Quantity - QtyOnShipment;
            SalesShipmentBuffer.Modify;
            exit;
        end;
        with SalesShipmentBuffer do begin
            Init;
            "Document No." := SalesCrMemoLine."Document No.";
            "Line No." := SalesCrMemoLine."Line No.";
            "Entry No." := NextEntryNo;
            Type := SalesCrMemoLine.Type;
            "No." := SalesCrMemoLine."No.";
            Quantity := -QtyOnShipment;
            "Posting Date" := PostingDate;
            Insert;
            NextEntryNo := NextEntryNo + 1
        end;
    end;

    procedure "--DUE..."()
    begin
    end;

    procedure MarkZeilenDuplikatErstellen(var Zeile: Record "Sales Cr.Memo Line")
    var
        Satz: Text[1];
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        ZeilenDuplikatRecSet.CopyFilters(Zeile);                              // Somit  ist wirklich ein Duplikat dieses RecordSet
        while ZeilenDuplikatRecSet.Find(NächstenPlausiblen(Satz)) do
            case ZeilenDuplikatRecSet.Type of
                ZeilenDuplikatRecSet.Type::Item:
                    ZeilenDuplikatRecSet.Mark(
                      (ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Fracht1") and
                      (ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Fracht2") and
                      (ZeilenDuplikatRecSet."No." <> SalesSetup."Artikel Verpackung"));
                else
                    ZeilenDuplikatRecSet.Mark(true);
            end;                                                                // Signifikant ist nur was MARKiert ist !!!
    end;

    procedure IstMarkiert(var Zeile: Record "Sales Cr.Memo Line"): Boolean
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        ZeilenDuplikatRecSet."Document No." := Zeile."Document No.";
        ZeilenDuplikatRecSet."Line No." := Zeile."Line No.";
        ZeilenDuplikatRecSet.Find('=');
        exit(ZeilenDuplikatRecSet.Mark);
    end;

    procedure "NächstenPlausiblen"(var VorhergehenderSuchOperator: Text[1]) RetVal: Text[1]
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        if VorhergehenderSuchOperator = '' then
            RetVal := '-'
        else
            RetVal := '>';
        VorhergehenderSuchOperator := RetVal;
    end;

    procedure "ErmittlungPosZusammenzählung"(var Zeile: Record "Sales Cr.Memo Line")
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        if IstImRecSetErste(Zeile) then begin
            AktuellerPosWert := 0;
            LetztePosZusammenzählungsSumme := 0;
            NächsterZusammenzählungsText := 'Summe Position ' + Zeile.Position;
        end;
        Clear(PosZusammenzählungsSumme);
        /*PosZusammenzählungsSumme := */
        GetPosZusammenzählungsSummen(Zeile);
        if IstImRecSetLetzte(Zeile) then begin
            LetzterZusammenzählungsText := NächsterZusammenzählungsText;
        end;

    end;

    procedure "GetPosZusammenzählungsSummen"(Zeile: Record "Sales Cr.Memo Line") RetVal: Decimal
    var
        Pos: Text[5];
        PosBetrag: Decimal;
    begin
        //c/gw/160502: - Stichwort: PositonsZusammenzählung
        Pos := DelChr(Zeile.Position, '<>', ' ');
        if IstImRecSetFolge(Zeile) then begin
            if StrPos(Pos, '.') > 0 then begin
                if (Pos[StrLen(Pos)] = '.') then begin
                    RetVal := AktuellerPosWert;
                    ZusammenzählungsText := NächsterZusammenzählungsText;
                    NächsterZusammenzählungsText := 'Summe Position ' + Zeile.Position;
                    //CLEAR(AktuellerPosWert);
                end;
            end;
        end;
        if IstMarkiert(Zeile) then
            AktuellerPosWert := AktuellerPosWert + Zeile.Amount + Zeile."Inv. Discount Amount";
    end;

    procedure IstImRecSetErste(Zeile: Record "Sales Cr.Memo Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('-') then
            exit(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
    end;

    procedure IstImRecSetFolge(Zeile: Record "Sales Cr.Memo Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('-') then
            exit(ZeilenDuplikatRecSet."Line No." <> Zeile."Line No.")
    end;

    procedure IstImRecSetLetzte(Zeile: Record "Sales Cr.Memo Line"): Boolean
    begin
        //c/gw/150502: - Stichwort: PositonsZusammenzählung
        if ZeilenDuplikatRecSet.Find('+') then
            exit(ZeilenDuplikatRecSet."Line No." = Zeile."Line No.")
    end;

    procedure "ClearPosZusammenzählung"()
    begin
        //c/gw/020903: - Problem bei Stapeldruck
        Clear(ZusammenzählungsText);
        Clear(NächsterZusammenzählungsText);
        Clear(PosZusammenzählungsSumme);
        Clear(LetzterZusammenzählungsText);
        Clear(LetztePosZusammenzählungsSumme);
        Clear(ZeilenDuplikatRecSet);
        Clear(AktuellerPosWert);
    end;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionPageLoop_Header2(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
            ReportForNavSetShowOutput(CurrReport.PageNo = 1);
        end;
    end;

    local procedure OnPreSectionPageLoop_Header4(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionPageLoop_Header5(var PageLoop: Record Integer);
    begin
        with PageLoop do begin
        end;// Autogenerated by ForNav;
    end;

    local procedure OnPreSectionDimensionLoop1_Body8(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body9(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_TransHeader12(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            //c/gw/160502: - Stichwort: PositonsZusammenzählung
            /* ReportForNavSetShowOutput(NOT "Sales Cr.Memo Header"."Pos.-Zus.-Zähl-Summen drucken");
			 IF ReportForNavShowOutput THEN
			   ReportForNavSetShowOutput(NOT "Sales Cr.Memo Header"."nur kompl. Preis drucken");*/
        end;

    end;

    local procedure OnPreSectionSalesCrMemoLine_Body13(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput(PosZusammenzählungsSumme[1] > 0);
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body14(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput(Type.AsInteger() = 0);
            //ReportForNavSetShowOutput(Type = 0);
            //ReportForNavSetShowOutput((Type = 0) AND
            //					(Schriftattribut <> Schriftattribut::fett ) AND
            //				  NOT Zwischensumme);
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body15(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            //ReportForNavSetShowOutput((Type = 0) AND
            // (Schriftattribut = Schriftattribut::fett ) AND
            // NOT Zwischensumme);
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body16(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            // ReportForNavSetShowOutput(( Type = 0) AND
            //					 Zwischensumme AND
            //				   (NOT "Sales Cr.Memo Header"."nur kompl. Preis drucken"));
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body17(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput((Type.AsInteger() <> 0) and
                                  not FrachtJN);// AND
                                                //"Sales Cr.Memo Header"."nur kompl. Preis drucken");
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body18(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput((Type = Type::"G/L Account"));// AND
                                                                    // NOT "Sales Cr.Memo Header"."nur kompl. Preis drucken");
                                                                    //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ReportForNavShowOutput /*AND NOT "Sales CR.Memo Header"."Pos.-Zus.-Zähl-Summen drucken"*/ then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line".Amount + "Sales Cr.Memo Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Cr.Memo Header"."Rabatt ausblenden" then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Line Amount" / "Sales Cr.Memo Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
        end;

    end;

    local procedure OnPreSectionSalesCrMemoLine_Body19(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput((Type = Type::Item) and
                                  (not FrachtJN));// AND
                                                  // (NOT "Sales Cr.Memo Header"."nur kompl. Preis drucken") AND
                                                  // ("Bill-to Customer No." = ''));	 //c/gw180800 Deb.Art.. hier noch dazu
                                                  //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ReportForNavShowOutput /*AND NOT "Sales CR.Memo Header"."Pos.-Zus.-Zähl-Summen drucken"*/ then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line".Amount + "Sales Cr.Memo Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Cr.Memo Header"."Rabatt ausblenden" then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Line Amount" / "Sales Cr.Memo Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
        end;

    end;

    local procedure OnPreSectionSalesCrMemoLine_Body20(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput((Type = Type::Item) and
                                  (not FrachtJN));// AND
                                                  //(NOT "Sales Cr.Memo Header"."nur kompl. Preis drucken") AND
                                                  // ("Bill-to Customer No." <> ''));	 //c/gw180800 Deb.Art.. hier noch dazu
                                                  //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ReportForNavShowOutput /*AND NOT "Sales CR.Memo Header"."Pos.-Zus.-Zähl-Summen drucken"*/ then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line".Amount + "Sales Cr.Memo Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Cr.Memo Header"."Rabatt ausblenden" then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Line Amount" / "Sales Cr.Memo Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
        end;

    end;

    local procedure OnPreSectionSalesCrMemoLine_Body21(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput((Type = Type::"Charge (Item)") and
                                  (not FrachtJN));
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ReportForNavShowOutput /*AND NOT "Sales CR.Memo Header"."Pos.-Zus.-Zähl-Summen drucken"*/ then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line".Amount + "Sales Cr.Memo Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Cr.Memo Header"."Rabatt ausblenden" then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Line Amount" / "Sales Cr.Memo Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
        end;

    end;

    local procedure OnPreSectionSalesCrMemoLine_Body22(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput((Type = Type::Resource) and
                                  (not FrachtJN));
            //c/gw/160502
            AusgVKPreis := 0;
            AusgBetragRechnsUndRabBetrag := 0;
            AusgWährTxt := '';
            if ReportForNavShowOutput /*AND NOT "Sales CR.Memo Header"."Pos.-Zus.-Zähl-Summen drucken"*/ then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Unit Price";
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line".Amount + "Sales Cr.Memo Line"."Inv. Discount Amount";
                AusgWährTxt := WährTxt;
            end;
            if ReportForNavShowOutput and "Sales Cr.Memo Header"."Rabatt ausblenden" then begin
                AusgVKPreis := "Sales Cr.Memo Line"."Line Amount" / "Sales Cr.Memo Line".Quantity;
                AusgBetragRechnsUndRabBetrag := "Sales Cr.Memo Line"."Line Amount";
                AusgWährTxt := WährTxt;
            end;
        end;

    end;

    local procedure OnPreSectionSalesCrMemoLine_Body23(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput("Description 2" <> '');
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body24(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput(LetztePosZusammenzählungsSumme > 0);
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Body25(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput(("Line Discount %" <> 0) and
                                  not FrachtJN and not ("Sales Cr.Memo Header"."Rabatt ausblenden" = true));
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Footer28(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            ReportForNavSetShowOutput("Inv. Discount Amount" <> 0);
        end;
    end;

    local procedure OnPreSectionSalesCrMemoLine_Footer30(var "Sales Cr.Memo Line": Record "Sales Cr.Memo Line");
    begin
        with "Sales Cr.Memo Line" do begin
            //ReportForNavSetShowOutput(
            //  NOT "Sales Cr.Memo Header"."Prices Including VAT" AND ("Amount Including VAT" <> Amount));
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavSalesCrMemoLineBuffer: Array[4] of Decimal;
        ReportForNavSalesCrMemoLineTotals: Array[4] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'SalesCrMemoHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'PageLoop':
                begin
                    ReportForNavSalesCrMemoLineTotals[1] := 0;
                    ReportForNavSalesCrMemoLineTotals[2] := 0;
                    ReportForNavSalesCrMemoLineTotals[3] := 0;
                    ReportForNavSalesCrMemoLineTotals[4] := 0;
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header2(PageLoop);
                    jsonObject.Add('$Header2$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header4(PageLoop);
                    jsonObject.Add('$Header4$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPageLoop_Header5(PageLoop);
                    jsonObject.Add('$Header5$Pre', ReportForNavShowOutput);
                end;
            'DimensionLoop1':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body8(DimensionLoop1);
                    jsonObject.Add('$Body8$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body9(DimensionLoop1);
                    jsonObject.Add('$Body9$Pre', ReportForNavShowOutput);
                end;
            'SalesCrMemoLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body13("Sales Cr.Memo Line");
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body14("Sales Cr.Memo Line");
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body15("Sales Cr.Memo Line");
                    jsonObject.Add('$Body15$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body16("Sales Cr.Memo Line");
                    jsonObject.Add('$Body16$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body17("Sales Cr.Memo Line");
                    jsonObject.Add('$Body17$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body18("Sales Cr.Memo Line");
                    jsonObject.Add('$Body18$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body19("Sales Cr.Memo Line");
                    jsonObject.Add('$Body19$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body20("Sales Cr.Memo Line");
                    jsonObject.Add('$Body20$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body21("Sales Cr.Memo Line");
                    jsonObject.Add('$Body21$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body22("Sales Cr.Memo Line");
                    jsonObject.Add('$Body22$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body23("Sales Cr.Memo Line");
                    jsonObject.Add('$Body23$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body24("Sales Cr.Memo Line");
                    jsonObject.Add('$Body24$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesCrMemoLine_Body25("Sales Cr.Memo Line");
                    jsonObject.Add('$Body25$Pre', ReportForNavShowOutput);
                    with "Sales Cr.Memo Line" do begin
                        ReportForNavSalesCrMemoLineTotals[1] += "Line Amount";
                        ReportForNavSalesCrMemoLineBuffer[1] := "Line Amount";
                        "Line Amount" := ReportForNavSalesCrMemoLineTotals[1];
                        ReportForNavSalesCrMemoLineTotals[2] += Amount;
                        ReportForNavSalesCrMemoLineBuffer[2] := Amount;
                        Amount := ReportForNavSalesCrMemoLineTotals[2];
                        ReportForNavSalesCrMemoLineTotals[3] += "Amount Including VAT";
                        ReportForNavSalesCrMemoLineBuffer[3] := "Amount Including VAT";
                        "Amount Including VAT" := ReportForNavSalesCrMemoLineTotals[3];
                        ReportForNavSalesCrMemoLineTotals[4] += "Inv. Discount Amount";
                        ReportForNavSalesCrMemoLineBuffer[4] := "Inv. Discount Amount";
                        "Inv. Discount Amount" := ReportForNavSalesCrMemoLineTotals[4];
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesCrMemoLine_TransHeader12("Sales Cr.Memo Line");
                        jsonObject.Add('$TransHeader12$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesCrMemoLine_Footer28("Sales Cr.Memo Line");
                        jsonObject.Add('$Footer28$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionSalesCrMemoLine_Footer30("Sales Cr.Memo Line");
                        jsonObject.Add('$Footer30$Pre', ReportForNavShowOutput);
                        "Line Amount" := ReportForNavSalesCrMemoLineBuffer[1];
                        Amount := ReportForNavSalesCrMemoLineBuffer[2];
                        "Amount Including VAT" := ReportForNavSalesCrMemoLineBuffer[3];
                        "Inv. Discount Amount" := ReportForNavSalesCrMemoLineBuffer[4];
                    end;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
