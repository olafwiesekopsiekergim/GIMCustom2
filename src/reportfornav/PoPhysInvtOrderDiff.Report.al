#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60024 "CCO Po.Phys. Invt. Order Diff."
{
	Caption = 'Posted Phys. Invt. Order Diff.';
	WordLayout = './Layouts/CCOPo.Phys.Invt.OrderDiff..docx'; DefaultLayout = Word;

	dataset
	{
		dataitem("Post. Phys. Invt. Order Header";"Pstd. Phys. Invt. Order Hdr")
		{
			RequestFilterFields = "No.";
			column(ReportForNavId_1235; 1235) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_PostPhysInvtOrderHeader; ReportForNavWriteDataItem('PostPhysInvtOrderHeader',"Post. Phys. Invt. Order Header")) {}
			column(Post__Phys__Invt__Order_Header_No_; "Post. Phys. Invt. Order Header"."No.")
			{
			}
			dataitem(PageCounter;Integer)
			{
				DataItemTableView = sorting(Number) where(Number = const(1));
				column(ReportForNavId_8098; 8098) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_PageCounter; ReportForNavWriteDataItem('PageCounter',PageCounter)) {}
				column("USERID"; UserId)
				{
				}
				column(COMPANYNAME; COMPANYNAME)
				{
				}
				column(CurrReport_PAGENO; Format(ReportForNav.PagePlaceHolder))
				{
				}
				column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
				{
				}
				column(ShowDim; ShowDim)
				{
				}
				column(Post__Phys__Invt__Order_Header___Posting_Date_; Format("Post. Phys. Invt. Order Header"."Posting Date"))
				{
				}
				column(Post__Phys__Invt__Order_Header___No__; "Post. Phys. Invt. Order Header"."No.")
				{
				}
				column(Post__Phys__Invt__Order_Header___Person_Responsible_; "Post. Phys. Invt. Order Header"."Person Responsible")
				{
				}
				column(Post__Phys__Invt__Order_Header___No__Finished_Recordings_; "Post. Phys. Invt. Order Header"."No. Finished Recordings")
				{
				}
				column(Post__Phys__Invt__Order_Header__Description; "Post. Phys. Invt. Order Header".Description)
				{
				}
				column(PageCounter_Number; PageCounter.Number)
				{
				}
				column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
				{
				}
				column(Posted_Phys__Inventory_Order_Difference_ListCaption; Posted_Phys__Inventory_Order_Difference_ListCaptionLbl)
				{
				}
				column(Post__Phys__Invt__Order_Header___Posting_Date_Caption; Post__Phys__Invt__Order_Header___Posting_Date_CaptionLbl)
				{
				}
				column(Post__Phys__Invt__Order_Header___No__Caption; "Post. Phys. Invt. Order Header".FieldCaption("No."))
				{
				}
				column(Post__Phys__Invt__Order_Header___Person_Responsible_Caption; "Post. Phys. Invt. Order Header".FieldCaption("Person Responsible"))
				{
				}
				column(Post__Phys__Invt__Order_Header___No__Finished_Recordings_Caption; "Post. Phys. Invt. Order Header".FieldCaption("No. Finished Recordings"))
				{
				}
				column(Post__Phys__Invt__Order_Header__DescriptionCaption; "Post. Phys. Invt. Order Header".FieldCaption(Description))
				{
				}
				dataitem("Posted Phys. Invt. Order Line";"Pstd. Phys. Invt. Order Line")
				{
					DataItemLink = "Document No." = FIELD("No.");
					DataItemLinkReference = "Post. Phys. Invt. Order Header";
					DataItemTableView = sorting("Document No.", "Line No.");
					column(ReportForNavId_6997; 6997) {} // Autogenerated by ForNav - Do not delete
					column(ReportForNav_PostedPhysInvtOrderLine; ReportForNavWriteDataItem('PostedPhysInvtOrderLine',"Posted Phys. Invt. Order Line")) {}
					column(Posted_Phys__Invt__Order_Line__Item_No__; "Posted Phys. Invt. Order Line"."Item No.")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Location_Code_; "Posted Phys. Invt. Order Line"."Location Code")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Bin_Code_; "Posted Phys. Invt. Order Line"."Bin Code")
					{
					}
					column(Posted_Phys__Invt__Order_Line_Description; "Posted Phys. Invt. Order Line".Description)
					{
					}
					column(Posted_Phys__Invt__Order_Line__Base_Unit_of_Measure_Code_; "Posted Phys. Invt. Order Line"."Base Unit of Measure Code")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Qty__Expected__Base__; "Qty. Expected (Base)")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Variant_Code_; "Posted Phys. Invt. Order Line"."Variant Code")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Qty__Recorded__Base__; "Qty. Recorded (Base)")
					{
					}
					column(AmountPos; AmountPos)
					{
					}
					column(AmountNeg; AmountNeg)
					{
					}
					column(QtyPos; QtyPos)
					{
						DecimalPlaces = 0 : 5;
					}
					column(QtyNeg; QtyNeg)
					{
						DecimalPlaces = 0 : 5;
					}
					column(Posted_Phys__Invt__Order_Line__No__Finished_Rec__Lines_; "Posted Phys. Invt. Order Line"."No. Finished Rec.-Lines")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Recorded_without_Order_; Format("Recorded without Order"))
					{
					}
					column(PrintAnEmptyLine; PrintAnEmptyLine)
					{
					}
					column(AmountPos_Control49; AmountPos)
					{
					}
					column(AmountNeg_Control50; AmountNeg)
					{
					}
					column(NewAmountPos; NewAmountPos)
					{
					}
					column(NewAmountNeg; NewAmountNeg)
					{
					}
					column(Posted_Phys__Invt__Order_Line_Document_No_; "Posted Phys. Invt. Order Line"."Document No.")
					{
					}
					column(Posted_Phys__Invt__Order_Line_Line_No_; "Posted Phys. Invt. Order Line"."Line No.")
					{
					}
					column(Posted_Phys__Invt__Order_Line__Item_No__Caption; FieldCaption("Item No."))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Location_Code_Caption; FieldCaption("Location Code"))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Bin_Code_Caption; FieldCaption("Bin Code"))
					{
					}
					column(Posted_Phys__Invt__Order_Line_DescriptionCaption; FieldCaption(Description))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Base_Unit_of_Measure_Code_Caption; FieldCaption("Base Unit of Measure Code"))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Qty__Expected__Base__Caption; FieldCaption("Qty. Expected (Base)"))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Variant_Code_Caption; FieldCaption("Variant Code"))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Qty__Recorded__Base__Caption; FieldCaption("Qty. Recorded (Base)"))
					{
					}
					column(QtyPosCaption; QtyPosCaptionLbl)
					{
					}
					column(QtyNegCaption; QtyNegCaptionLbl)
					{
					}
					column(AmountPosCaption; AmountPosCaptionLbl)
					{
					}
					column(AmountNegCaption; AmountNegCaptionLbl)
					{
					}
					column(Posted_Phys__Invt__Order_Line__No__Finished_Rec__Lines_Caption; FieldCaption("No. Finished Rec.-Lines"))
					{
					}
					column(Posted_Phys__Invt__Order_Line__Recorded_without_Order_Caption; Posted_Phys__Invt__Order_Line__Recorded_without_Order_CaptionLbl)
					{
					}
					column(TotalsCaption; TotalsCaptionLbl)
					{
					}
					dataitem(DiffListBufferLoop;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = filter(1 ..));
						column(ReportForNavId_5113; 5113) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_DiffListBufferLoop; ReportForNavWriteDataItem('DiffListBufferLoop',DiffListBufferLoop)) {}
						column(TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__; TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__; TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Track__Lot_No__; TempPhysInvtDiffListBuffer."Track. Lot No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Track__Serial_No__; TempPhysInvtDiffListBuffer."Track. Serial No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__Qty___Base__; TempPhysInvtDiffListBuffer."Rec. Qty. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Rec__Lot_No__; TempPhysInvtDiffListBuffer."Rec. Lot No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__Serial_No__; TempPhysInvtDiffListBuffer."Rec. Serial No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__No__; TempPhysInvtDiffListBuffer."Rec. No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Exp__Qty___Base__; TempPhysInvtDiffListBuffer."Exp. Qty. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Exp__Lot_No__; TempPhysInvtDiffListBuffer."Exp. Lot No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Exp__Serial_No__; TempPhysInvtDiffListBuffer."Exp. Serial No.")
						{
						}
						column(TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base___Control85; TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base___Control86; TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Rec__Qty___Base___Control87; TempPhysInvtDiffListBuffer."Rec. Qty. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(TempPhysInvtDiffListBuffer__Exp__Qty___Base___Control90; TempPhysInvtDiffListBuffer."Exp. Qty. (Base)")
						{
							DecimalPlaces = 0 : 5;
						}
						column(DiffListBufferLoop_Number; DiffListBufferLoop.Number)
						{
						}
						column(Item_Tracking_LinesCaption; Item_Tracking_LinesCaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__Caption; TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__Caption; TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Track__Lot_No__Caption; TempPhysInvtDiffListBuffer__Track__Lot_No__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Track__Serial_No__Caption; TempPhysInvtDiffListBuffer__Track__Serial_No__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__Qty___Base__Caption; TempPhysInvtDiffListBuffer__Rec__Qty___Base__CaptionLbl)
						{
						}
						column(Recording_LinesCaption; Recording_LinesCaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__Lot_No__Caption; TempPhysInvtDiffListBuffer__Rec__Lot_No__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__Serial_No__Caption; TempPhysInvtDiffListBuffer__Rec__Serial_No__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Rec__No__Caption; TempPhysInvtDiffListBuffer__Rec__No__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Exp__Qty___Base__Caption; TempPhysInvtDiffListBuffer__Exp__Qty___Base__CaptionLbl)
						{
						}
						column(Expected_Tracking_LinesCaption; Expected_Tracking_LinesCaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Exp__Lot_No__Caption; TempPhysInvtDiffListBuffer__Exp__Lot_No__CaptionLbl)
						{
						}
						column(TempPhysInvtDiffListBuffer__Exp__Serial_No__Caption; TempPhysInvtDiffListBuffer__Exp__Serial_No__CaptionLbl)
						{
						}
						column(TotalsCaption_Control91; TotalsCaption_Control91Lbl)
						{
						}
						trigger OnPreDataItem();
						begin
							if NoOfBufferLines = 0 then
								CurrReport.Break;
							LineCount := 0;
							TempPhysInvtDiffListBuffer.Reset;
							ReportForNav.OnPreDataItem('DiffListBufferLoop',DiffListBufferLoop);
						end;
						
						trigger OnAfterGetRecord();
						begin
							LineCount := LineCount + 1;
							if LineCount > NoOfBufferLines then
								CurrReport.Break;
							if LineCount = 1 then
								TempPhysInvtDiffListBuffer.Find('-')
							else
								TempPhysInvtDiffListBuffer.Next;
						end;
						
					}
					dataitem(LineDimensionLoop;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = filter(1 ..));
						column(ReportForNavId_2529; 2529) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_LineDimensionLoop; ReportForNavWriteDataItem('LineDimensionLoop',LineDimensionLoop)) {}
						column(DimText; DimText)
						{
						}
						column(DimText_Control44; DimText)
						{
						}
						column(Number; LineDimensionLoop.Number)
						{
						}
						column(DimTextCaption; DimTextCaptionLbl)
						{
						}
						column(AmountPos2; AmountPos)
						{
						}
						column(AmountNeg2; AmountNeg)
						{
						}
						column(QtyPos2; QtyPos)
						{
						}
						column(QtyNeg2; QtyNeg)
						{
						}
						trigger OnPreDataItem();
						begin
							AmountPos := 0;
							AmountNeg := 0;
							QtyPos := 0;
							QtyNeg := 0;
							if not ShowDim then
								CurrReport.Break;
							if LineIsEmpty then
								CurrReport.Break;
							DimSetEntry.SetRange("Dimension Set ID", "Posted Phys. Invt. Order Line"."Dimension Set ID");
							ReportForNav.OnPreDataItem('LineDimensionLoop',LineDimensionLoop);
						end;
						
						trigger OnAfterGetRecord();
						begin
							if Number = 1 then begin
								if not DimSetEntry.FindSet then
									CurrReport.Break;
							end else
								if not Continue then
									CurrReport.Break;
							Clear(DimText);
							Continue := false;
							repeat
								OldDimText := DimText;
								if DimText = '' then
									DimText := StrSubstNo(
										'%1 %2', DimSetEntry."Dimension Code", DimSetEntry."Dimension Value Code")
								else
									DimText :=
									  StrSubstNo(
										'%1, %2 %3', DimText,
										DimSetEntry."Dimension Code", DimSetEntry."Dimension Value Code");
								if StrLen(DimText) > MaxStrLen(OldDimText) then begin
									DimText := OldDimText;
									Continue := true;
									exit;
								end;
							until (DimSetEntry.Next = 0);
						end;
						
					}
					dataitem(Integer;Integer)
					{
						DataItemTableView = sorting(Number) where(Number = const(1));
						column(ReportForNavId_5444; 5444) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_Integer; ReportForNavWriteDataItem('Integer',Integer)) {}
						trigger OnPreDataItem();
						begin
							AmountPos := 0;
							AmountNeg := 0;
							QtyPos := 0;
							QtyNeg := 0;
							ReportForNav.OnPreDataItem('Integer',Integer);
						end;
						
					}
					trigger OnPreDataItem();
					begin
						NewAmountPos := 0;
						NewAmountNeg := 0;
						ReportForNav.OnPreDataItem('PostedPhysInvtOrderLine',"Posted Phys. Invt. Order Line");
					end;
					
					trigger OnAfterGetRecord();
					begin
						LineIsEmpty := EmptyLine;
						QtyPos := 0;
						QtyNeg := 0;
						AmountPos := 0;
						AmountNeg := 0;
						if not LineIsEmpty then
							case "Entry Type" of
								"entry type"::"Positive Adjmt.":
									begin
										QtyPos := "Quantity (Base)";
										AmountPos := "Unit Amount" * QtyPos;
									end;
								"entry type"::"Negative Adjmt.":
									begin
										QtyNeg := "Quantity (Base)";
										AmountNeg := "Unit Amount" * QtyNeg;
									end;
							end;
						// Tracking Information:
						TempPhysInvtDiffListBuffer.DeleteAll;
						NoOfBufferLines := 0;
						if not LineIsEmpty and "Use Item Tracking" then
							CreateDiffListBuffer("Posted Phys. Invt. Order Line", NoOfBufferLines);
						PrintAnEmptyLine := NoOfBufferLines > 0;
						NewAmountPos += AmountPos;
						NewAmountNeg += AmountNeg;
					end;
					
				}
				trigger OnPreDataItem();
				begin
					ReportForNav.OnPreDataItem('PageCounter',PageCounter);
				end;
			}
			trigger OnPreDataItem();
			begin
				ReportForNav.OnPreDataItem('PostPhysInvtOrderHeader',"Post. Phys. Invt. Order Header");
			end;
		}
	}
	requestpage
	{
		SaveValues = true;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ShowDimensions; ShowDim)
					{
						ApplicationArea = Basic;
						Caption = 'Show Dimensions';
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		TempPhysInvtDiffListBuffer: Record "Phys. Invt. Diff. List Buffer" temporary;
		DimText: Text[120];
		DimSetEntry: Record "Dimension Set Entry";
		OldDimText: Text[75];
		NoOfBufferLines: Integer;
		LineCount: Integer;
		QtyPos: Decimal;
		QtyNeg: Decimal;
		AmountPos: Decimal;
		AmountNeg: Decimal;
		ShowDim: Boolean;
		Continue: Boolean;
		LineIsEmpty: Boolean;
		PrintAnEmptyLine: Boolean;
		NewAmountPos: Decimal;
		NewAmountNeg: Decimal;
		CurrReport_PAGENOCaptionLbl: label 'Page';
		Posted_Phys__Inventory_Order_Difference_ListCaptionLbl: label 'Posted Phys. Inventory Order Difference List';
		Post__Phys__Invt__Order_Header___Posting_Date_CaptionLbl: label 'Posting Date';
		QtyPosCaptionLbl: label 'Qty. Pos.';
		QtyNegCaptionLbl: label 'Qty. Neg.';
		AmountPosCaptionLbl: label 'Amount Pos.';
		AmountNegCaptionLbl: label 'Amount Neg.';
		Posted_Phys__Invt__Order_Line__Recorded_without_Order_CaptionLbl: label 'Recorded without Order';
		TotalsCaptionLbl: label 'Totals';
		Item_Tracking_LinesCaptionLbl: label 'Item Tracking Lines';
		TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__CaptionLbl: label 'Qty. Pos. (Base)';
		TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__CaptionLbl: label 'Qty Neg. (Base)';
		TempPhysInvtDiffListBuffer__Track__Lot_No__CaptionLbl: label 'Lot No.';
		TempPhysInvtDiffListBuffer__Track__Serial_No__CaptionLbl: label 'Serial No.';
		TempPhysInvtDiffListBuffer__Rec__Qty___Base__CaptionLbl: label 'Recorded Qty. (Base)';
		Recording_LinesCaptionLbl: label 'Recording Lines';
		TempPhysInvtDiffListBuffer__Rec__Lot_No__CaptionLbl: label 'Lot No.';
		TempPhysInvtDiffListBuffer__Rec__Serial_No__CaptionLbl: label 'Serial No.';
		TempPhysInvtDiffListBuffer__Rec__No__CaptionLbl: label 'Recording No.';
		TempPhysInvtDiffListBuffer__Exp__Qty___Base__CaptionLbl: label 'Exp. Qty. (Base)';
		Expected_Tracking_LinesCaptionLbl: label 'Expected Tracking Lines';
		TempPhysInvtDiffListBuffer__Exp__Lot_No__CaptionLbl: label 'Lot No.';
		TempPhysInvtDiffListBuffer__Exp__Serial_No__CaptionLbl: label 'Serial No.';
		TotalsCaption_Control91Lbl: label 'Totals';
		DimTextCaptionLbl: label 'Line Dimensions';

	procedure CreateDiffListBuffer(PostedPhysInvtOrderLine: Record "Pstd. Phys. Invt. Order Line"; var NoOfBufferLines: Integer)
	var
		PostedExpPhysInvtTrackLine: Record "Pstd. Exp. Phys. Invt. Track";
		PostedPhysInvtRecordingLine: Record "Pstd. Phys. Invt. Record Line";
		NextLineNo: Integer;
		TempPhysInvtDiffListBuffer2: Record "Phys. Invt. Diff. List Buffer";
		LastLineNo: Integer;
	begin
		with PostedPhysInvtOrderLine do begin
			NoOfBufferLines := 0;
			NextLineNo := 1;
			PostedExpPhysInvtTrackLine.Reset;
			PostedExpPhysInvtTrackLine.SetRange("Order No", "Document No.");
			PostedExpPhysInvtTrackLine.SetRange("Order Line No.", "Line No.");
			if PostedExpPhysInvtTrackLine.Find('-') then
				repeat
					FindOrCreateDiffListBuffer(NoOfBufferLines, NextLineNo);
					TempPhysInvtDiffListBuffer."Exp. Serial No." := PostedExpPhysInvtTrackLine."Serial No.";
					TempPhysInvtDiffListBuffer."Exp. Lot No." := PostedExpPhysInvtTrackLine."Lot No.";
					TempPhysInvtDiffListBuffer."Exp. Qty. (Base)" := PostedExpPhysInvtTrackLine."Quantity (Base)";
					TempPhysInvtDiffListBuffer.Modify;
				until PostedExpPhysInvtTrackLine.Next = 0;
			NextLineNo := 1;
			PostedPhysInvtRecordingLine.Reset;
			PostedPhysInvtRecordingLine.SetCurrentkey("Order No.", "Order Line No.");
			PostedPhysInvtRecordingLine.SetRange("Order No.", "Document No.");
			PostedPhysInvtRecordingLine.SetRange("Order Line No.", "Line No.");
			if PostedPhysInvtRecordingLine.Find('-') then
				repeat
					FindOrCreateDiffListBuffer(NoOfBufferLines, NextLineNo);
					TempPhysInvtDiffListBuffer."Rec. No." := PostedPhysInvtRecordingLine."Recording No.";
					TempPhysInvtDiffListBuffer."Rec. Line No." := PostedPhysInvtRecordingLine."Line No.";
					TempPhysInvtDiffListBuffer."Rec. Serial No." := PostedPhysInvtRecordingLine."Serial No.";
					TempPhysInvtDiffListBuffer."Rec. Lot No." := PostedPhysInvtRecordingLine."Lot No.";
					TempPhysInvtDiffListBuffer."Rec. Qty. (Base)" := PostedPhysInvtRecordingLine."Quantity (Base)";
					TempPhysInvtDiffListBuffer.Modify;
				until PostedPhysInvtRecordingLine.Next = 0;
		end;
		LastLineNo := NextLineNo - 1;
		TempPhysInvtDiffListBuffer2.SetFilter("Line No.", '%1..%2', 0, LastLineNo);
		if TempPhysInvtDiffListBuffer2.Find('-') then
			repeat
				if TempPhysInvtDiffListBuffer2."Exp. Serial No." <> '' then
					TempPhysInvtDiffListBuffer.SetRange("Rec. Serial No.", TempPhysInvtDiffListBuffer2."Exp. Serial No.");
				if TempPhysInvtDiffListBuffer2."Exp. Lot No." <> '' then
					TempPhysInvtDiffListBuffer.SetRange("Rec. Lot No.", TempPhysInvtDiffListBuffer2."Exp. Lot No.");
				if TempPhysInvtDiffListBuffer.Find('-') then begin
					case true of
						TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)" < 0:
							begin
								TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Exp. Serial No.";
								TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Exp. Lot No.";
								TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" :=
								  TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)";
								TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := 0;
								TempPhysInvtDiffListBuffer.Modify;
							end;
						TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)" > 0:
							begin
								TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Exp. Serial No.";
								TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Exp. Lot No.";
								TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" :=
								  TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)";
								TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := 0;
								TempPhysInvtDiffListBuffer.Modify;
							end;
					end;
				end else begin
					TempPhysInvtDiffListBuffer.SetRange("Rec. Serial No.");
					TempPhysInvtDiffListBuffer.SetRange("Rec. Lot No.");
					TempPhysInvtDiffListBuffer.SetRange("Track. Serial No.", '');
					TempPhysInvtDiffListBuffer.SetRange("Track. Lot No.", '');
					if TempPhysInvtDiffListBuffer.Find('-') then begin
						TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Exp. Serial No.";
						TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Exp. Lot No.";
						TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := -TempPhysInvtDiffListBuffer2."Exp. Qty. (Base)";
						TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := 0;
						TempPhysInvtDiffListBuffer.Modify;
					end else begin
						TempPhysInvtDiffListBuffer.Init;
						TempPhysInvtDiffListBuffer."Line No." := NextLineNo;
						TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Exp. Serial No.";
						TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Exp. Lot No.";
						TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := -TempPhysInvtDiffListBuffer2."Exp. Qty. (Base)";
						TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := 0;
						TempPhysInvtDiffListBuffer.Insert;
						NextLineNo := NextLineNo + 1;
						NoOfBufferLines := NoOfBufferLines + 1;
					end;
				end;
			until TempPhysInvtDiffListBuffer2.Next = 0;
		TempPhysInvtDiffListBuffer.Reset;
		TempPhysInvtDiffListBuffer2.SetFilter("Line No.", '%1..%2', 0, LastLineNo);
		if TempPhysInvtDiffListBuffer2.Find('-') then
			repeat
				if TempPhysInvtDiffListBuffer2."Rec. Serial No." <> '' then
					TempPhysInvtDiffListBuffer.SetRange("Exp. Serial No.", TempPhysInvtDiffListBuffer2."Rec. Serial No.");
				if TempPhysInvtDiffListBuffer2."Rec. Lot No." <> '' then
					TempPhysInvtDiffListBuffer.SetRange("Exp. Lot No.", TempPhysInvtDiffListBuffer2."Rec. Lot No.");
				if TempPhysInvtDiffListBuffer.Find('-') then begin
					case true of
						TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)" < 0:
							begin
								TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Exp. Serial No.";
								TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Exp. Lot No.";
								TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" :=
								  TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)";
								TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := 0;
								TempPhysInvtDiffListBuffer.Modify;
							end;
						TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)" > 0:
							begin
								TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Exp. Serial No.";
								TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Exp. Lot No.";
								TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" :=
								  TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)" - TempPhysInvtDiffListBuffer."Exp. Qty. (Base)";
								TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := 0;
								TempPhysInvtDiffListBuffer.Modify;
							end;
					end;
				end else begin
					TempPhysInvtDiffListBuffer.SetRange("Exp. Serial No.");
					TempPhysInvtDiffListBuffer.SetRange("Exp. Lot No.");
					TempPhysInvtDiffListBuffer.SetRange("Track. Serial No.", '');
					TempPhysInvtDiffListBuffer.SetRange("Track. Lot No.", '');
					if TempPhysInvtDiffListBuffer.Find('-') then begin
						TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Rec. Serial No.";
						TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Rec. Lot No.";
						TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := 0;
						TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)";
						TempPhysInvtDiffListBuffer.Modify;
					end else begin
						TempPhysInvtDiffListBuffer.Init;
						TempPhysInvtDiffListBuffer."Line No." := NextLineNo;
						TempPhysInvtDiffListBuffer."Track. Serial No." := TempPhysInvtDiffListBuffer2."Rec. Serial No.";
						TempPhysInvtDiffListBuffer."Track. Lot No." := TempPhysInvtDiffListBuffer2."Rec. Lot No.";
						TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := 0;
						TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := TempPhysInvtDiffListBuffer2."Rec. Qty. (Base)";
						TempPhysInvtDiffListBuffer.Insert;
						NextLineNo := NextLineNo + 1;
						NoOfBufferLines := NoOfBufferLines + 1;
					end;
				end;
			until TempPhysInvtDiffListBuffer2.Next = 0;
	end;

	procedure FindOrCreateDiffListBuffer(var NoOfBufferLines: Integer; var NextLineNo: Integer)
	begin
		if NextLineNo > NoOfBufferLines then begin
			TempPhysInvtDiffListBuffer.Init;
			TempPhysInvtDiffListBuffer."Line No." := NextLineNo;
			TempPhysInvtDiffListBuffer.Insert;
			NoOfBufferLines := NoOfBufferLines + 1;
		end else begin
			if NextLineNo = 1 then
				TempPhysInvtDiffListBuffer.Find('-')
			else
				TempPhysInvtDiffListBuffer.Next;
		end;
		NextLineNo := NextLineNo + 1;
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'PostPhysInvtOrderHeader':
				begin
					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$PostPhysInvtOrderHeader$CurrentKey$Text',"Post. Phys. Invt. Order Header".CurrentKey); GlobalLanguage := currLanguage;
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
