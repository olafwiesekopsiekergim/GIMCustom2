#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60025 "CCO Sales Shipment GIM"
{
    Caption = 'Sales Shipment GIM';
    WordLayout = './Layouts/CCOSalesShipmentGIM.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Sales Shipment Header"; "Sales Shipment Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Sell-to Customer No.", "No. Printed";
            RequestFilterHeading = 'Posted Sales Shipment';
            column(ReportForNavId_3595; 3595) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_SalesShipmentHeader; ReportForNavWriteDataItem('SalesShipmentHeader', "Sales Shipment Header")) { }
            column(No_SalesShptHeader; "Sales Shipment Header"."No.")
            {
            }
            column(PageCaption; PageCaptionCap)
            {
            }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_5701; 5701) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_6455; 6455) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 2")
                    {
                    }
                    column(Firmendaten; CompanyInfo.Name + ', ' + CompanyInfo.Address + ', ' + CompanyInfo."Post Code" + ' ' + CompanyInfo.City)
                    {
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                    }
                    column(ExterneBelegnr_SalesShptHeader; "Sales Shipment Header"."External Document No.")
                    {
                    }
                    column(SalesShptCopyText; StrSubstNo(Text002, CopyText))
                    {
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                    }
                    column(CompanyAddr1; CompanyAddr[1])
                    {
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                    }
                    column(CompanyAddr2; CompanyAddr[2])
                    {
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                    }
                    column(CompanyAddr3; CompanyAddr[3])
                    {
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                    }
                    column(CompanyAddr4; CompanyAddr[4])
                    {
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                    }
                    column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
                    {
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                    }
                    column(CompanyInfoHomePage; CompanyInfo."Home Page")
                    {
                    }
                    column(CompanyInfoEmail; CompanyInfo."E-Mail")
                    {
                    }
                    column(CompanyInfoFaxNo; CompanyInfo."Fax No.")
                    {
                    }
                    column(CompanyInfoVATRegtnNo; CompanyInfo."VAT Registration No.")
                    {
                    }
                    column(CompanyInfoGiroNo; CompanyInfo."Giro No.")
                    {
                    }
                    column(CompanyInfoBankName; CompanyInfo."Bank Name")
                    {
                    }
                    column(CompanyInfoBankAccountNo; CompanyInfo."Bank Account No.")
                    {
                    }
                    column(SelltoCustNo_SalesShptHeader; "Sales Shipment Header"."Sell-to Customer No.")
                    {
                    }
                    column(DocDate_SalesShptHeader; Format("Sales Shipment Header"."Document Date", 0, 4))
                    {
                    }
                    column(SalesPersonText; SalesPersonText)
                    {
                    }
                    column(SalesPurchPersonName; SalesPurchPerson.Name)
                    {
                    }
                    column(SalesPurchPersonMail; SalesPurchPerson."E-Mail")
                    {
                    }
                    column(SalesPurchPersonPhone; SalesPurchPerson."Phone No.")
                    {
                    }
                    column(ReferenceText; ReferenceText)
                    {
                    }
                    column(YourRef_SalesShptHeader; "Sales Shipment Header"."Your Reference")
                    {
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                    }
                    column(ShipToAddr8; ShipToAddr[8])
                    {
                    }
                    column(CompanyAddr5; CompanyAddr[5])
                    {
                    }
                    column(CompanyAddr6; CompanyAddr[6])
                    {
                    }
                    column(ShptDate_SalesShptHeader; Format("Sales Shipment Header"."Shipment Date"))
                    {
                    }
                    column(OutputNo; OutputNo)
                    {
                    }
                    column(ItemTrackingAppendixCaption; ItemTrackingAppendixCaptionLbl)
                    {
                    }
                    column(PhoneNoCaption; PhoneNoCaptionLbl)
                    {
                    }
                    column(VATRegNoCaption; VATRegNoCaptionLbl)
                    {
                    }
                    column(GiroNoCaption; GiroNoCaptionLbl)
                    {
                    }
                    column(BankNameCaption; BankNameCaptionLbl)
                    {
                    }
                    column(BankAccNoCaption; BankAccNoCaptionLbl)
                    {
                    }
                    column(ShipmentNoCaption; ShipmentNoCaptionLbl)
                    {
                    }
                    column(ShipmentDateCaption; ShipmentDateCaptionLbl)
                    {
                    }
                    column(HomePageCaption; HomePageCaptionLbl)
                    {
                    }
                    column(EmailCaption; EmailCaptionLbl)
                    {
                    }
                    column(DocumentDateCaption; DocumentDateCaptionLbl)
                    {
                    }
                    column(ReportforNavPageNo; Format(ReportForNav.PagePlaceHolder))
                    {
                    }
                    column(SelltoCustNo_SalesShptHeaderCaption; "Sales Shipment Header".FieldCaption("Sell-to Customer No."))
                    {
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Sales Shipment Header";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_7574; 7574) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                        }
                        column(HeaderDimensionsCaption; HeaderDimensionsCaptionLbl)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not DimSetEntry1.FindSet then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo('%1 - %2', DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1; %2 - %3', DimText,
                                        DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until DimSetEntry1.Next = 0;
                        end;

                    }
                    dataitem(TMHeader; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_5060602; 5060602) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMHeader; ReportForNavWriteDataItem('TMHeader', TMHeader)) { }
                        column(TMHeader_Number; TMHeader.Number)
                        {
                        }
                        column(TMHeader_Text; TempTMLine.Text)
                        {
                        }
                        column(TMHeader_Italic; TempTMLine.Italic)
                        {
                        }
                        column(TMHeader_Bold; TempTMLine.Bold)
                        {
                        }
                        column(TMHeader_Underline; TempTMLine.Underline)
                        {
                        }
                        column(TMHeader_Color; TempTMLine.Color)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Sales Shipment Header",
                                //									"Sales Shipment Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Shipment Header"."CCS TM Text Set ID Header", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMHeader', TMHeader);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    dataitem("Sales Shipment Line"; "Sales Shipment Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemLinkReference = "Sales Shipment Header";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_2502; 2502) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_SalesShipmentLine; ReportForNavWriteDataItem('SalesShipmentLine', "Sales Shipment Line")) { }
                        column(ItemNo; ItemNo)
                        {
                        }
                        column(Position_SalesShptLine; "Sales Shipment Line".Position)
                        {
                        }
                        column(Description_SalesShptLine; "Sales Shipment Line".Description)
                        {
                        }
                        column(Description2_SalesShptLine; "Sales Shipment Line"."Description 2")
                        {
                        }
                        column(Serialno; SerialNo)
                        {
                        }
                        column(ShowInternalInfo; ShowInternalInfo)
                        {
                        }
                        column(ShowCorrectionLines; ShowCorrectionLines)
                        {
                        }
                        column(Type_SalesShptLine; Format(Type, 0, 2))
                        {
                        }
                        column(AsmHeaderExists; AsmHeaderExists)
                        {
                        }
                        column(DocumentNo_SalesShptLine; "Sales Shipment Line"."Document No.")
                        {
                        }
                        column(LinNo; LinNo)
                        {
                        }
                        column(Qty_SalesShptLine; "Sales Shipment Line".Quantity)
                        {
                        }
                        column(UOM_SalesShptLine; "Sales Shipment Line"."Unit of Measure")
                        {
                        }
                        column(No_SalesShptLine; "Sales Shipment Line"."No.")
                        {
                        }
                        column(LineNo_SalesShptLine; "Sales Shipment Line"."Line No.")
                        {
                        }
                        column(Description_SalesShptLineCaption; FieldCaption(Description))
                        {
                        }
                        column(Qty_SalesShptLineCaption; FieldCaption(Quantity))
                        {
                        }
                        column(UOM_SalesShptLineCaption; FieldCaption("Unit of Measure"))
                        {
                        }
                        column(No_SalesShptLineCaption; FieldCaption("No."))
                        {
                        }
                        dataitem(TMLine; Integer)
                        {
                            DataItemTableView = sorting(Number);
                            column(ReportForNavId_5060605; 5060605) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_TMLine; ReportForNavWriteDataItem('TMLine', TMLine)) { }
                            column(TMLine_Number; TMLine.Number)
                            {
                            }
                            column(TMLine_Text; TempTMLine.Text)
                            {
                            }
                            column(TMLine_Italic; TempTMLine.Italic)
                            {
                            }
                            column(TMLine_Bold; TempTMLine.Bold)
                            {
                            }
                            column(TMLine_Underline; TempTMLine.Underline)
                            {
                            }
                            column(TMLine_Color; TempTMLine.Color)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                // >> #TMW17.00:A001
                                if TestLicPermissionTM then begin
                                    // >> #TMW17.10.01:T100
                                    // TMFunctions.GetTMReportLinesHeader(TempTMLine, DATABASE::"Sales Shipment Line",
                                    //									"Sales Shipment Line", CurrReport.OBJECTID(FALSE));
                                    TMEngine.GetTextSetForReport(TempTMLine, "Sales Shipment Line"."CCS TM Text Set ID", CurrReport.ObjectId(false));
                                    // << #TMW17.10.01:T100
                                    SetRange(Number, 1, TempTMLine.Count);
                                end else begin
                                    CurrReport.Break;
                                end;
                                // << #TMW17.00:A001
                                ReportForNav.OnPreDataItem('TMLine', TMLine);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                // >> #TMW17.00:A001
                                if Number = 1 then
                                    TempTMLine.FindFirst
                                else
                                    TempTMLine.Next;
                                // << #TMW17.00:A001
                            end;

                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_3591; 3591) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText1; DimText)
                            {
                            }
                            column(LineDimensionsCaption; LineDimensionsCaptionLbl)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not DimSetEntry2.FindSet then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo('%1 - %2', DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1; %2 - %3', DimText,
                                            DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until DimSetEntry2.Next = 0;
                            end;

                        }
                        dataitem(DisplayAsmInfo; Integer)
                        {
                            DataItemTableView = sorting(Number);
                            column(ReportForNavId_7359; 7359) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DisplayAsmInfo; ReportForNavWriteDataItem('DisplayAsmInfo', DisplayAsmInfo)) { }
                            column(PostedAsmLineItemNo; BlanksForIndent + PostedAsmLine."No.")
                            {
                            }
                            column(PostedAsmLineDescription; BlanksForIndent + PostedAsmLine.Description)
                            {
                            }
                            column(PostedAsmLineQuantity; PostedAsmLine.Quantity)
                            {
                                DecimalPlaces = 0 : 5;
                            }
                            column(PostedAsmLineUOMCode; GetUnitOfMeasureDescr(PostedAsmLine."Unit of Measure Code"))
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                if not DisplayAssemblyInformation then
                                    CurrReport.Break;
                                if not AsmHeaderExists then
                                    CurrReport.Break;
                                PostedAsmLine.SetRange("Document No.", PostedAsmHeader."No.");
                                SetRange(Number, 1, PostedAsmLine.Count);
                                ReportForNav.OnPreDataItem('DisplayAsmInfo', DisplayAsmInfo);
                            end;

                            trigger OnAfterGetRecord();
                            var
                                ItemTranslation: Record "Item Translation";
                            begin
                                if Number = 1 then
                                    PostedAsmLine.FindSet
                                else
                                    PostedAsmLine.Next;
                                if ItemTranslation.Get(PostedAsmLine."No.",
                                     PostedAsmLine."Variant Code",
                                     "Sales Shipment Header"."Language Code")
                                then
                                    PostedAsmLine.Description := ItemTranslation.Description;
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            ReportForNav.OnPreDataItem('SalesShipmentLine', "Sales Shipment Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            LinNo := "Line No.";
                            if not ShowCorrectionLines and Correction then
                                CurrReport.Skip;
                            DimSetEntry2.SetRange("Dimension Set ID", "Dimension Set ID");
                            if DisplayAssemblyInformation then
                                AsmHeaderExists := AsmToShipmentExists(PostedAsmHeader);


                            // ItemLedgerEntry.SETRANGE("Document No.","Sales Shipment Line"."Document No.");
                            // ItemLedgerEntry.SETRANGE("Document Line No.","Sales Shipment Line"."Line No.");
                            // IF ItemLedgerEntry.FINDSET THEN BEGIN
                            //   IF ItemLedgerEntry."Serial No." <> '' THEN
                            //	 SerialNo := 'Serialnr.: ' + ItemLedgerEntry."Serial No."
                            //   ELSE
                            //	 CurrReport.SKIP;
                            // END;
                        end;

                        trigger OnPostDataItem();
                        begin
                            if ShowLotSN then begin
                                ItemTrackingDocMgt.SetRetrieveAsmItemTracking(true);
                                TrackingSpecCount :=
                                  ItemTrackingDocMgt.RetrieveDocumentItemTracking(TrackingSpecBuffer,
                                    "Sales Shipment Header"."No.", Database::"Sales Shipment Header", 0);
                                ItemTrackingDocMgt.SetRetrieveAsmItemTracking(false);
                            end;
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_3476; 3476) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;
                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_3363; 3363) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
                        column(BilltoCustNo_SalesShptHeader; "Sales Shipment Header"."Bill-to Customer No.")
                        {
                        }
                        column(CustAddr1; CustAddr[1])
                        {
                        }
                        column(CustAddr2; CustAddr[2])
                        {
                        }
                        column(CustAddr3; CustAddr[3])
                        {
                        }
                        column(CustAddr4; CustAddr[4])
                        {
                        }
                        column(CustAddr5; CustAddr[5])
                        {
                        }
                        column(CustAddr6; CustAddr[6])
                        {
                        }
                        column(CustAddr7; CustAddr[7])
                        {
                        }
                        column(CustAddr8; CustAddr[8])
                        {
                        }
                        column(BilltoAddressCaption; BilltoAddressCaptionLbl)
                        {
                        }
                        column(BilltoCustNo_SalesShptHeaderCaption; "Sales Shipment Header".FieldCaption("Bill-to Customer No."))
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowCustAddr then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total2', Total2);
                        end;

                    }
                    dataitem(ItemTrackingLine; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_6034; 6034) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_ItemTrackingLine; ReportForNavWriteDataItem('ItemTrackingLine', ItemTrackingLine)) { }
                        column(TrackingSpecBufferNo; TrackingSpecBuffer."Item No.")
                        {
                        }
                        column(TrackingSpecBufferDesc; TrackingSpecBuffer.Description)
                        {
                        }
                        column(TrackingSpecBufferLotNo; TrackingSpecBuffer."Lot No.")
                        {
                        }
                        column(TrackingSpecBufferSerNo; TrackingSpecBuffer."Serial No.")
                        {
                        }
                        column(TrackingSpecBufferQty; TrackingSpecBuffer."Quantity (Base)")
                        {
                        }
                        column(ShowTotal; ShowTotal)
                        {
                        }
                        column(ShowGroup; ShowGroup)
                        {
                        }
                        column(QuantityCaption; QuantityCaptionLbl)
                        {
                        }
                        column(SerialNoCaption; SerialNoCaptionLbl)
                        {
                        }
                        column(LotNoCaption; LotNoCaptionLbl)
                        {
                        }
                        column(DescriptionCaption; DescriptionCaptionLbl)
                        {
                        }
                        column(NoCaption; NoCaptionLbl)
                        {
                        }
                        dataitem(TotalItemTracking; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = const(1));
                            column(ReportForNavId_3353; 3353) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_TotalItemTracking; ReportForNavWriteDataItem('TotalItemTracking', TotalItemTracking)) { }
                            column(Quantity1; TotalQty)
                            {
                            }
                            trigger OnPreDataItem();
                            begin
                                ReportForNav.OnPreDataItem('TotalItemTracking', TotalItemTracking);
                            end;
                        }
                        trigger OnPreDataItem();
                        begin
                            if TrackingSpecCount = 0 then
                                CurrReport.Break;
                            ReportForNav.NewPageWithoutTransportTotals;
                            SetRange(Number, 1, TrackingSpecCount);
                            TrackingSpecBuffer.SetCurrentkey("Source ID", "Source Type", "Source Subtype", "Source Batch Name",
                              "Source Prod. Order Line", "Source Ref. No.");
                            ReportForNav.OnPreDataItem('ItemTrackingLine', ItemTrackingLine);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then
                                TrackingSpecBuffer.FindSet
                            else
                                TrackingSpecBuffer.Next;
                            if not ShowCorrectionLines and TrackingSpecBuffer.Correction then
                                CurrReport.Skip;
                            if TrackingSpecBuffer.Correction then
                                TrackingSpecBuffer."Quantity (Base)" := -TrackingSpecBuffer."Quantity (Base)";
                            ShowTotal := false;
                            if ItemTrackingAppendix.IsStartNewGroup(TrackingSpecBuffer) then
                                ShowTotal := true;
                            ShowGroup := false;
                            if (TrackingSpecBuffer."Source Ref. No." <> OldRefNo) or
                               (TrackingSpecBuffer."Item No." <> OldNo)
                            then begin
                                OldRefNo := TrackingSpecBuffer."Source Ref. No.";
                                OldNo := TrackingSpecBuffer."Item No.";
                                TotalQty := 0;
                            end else
                                ShowGroup := true;
                            TotalQty += TrackingSpecBuffer."Quantity (Base)";
                        end;

                    }
                    dataitem(TMFooter; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_5060608; 5060608) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_TMFooter; ReportForNavWriteDataItem('TMFooter', TMFooter)) { }
                        column(TMFooter_Number; TMFooter.Number)
                        {
                        }
                        column(TMFooter_Text; TempTMLine.Text)
                        {
                        }
                        column(TMFooter_Italic; TempTMLine.Italic)
                        {
                        }
                        column(TMFooter_Bold; TempTMLine.Bold)
                        {
                        }
                        column(TMFooter_Underline; TempTMLine.Underline)
                        {
                        }
                        column(TMFooter_Color; TempTMLine.Color)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            // >> #TMW17.00:A001
                            if TestLicPermissionTM then begin
                                // >> #TMW17.10.01:T100
                                // TMFunctions.GetTMReportLinesFooter(TempTMLine, DATABASE::"Sales Shipment Header",
                                //									"Sales Shipment Header", CurrReport.OBJECTID(FALSE));
                                TMEngine.GetTextSetForReport(TempTMLine, "Sales Shipment Header"."CCS TM Text Set ID Footer", CurrReport.ObjectId(false));
                                // << #TMW17.10.01:T100
                                SetRange(Number, 1, TempTMLine.Count);
                            end else begin
                                CurrReport.Break;
                            end;
                            // << #TMW17.00:A001
                            ReportForNav.OnPreDataItem('TMFooter', TMFooter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            // >> #TMW17.00:A001
                            if Number = 1 then
                                TempTMLine.FindFirst
                            else
                                TempTMLine.Next;
                            // << #TMW17.00:A001
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        // Item Tracking:
                        if ShowLotSN then begin
                            TrackingSpecCount := 0;
                            OldRefNo := 0;
                            ShowGroup := false;
                        end;
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;

                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := 1 + Abs(NoOfCopies);
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    OutputNo := 1;
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then begin
                        CopyText := Text001;
                        OutputNo += 1;
                    end;

                    TotalQty := 0;       // Item Tracking
                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        ShptCountPrinted.Run("Sales Shipment Header");
                end;

            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('SalesShipmentHeader', "Sales Shipment Header");
            end;

            trigger OnAfterGetRecord();
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                end else
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                DimSetEntry1.SetRange("Dimension Set ID", "Dimension Set ID");
                if "Salesperson Code" = '' then begin
                    SalesPurchPerson.Init;
                    SalesPersonText := '';
                end else begin
                    SalesPurchPerson.Get("Salesperson Code");
                    SalesPersonText := Text000;
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                FormatAddr.SalesShptShipTo(ShipToAddr, "Sales Shipment Header");
                FormatAddr.SalesShptBillTo(CustAddr, ShipToAddr, "Sales Shipment Header");
                ShowCustAddr := "Bill-to Customer No." <> "Sell-to Customer No.";
                for i := 1 to ArrayLen(CustAddr) do
                    if CustAddr[i] <> ShipToAddr[i] then
                        ShowCustAddr := true;
                if LogInteraction then
                    if not CurrReport.Preview then
                        SegManagement.LogDocument(
                          5, "No.", 0, 0, Database::Customer, "Sell-to Customer No.", "Salesperson Code",
                          "Campaign No.", "Posting Description", '');
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                        Enabled = LogInteractionEnable;
                    }
                    field("Show Correction Lines"; ShowCorrectionLines)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Correction Lines';
                    }
                    field(ShowLotSN; ShowLotSN)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Serial/Lot Number Appendix';
                    }
                    field(DisplayAsmInfo; DisplayAssemblyInformation)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Assembly Components';
                    }
                }
            }
        }

        trigger OnInit()
        begin
            LogInteractionEnable := true;
        end;

        trigger OnOpenPage()
        begin
            InitLogInteraction;
            LogInteractionEnable := LogInteraction;
        end;

    }

    trigger OnInitReport()
    begin
        CompanyInfo.Get;
        SalesSetup.Get;
        CompanyInfo.Get;
        CompanyInfo.CalcFields(Picture, "Picture 2");


        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        if not CurrReport.UseRequestPage then
            InitLogInteraction;
        AsmHeaderExists := false;
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Salesperson';
        Text001: label 'COPY';
        Text002: label 'Sales - Shipment%1';
        SerialNo: Text[50];
        ItemLedgerEntry: Record "Item Ledger Entry";
        ItemNo: Text;
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInfo: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        DimSetEntry1: Record "Dimension Set Entry";
        DimSetEntry2: Record "Dimension Set Entry";
        Language2: Codeunit Language;
        TrackingSpecBuffer: Record "Tracking Specification" temporary;
        PostedAsmHeader: Record "Posted Assembly Header";
        PostedAsmLine: Record "Posted Assembly Line";
        ShptCountPrinted: Codeunit "Sales Shpt.-Printed";
        SegManagement: Codeunit SegManagement;
        ItemTrackingDocMgt: Codeunit "Item Tracking Doc. Management";
        RespCenter: Record "Responsibility Center";
        ItemTrackingAppendix: Report "Item Tracking Appendix";
        CustAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        SalesPersonText: Text[20];
        ReferenceText: Text[80];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        OutputNo: Integer;
        NoOfLoops: Integer;
        TrackingSpecCount: Integer;
        OldRefNo: Integer;
        OldNo: Code[20];
        CopyText: Text[30];
        ShowCustAddr: Boolean;
        i: Integer;
        FormatAddr: Codeunit "Format Address";
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        ShowCorrectionLines: Boolean;
        ShowLotSN: Boolean;
        ShowTotal: Boolean;
        ShowGroup: Boolean;
        TotalQty: Decimal;
        [InDataSet]
        LogInteractionEnable: Boolean;
        DisplayAssemblyInformation: Boolean;
        AsmHeaderExists: Boolean;
        LinNo: Integer;
        ItemTrackingAppendixCaptionLbl: label 'Item Tracking - Appendix';
        PhoneNoCaptionLbl: label 'Phone No.';
        VATRegNoCaptionLbl: label 'VAT Reg. No.';
        GiroNoCaptionLbl: label 'Giro No.';
        BankNameCaptionLbl: label 'Bank';
        BankAccNoCaptionLbl: label 'Account No.';
        ShipmentNoCaptionLbl: label 'Shipment No.';
        ShipmentDateCaptionLbl: label 'Shipment Date';
        HomePageCaptionLbl: label 'Home Page';
        EmailCaptionLbl: label 'E-Mail';
        DocumentDateCaptionLbl: label 'Document Date';
        HeaderDimensionsCaptionLbl: label 'Header Dimensions';
        LineDimensionsCaptionLbl: label 'Line Dimensions';
        BilltoAddressCaptionLbl: label 'Bill-to Address';
        QuantityCaptionLbl: label 'Quantity';
        SerialNoCaptionLbl: label 'Serial No.';
        LotNoCaptionLbl: label 'Lot No.';
        DescriptionCaptionLbl: label 'Description';
        NoCaptionLbl: label 'No.';
        PageCaptionCap: label 'Page %1 of %2';
        "--- TM glob. Vars. ---": Integer;
        LicPermission: Record "License Permission";
        TMEngine: Codeunit "CCS TM Engine";
        TempTMLine: Record "CCS TM Line Document" temporary;

    procedure InitLogInteraction()
    var
        DocumentType: Enum "Interaction Log Entry Document Type";
    begin
        LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Sales Shpt. Note") <> '';
    end;

    procedure InitializeRequest(NewNoOfCopies: Integer; NewShowInternalInfo: Boolean; NewLogInteraction: Boolean; NewShowCorrectionLines: Boolean; NewShowLotSN: Boolean; DisplayAsmInfo: Boolean)
    begin
        NoOfCopies := NewNoOfCopies;
        ShowInternalInfo := NewShowInternalInfo;
        LogInteraction := NewLogInteraction;
        ShowCorrectionLines := NewShowCorrectionLines;
        ShowLotSN := NewShowLotSN;
        DisplayAssemblyInformation := DisplayAsmInfo;
    end;

    local procedure GetUnitOfMeasureDescr(UOMCode: Code[10]): Text[10]
    var
        UnitOfMeasure: Record "Unit of Measure";
    begin
        if not UnitOfMeasure.Get(UOMCode) then
            exit(UOMCode);
        exit(UnitOfMeasure.Description);
    end;

    procedure BlanksForIndent(): Text[10]
    begin
        exit(PadStr('', 2, ' '));
    end;

    procedure "--- Text Module ---"()
    begin
    end;

    procedure TestLicPermissionTM(): Boolean
    begin
        // >> #TMW17.00:A001
        if (LicPermission."Object Type" <> LicPermission."object type"::Codeunit) or
           (LicPermission."Object Number" <> Codeunit::"CCS TM Engine")  // #TMW17.10.01:T100
        then begin
            LicPermission.Get(LicPermission."object type"::Codeunit, Codeunit::"CCS TM Engine");  // #TMW17.10.01:T100
        end;
        if LicPermission."Execute Permission" = LicPermission."execute permission"::Yes then begin
            exit(true);
        end else begin
            exit(false);
        end;
        // << #TMW17.00:A001
    end;

    local procedure OnPreSectionSalesShipmentLine_Body1(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        if "Sales Shipment Line".Type.AsInteger() = 2 then
            ItemNo := "Sales Shipment Line"."No."
        else
            ItemNo := '';
        // Autogenerated by ForNav;
    end;

    local procedure OnPreSectionSalesShipmentLine_Body6(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        ReportForNavSetShowOutput(("Sales Shipment Line"."Description 2" <> '') or (ItemLedgerEntry."Serial No." <> ''));
        // Autogenerated by ForNav;
    end;

    local procedure OnPreSectionSalesShipmentLine_Footer7(var "Sales Shipment Line": Record "Sales Shipment Line");
    begin
        with "Sales Shipment Line" do begin
        end;// Autogenerated by ForNav;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'SalesShipmentHeader':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'SalesShipmentLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body1("Sales Shipment Line");
                    jsonObject.Add('$Body1$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Body6("Sales Shipment Line");
                    jsonObject.Add('$Body6$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionSalesShipmentLine_Footer7("Sales Shipment Line");
                    jsonObject.Add('$Footer7$Pre', ReportForNavShowOutput);
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
