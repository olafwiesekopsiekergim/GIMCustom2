#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60021 "CCO Phys.Invt.Order Diff. List"
{
    Caption = 'Phys. Invt. Order Diff. List';
    WordLayout = './Layouts/CCOPhys.Invt.OrderDiff.List.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Phys. Invt. Order Header"; "Phys. Invt. Order Header")
        {
            RequestFilterFields = "No.";
            column(ReportForNavId_3530; 3530) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PhysInventoryOrderHeader; ReportForNavWriteDataItem('PhysInventoryOrderHeader', "Phys. Invt. Order Header")) { }
            column(Phys__Inventory_Order_Header_No_; "Phys. Invt. Order Header"."No.")
            {
            }
            dataitem(PageCounter; Integer)
            {
                DataItemTableView = sorting(Number) where(Number = const(1));
                column(ReportForNavId_8098; 8098) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_PageCounter; ReportForNavWriteDataItem('PageCounter', PageCounter)) { }
                column("USERID"; UserId)
                {
                }
                column(COMPANYNAME; COMPANYNAME)
                {
                }
                column(CurrReport_PAGENO; Format(ReportForNav.PagePlaceHolder))
                {
                }
                column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
                {
                }
                column(Phys__Inventory_Order_Header___Posting_Date_; Format("Phys. Invt. Order Header"."Posting Date"))
                {
                }
                column(Phys__Inventory_Order_Header___No__; "Phys. Invt. Order Header"."No.")
                {
                }
                column(Phys__Inventory_Order_Header__Status; "Phys. Invt. Order Header".Status)
                {
                }
                column(Phys__Inventory_Order_Header___Person_Responsible_; "Phys. Invt. Order Header"."Person Responsible")
                {
                }
                column(Phys__Inventory_Order_Header___No__Finished_Recordings_; "Phys. Invt. Order Header"."No. Finished Recordings")
                {
                }
                column(Phys__Inventory_Order_Header__Description; "Phys. Invt. Order Header".Description)
                {
                }
                column(StatusInt; StatusInt)
                {
                }
                column(ShowDim; ShowDim)
                {
                }
                column(PageCounter_Number; PageCounter.Number)
                {
                }
                column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
                {
                }
                column(Phys__Inventory_Order_Difference_ListCaption; Phys__Inventory_Order_Difference_ListCaptionLbl)
                {
                }
                column(Phys__Inventory_Order_Header___Posting_Date_Caption; Phys__Inventory_Order_Header___Posting_Date_CaptionLbl)
                {
                }
                column(Phys__Inventory_Order_Header___No__Caption; "Phys. Invt. Order Header".FieldCaption("No."))
                {
                }
                column(Phys__Inventory_Order_Header__StatusCaption; "Phys. Invt. Order Header".FieldCaption(Status))
                {
                }
                column(Phys__Inventory_Order_Header___Person_Responsible_Caption; "Phys. Invt. Order Header".FieldCaption("Person Responsible"))
                {
                }
                column(Phys__Inventory_Order_Header___No__Finished_Recordings_Caption; "Phys. Invt. Order Header".FieldCaption("No. Finished Recordings"))
                {
                }
                column(Phys__Inventory_Order_Header__DescriptionCaption; "Phys. Invt. Order Header".FieldCaption(Description))
                {
                }
                dataitem("Phys. Invt. Order Line"; "Phys. Invt. Order Line")
                {
                    DataItemLink = "Document No." = FIELD("No.");
                    DataItemLinkReference = "Phys. Invt. Order Header";
                    DataItemTableView = sorting("Document No.", "Line No.");
                    column(ReportForNavId_8887; 8887) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PhysInventoryOrderLine; ReportForNavWriteDataItem('PhysInventoryOrderLine', "Phys. Invt. Order Line")) { }
                    column(Phys__Inventory_Order_Line__Item_No__; "Phys. Invt. Order Line"."Item No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Location_Code_; "Phys. Invt. Order Line"."Location Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Bin_Code_; "Phys. Invt. Order Line"."Bin Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line_Description; "Phys. Invt. Order Line".Description)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Base_Unit_of_Measure_Code_; "Phys. Invt. Order Line"."Base Unit of Measure Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Expected__Base__; "Qty. Expected (Base)")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Variant_Code_; "Phys. Invt. Order Line"."Variant Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Recorded__Base__; "Qty. Recorded (Base)")
                    {
                    }
                    column(AmountPos; AmountPos)
                    {
                    }
                    column(AmountNeg; AmountNeg)
                    {
                    }
                    column(QtyPos; QtyPos)
                    {
                        DecimalPlaces = 0 : 5;
                    }
                    column(QtyNeg; QtyNeg)
                    {
                        DecimalPlaces = 0 : 5;
                    }
                    column(Phys__Inventory_Order_Line__No__Finished_Rec__Lines_; "Phys. Invt. Order Line"."No. Finished Rec.-Lines")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Recorded_without_Order_; Format("Recorded without Order"))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Exp__Calculated_; "Phys. Invt. Order Line"."Qty. Exp. Calculated")
                    {
                    }
                    column(Phys__Inventory_Order_Line__In_Recording_Lines_; "Phys. Invt. Order Line"."On Recording Lines")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Item_No___Control95; "Phys. Invt. Order Line"."Item No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Location_Code__Control96; "Phys. Invt. Order Line"."Location Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Bin_Code__Control97; "Phys. Invt. Order Line"."Bin Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line_Description_Control98; "Phys. Invt. Order Line".Description)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Base_Unit_of_Measure_Code__Control99; "Phys. Invt. Order Line"."Base Unit of Measure Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Expected__Base___Control100; "Qty. Expected (Base)")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Variant_Code__Control101; "Phys. Invt. Order Line"."Variant Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Recorded__Base___Control102; "Qty. Recorded (Base)")
                    {
                    }
                    column(Text1000; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control104; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control105; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control106; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__No__Finished_Rec__Lines__Control107; "Phys. Invt. Order Line"."No. Finished Rec.-Lines")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Recorded_without_Order__Control108; "Phys. Invt. Order Line"."Recorded without Order")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Item_No___Control109; "Phys. Invt. Order Line"."Item No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Location_Code__Control110; "Phys. Invt. Order Line"."Location Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Bin_Code__Control111; "Phys. Invt. Order Line"."Bin Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line_Description_Control112; "Phys. Invt. Order Line".Description)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Base_Unit_of_Measure_Code__Control113; "Phys. Invt. Order Line"."Base Unit of Measure Code")
                    {
                    }
                    column(Text1000_Control114; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Variant_Code__Control115; "Phys. Invt. Order Line"."Variant Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Recorded__Base___Control116; "Qty. Recorded (Base)")
                    {
                    }
                    column(Text1000_Control117; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control118; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control119; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control120; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__No__Finished_Rec__Lines__Control121; "Phys. Invt. Order Line"."No. Finished Rec.-Lines")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Recorded_without_Order__Control122; "Phys. Invt. Order Line"."Recorded without Order")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Item_No___Control123; "Phys. Invt. Order Line"."Item No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Location_Code__Control124; "Phys. Invt. Order Line"."Location Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Bin_Code__Control125; "Phys. Invt. Order Line"."Bin Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line_Description_Control126; "Phys. Invt. Order Line".Description)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Base_Unit_of_Measure_Code__Control127; "Phys. Invt. Order Line"."Base Unit of Measure Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Expected__Base___Control128; "Qty. Expected (Base)")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Variant_Code__Control129; "Phys. Invt. Order Line"."Variant Code")
                    {
                    }
                    column(Text1000_Control130; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control131; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control132; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control133; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__No__Finished_Rec__Lines__Control134; "Phys. Invt. Order Line"."No. Finished Rec.-Lines")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Recorded_without_Order__Control135; "Phys. Invt. Order Line"."Recorded without Order")
                    {
                    }
                    column(Text1000_Control136; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Item_No___Control137; "Phys. Invt. Order Line"."Item No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Location_Code__Control138; "Phys. Invt. Order Line"."Location Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Bin_Code__Control139; "Phys. Invt. Order Line"."Bin Code")
                    {
                    }
                    column(Phys__Inventory_Order_Line_Description_Control140; "Phys. Invt. Order Line".Description)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Base_Unit_of_Measure_Code__Control141; "Phys. Invt. Order Line"."Base Unit of Measure Code")
                    {
                    }
                    column(Text1000_Control142; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__Variant_Code__Control143; "Phys. Invt. Order Line"."Variant Code")
                    {
                    }
                    column(Text1000_Control144; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control145; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control146; Text1000Lbl)
                    {
                    }
                    column(Text1000_Control147; Text1000Lbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__No__Finished_Rec__Lines__Control148; "Phys. Invt. Order Line"."No. Finished Rec.-Lines")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Recorded_without_Order__Control149; "Phys. Invt. Order Line"."Recorded without Order")
                    {
                    }
                    column(Text1000_Control150; Text1000Lbl)
                    {
                    }
                    column(PrintAnEmptyLine; PrintAnEmptyLine)
                    {
                    }
                    column(AmountPos_Control49; AmountPos)
                    {
                    }
                    column(AmountNeg_Control50; AmountNeg)
                    {
                    }
                    column(NewAmountPos; NewAmountPos)
                    {
                    }
                    column(NewAmountNeg; NewAmountNeg)
                    {
                    }
                    column(Phys__Inventory_Order_Line_Document_No_; "Phys. Invt. Order Line"."Document No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line_Line_No_; "Phys. Invt. Order Line"."Line No.")
                    {
                    }
                    column(Phys__Inventory_Order_Line__Item_No__Caption; FieldCaption("Item No."))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Location_Code_Caption; FieldCaption("Location Code"))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Bin_Code_Caption; FieldCaption("Bin Code"))
                    {
                    }
                    column(Phys__Inventory_Order_Line_DescriptionCaption; FieldCaption(Description))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Base_Unit_of_Measure_Code_Caption; FieldCaption("Base Unit of Measure Code"))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Expected__Base__Caption; FieldCaption("Qty. Expected (Base)"))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Variant_Code_Caption; FieldCaption("Variant Code"))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Qty__Recorded__Base__Caption; FieldCaption("Qty. Recorded (Base)"))
                    {
                    }
                    column(QtyPosCaption; QtyPosCaptionLbl)
                    {
                    }
                    column(QtyNegCaption; QtyNegCaptionLbl)
                    {
                    }
                    column(AmountPosCaption; AmountPosCaptionLbl)
                    {
                    }
                    column(AmountNegCaption; AmountNegCaptionLbl)
                    {
                    }
                    column(Phys__Inventory_Order_Line__No__Finished_Rec__Lines_Caption; FieldCaption("No. Finished Rec.-Lines"))
                    {
                    }
                    column(Phys__Inventory_Order_Line__Recorded_without_Order_Caption; Phys__Inventory_Order_Line__Recorded_without_Order_CaptionLbl)
                    {
                    }
                    column(TotalsCaption; TotalsCaptionLbl)
                    {
                    }
                    dataitem(DiffListBufferLoop; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_5113; 5113) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DiffListBufferLoop; ReportForNavWriteDataItem('DiffListBufferLoop', DiffListBufferLoop)) { }
                        column(TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__; TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__; TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Lot_No__; TempPhysInvtDiffListBuffer."Track. Lot No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Serial_No__; TempPhysInvtDiffListBuffer."Track. Serial No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Qty___Base__; TempPhysInvtDiffListBuffer."Rec. Qty. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Lot_No__; TempPhysInvtDiffListBuffer."Rec. Lot No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Serial_No__; TempPhysInvtDiffListBuffer."Rec. Serial No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__No__; TempPhysInvtDiffListBuffer."Rec. No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Qty___Base__; TempPhysInvtDiffListBuffer."Exp. Qty. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Lot_No__; TempPhysInvtDiffListBuffer."Exp. Lot No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Serial_No__; TempPhysInvtDiffListBuffer."Exp. Serial No.")
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Qty___Base___Control58; TempPhysInvtDiffListBuffer."Exp. Qty. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Qty___Base___Control62; TempPhysInvtDiffListBuffer."Rec. Qty. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base___Control63; TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base___Control81; TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)")
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(DiffListBufferLoop_Number; DiffListBufferLoop.Number)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Serial_No__Caption; TempPhysInvtDiffListBuffer__Exp__Serial_No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Lot_No__Caption; TempPhysInvtDiffListBuffer__Exp__Lot_No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Exp__Qty___Base__Caption; TempPhysInvtDiffListBuffer__Exp__Qty___Base__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__No__Caption; TempPhysInvtDiffListBuffer__Rec__No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Serial_No__Caption; TempPhysInvtDiffListBuffer__Rec__Serial_No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Lot_No__Caption; TempPhysInvtDiffListBuffer__Rec__Lot_No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Rec__Qty___Base__Caption; TempPhysInvtDiffListBuffer__Rec__Qty___Base__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Serial_No__Caption; TempPhysInvtDiffListBuffer__Track__Serial_No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Lot_No__Caption; TempPhysInvtDiffListBuffer__Track__Lot_No__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__Caption; TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__CaptionLbl)
                        {
                        }
                        column(TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__Caption; TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__CaptionLbl)
                        {
                        }
                        column(Expected_Tracking_LinesCaption; Expected_Tracking_LinesCaptionLbl)
                        {
                        }
                        column(Recording_LinesCaption; Recording_LinesCaptionLbl)
                        {
                        }
                        column(Item_Tracking_LinesCaption; Item_Tracking_LinesCaptionLbl)
                        {
                        }
                        column(TotalsCaption_Control82; TotalsCaption_Control82Lbl)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if NoOfBufferLines = 0 then
                                CurrReport.Break;
                            LineCount := 0;
                            TempPhysInvtDiffListBuffer.Reset;
                            ReportForNav.OnPreDataItem('DiffListBufferLoop', DiffListBufferLoop);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            LineCount := LineCount + 1;
                            if LineCount > NoOfBufferLines then
                                CurrReport.Break;
                            if LineCount = 1 then
                                TempPhysInvtDiffListBuffer.Find('-')
                            else
                                TempPhysInvtDiffListBuffer.Next;
                        end;

                    }
                    dataitem(LineDimensionLoop; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_2529; 2529) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_LineDimensionLoop; ReportForNavWriteDataItem('LineDimensionLoop', LineDimensionLoop)) { }
                        column(DimText; DimText)
                        {
                        }
                        column(Number; LineDimensionLoop.Number)
                        {
                        }
                        column(DimText_Control44; DimText)
                        {
                        }
                        column(DimTextCaption; DimTextCaptionLbl)
                        {
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowDim then
                                CurrReport.Break;
                            if LineIsEmpty then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('LineDimensionLoop', LineDimensionLoop);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not DimSetEntry.FindSet then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo('%1 - %2', DimSetEntry."Dimension Code", DimSetEntry."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1; %2 - %3', DimText, DimSetEntry."Dimension Code", DimSetEntry."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (DimSetEntry.Next = 0);
                        end;

                    }
                    dataitem(Integer; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_5444; 5444) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Integer; ReportForNavWriteDataItem('Integer', Integer)) { }
                        trigger OnPreDataItem();
                        begin
                            ReportForNav.OnPreDataItem('Integer', Integer);
                        end;
                    }
                    trigger OnPreDataItem();
                    begin
                        NewAmountPos := 0;
                        NewAmountNeg := 0;
                        ReportForNav.OnPreDataItem('PhysInventoryOrderLine', "Phys. Invt. Order Line");
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        LineIsEmpty := EmptyLine;
                        QtyPos := 0;
                        QtyNeg := 0;
                        AmountPos := 0;
                        AmountNeg := 0;
                        if not LineIsEmpty then begin
                            DimSetEntry.SetRange("Dimension Set ID", "Dimension Set ID");
                            case "Entry Type" of
                                "entry type"::"Positive Adjmt.":
                                    begin
                                        QtyPos := "Quantity (Base)";
                                        AmountPos := "Unit Amount" * QtyPos;
                                    end;
                                "entry type"::"Negative Adjmt.":
                                    begin
                                        QtyNeg := "Quantity (Base)";
                                        AmountNeg := "Unit Amount" * QtyNeg;
                                    end;
                            end;
                        end;
                        // Tracking Information:
                        TempPhysInvtDiffListBuffer.DeleteAll;
                        NoOfBufferLines := 0;
                        if not LineIsEmpty and "Use Item Tracking" then
                            CreateDiffListBuffer("Phys. Invt. Order Line", NoOfBufferLines);
                        PrintAnEmptyLine := NoOfBufferLines > 0;
                        NewAmountPos += AmountPos;
                        NewAmountNeg += AmountNeg;
                    end;

                }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('PageCounter', PageCounter);
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('PhysInventoryOrderHeader', "Phys. Invt. Order Header");
            end;

            trigger OnAfterGetRecord();
            begin
                StatusInt := Status.AsInteger();
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ShowDimensions; ShowDim)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Dimensions';
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        TempPhysInvtDiffListBuffer: Record "Phys. Invt. Diff. List Buffer" temporary;
        DimSetEntry: Record "Dimension Set Entry";
        DimText: Text[120];
        OldDimText: Text[75];
        NoOfBufferLines: Integer;
        LineCount: Integer;
        QtyPos: Decimal;
        QtyNeg: Decimal;
        AmountPos: Decimal;
        AmountNeg: Decimal;
        ShowDim: Boolean;
        Continue: Boolean;
        LineIsEmpty: Boolean;
        PrintAnEmptyLine: Boolean;
        StatusInt: Integer;
        NewAmountPos: Decimal;
        NewAmountNeg: Decimal;
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Phys__Inventory_Order_Difference_ListCaptionLbl: label 'Phys. Inventory Order Difference List';
        Phys__Inventory_Order_Header___Posting_Date_CaptionLbl: label 'Posting Date';
        Text1000Lbl: label 'Undefined';
        QtyPosCaptionLbl: label 'Qty. Pos.';
        QtyNegCaptionLbl: label 'Qty. Neg.';
        AmountPosCaptionLbl: label 'Amount Pos.';
        AmountNegCaptionLbl: label 'Amount Neg.';
        Phys__Inventory_Order_Line__Recorded_without_Order_CaptionLbl: label 'Recorded without Order';
        TotalsCaptionLbl: label 'Totals';
        TempPhysInvtDiffListBuffer__Exp__Serial_No__CaptionLbl: label 'Serial No.';
        TempPhysInvtDiffListBuffer__Exp__Lot_No__CaptionLbl: label 'Lot No.';
        TempPhysInvtDiffListBuffer__Exp__Qty___Base__CaptionLbl: label 'Exp. Qty. (Base)';
        TempPhysInvtDiffListBuffer__Rec__No__CaptionLbl: label 'Recording No.';
        TempPhysInvtDiffListBuffer__Rec__Serial_No__CaptionLbl: label 'Serial No.';
        TempPhysInvtDiffListBuffer__Rec__Lot_No__CaptionLbl: label 'Lot No.';
        TempPhysInvtDiffListBuffer__Rec__Qty___Base__CaptionLbl: label 'Recorded Qty. (Base)';
        TempPhysInvtDiffListBuffer__Track__Serial_No__CaptionLbl: label 'Serial No.';
        TempPhysInvtDiffListBuffer__Track__Lot_No__CaptionLbl: label 'Lot No.';
        TempPhysInvtDiffListBuffer__Track__Qty__Neg___Base__CaptionLbl: label 'Qty Neg. (Base)';
        TempPhysInvtDiffListBuffer__Track__Qty__Pos___Base__CaptionLbl: label 'Qty. Pos. (Base)';
        Expected_Tracking_LinesCaptionLbl: label 'Expected Tracking Lines';
        Recording_LinesCaptionLbl: label 'Recording Lines';
        Item_Tracking_LinesCaptionLbl: label 'Item Tracking Lines';
        TotalsCaption_Control82Lbl: label 'Totals';
        DimTextCaptionLbl: label 'Line Dimensions';

    procedure CreateDiffListBuffer(PhysInvtOrderLine: Record "Phys. Invt. Order Line"; var NoOfBufferLines: Integer)
    var
        ExpPhysInvtTracking: Record "Exp. Phys. Invt. Tracking";
        PhysInvtRecordLine: Record "Phys. Invt. Record Line";
        ReservEntry: Record "Reservation Entry";
        NextLineNo: Integer;
    begin
        with PhysInvtOrderLine do begin
            NoOfBufferLines := 0;
            NextLineNo := 1;
            ExpPhysInvtTracking.Reset;
            ExpPhysInvtTracking.SetRange("Order No", "Document No.");
            ExpPhysInvtTracking.SetRange("Order Line No.", "Line No.");
            if ExpPhysInvtTracking.Find('-') then
                repeat
                    FindOrCreateDiffListBuffer(NoOfBufferLines, NextLineNo);
                    TempPhysInvtDiffListBuffer."Exp. Serial No." := ExpPhysInvtTracking."Serial No.";
                    TempPhysInvtDiffListBuffer."Exp. Lot No." := ExpPhysInvtTracking."Lot No.";
                    TempPhysInvtDiffListBuffer."Exp. Qty. (Base)" := ExpPhysInvtTracking."Quantity (Base)";
                    TempPhysInvtDiffListBuffer.Modify;
                until ExpPhysInvtTracking.Next = 0;
            NextLineNo := 1;
            PhysInvtRecordLine.Reset;
            PhysInvtRecordLine.SetCurrentkey("Order No.", "Order Line No.");
            PhysInvtRecordLine.SetRange("Order No.", "Document No.");
            PhysInvtRecordLine.SetRange("Order Line No.", "Line No.");
            if PhysInvtRecordLine.Find('-') then
                repeat
                    FindOrCreateDiffListBuffer(NoOfBufferLines, NextLineNo);
                    TempPhysInvtDiffListBuffer."Rec. No." := PhysInvtRecordLine."Recording No.";
                    TempPhysInvtDiffListBuffer."Rec. Line No." := PhysInvtRecordLine."Line No.";
                    TempPhysInvtDiffListBuffer."Rec. Serial No." := PhysInvtRecordLine."Serial No.";
                    TempPhysInvtDiffListBuffer."Rec. Lot No." := PhysInvtRecordLine."Lot No.";
                    TempPhysInvtDiffListBuffer."Rec. Qty. (Base)" := PhysInvtRecordLine."Quantity (Base)";
                    TempPhysInvtDiffListBuffer.Modify;
                until PhysInvtRecordLine.Next = 0;
            NextLineNo := 1;
            ReservEntry.Reset;
            ReservEntry.SetCurrentkey(
              "Source Type", "Source Subtype", "Source ID",
              "Source Batch Name", "Source Prod. Order Line",
              "Source Ref. No.");
            ReservEntry.SetRange("Source Type", Database::"Phys. Invt. Order Line");
            ReservEntry.SetRange("Source Subtype", 0);
            ReservEntry.SetRange("Source ID", "Document No.");
            ReservEntry.SetRange("Source Batch Name", '');
            ReservEntry.SetRange("Source Prod. Order Line", 0);
            ReservEntry.SetRange("Source Ref. No.", "Line No.");
            if ReservEntry.Find('-') then
                repeat
                    FindOrCreateDiffListBuffer(NoOfBufferLines, NextLineNo);
                    TempPhysInvtDiffListBuffer."Track. Serial No." := ReservEntry."Serial No.";
                    TempPhysInvtDiffListBuffer."Track. Lot No." := ReservEntry."Lot No.";
                    if ReservEntry.Positive then begin
                        TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := 0;
                        TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := ReservEntry.Quantity;
                    end else begin
                        TempPhysInvtDiffListBuffer."Track. Qty. Neg. (Base)" := ReservEntry.Quantity;
                        TempPhysInvtDiffListBuffer."Track. Qty. Pos. (Base)" := 0;
                    end;
                    TempPhysInvtDiffListBuffer.Modify;
                until ReservEntry.Next = 0;
        end;
    end;

    procedure FindOrCreateDiffListBuffer(var NoOfBufferLines: Integer; var NextLineNo: Integer)
    begin
        if NextLineNo > NoOfBufferLines then begin
            TempPhysInvtDiffListBuffer.Init;
            TempPhysInvtDiffListBuffer."Line No." := NextLineNo;
            TempPhysInvtDiffListBuffer.Insert;
            NoOfBufferLines := NoOfBufferLines + 1;
        end else begin
            if NextLineNo = 1 then
                TempPhysInvtDiffListBuffer.Find('-')
            else
                TempPhysInvtDiffListBuffer.Next;
        end;
        NextLineNo := NextLineNo + 1;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'PhysInventoryOrderHeader':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$PhysInventoryOrderHeader$CurrentKey$Text', "Phys. Invt. Order Header".CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
