#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60031 "CCO Purchase Credit Memo"
{
    Caption = 'Purchase Credit Memo';
    WordLayout = './Layouts/CCOPurchaseCreditMemo.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Purch. Cr. Memo Hdr."; "Purch. Cr. Memo Hdr.")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Buy-from Vendor No.", "No. Printed";
            RequestFilterHeading = 'Posted Purchase Cr. Memo';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PurchCrMemoHdr; ReportForNavWriteDataItem('PurchCrMemoHdr', "Purch. Cr. Memo Hdr.")) { }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop', CopyLoop)) { }
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop', PageLoop)) { }
                    column(UnsereKontoNo; "Purch. Cr. Memo Hdr."."Our Account No.")
                    {
                    }
                    column(CompanyInfoPicture2; CompanyInfo."Picture 3")
                    {
                    }
                    column(CompanyInfoPicture; CompanyInfo.Picture)
                    {
                        IncludeCaption = false;
                    }
                    column(AppliedToText; AppliedToText)
                    {
                        IncludeCaption = false;
                    }
                    column(PostingDate_PurchCrMemoHdr_Lbl; "Purch. Cr. Memo Hdr.".FieldCaption("Posting Date"))
                    {
                        IncludeCaption = false;
                    }
                    column(PostingDate_PurchCrMemoHdr; "Purch. Cr. Memo Hdr."."Posting Date")
                    {
                        IncludeCaption = false;
                    }
                    column(ReturnOrderNo_PurchCrMemoHdr; "Purch. Cr. Memo Hdr."."Return Order No.")
                    {
                        IncludeCaption = false;
                    }
                    column(No_PurchCrMemoHdr; "Purch. Cr. Memo Hdr."."No.")
                    {
                        IncludeCaption = false;
                    }
                    column(ReturnOrderNoText; ReturnOrderNoText)
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr1; VendAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr2; VendAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr4; VendAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr3; VendAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr5; VendAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr6; VendAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr7; VendAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(VendAddr8; VendAddr[8])
                    {
                        IncludeCaption = false;
                    }
                    column(E_Mail_SalesPurchPerson; SalesPurchPerson."E-Mail")
                    {
                        IncludeCaption = false;
                    }
                    column(Buy_fromVendorNo_PurchCrMemoHdr; "Purch. Cr. Memo Hdr."."Buy-from Vendor No.")
                    {
                        IncludeCaption = false;
                    }
                    column(YourReference_PurchCrMemoHdr; "Purch. Cr. Memo Hdr."."Your Reference")
                    {
                        IncludeCaption = false;
                    }
                    column(TODAY_0_7; Format(Today, 0, 7))
                    {
                        IncludeCaption = false;
                    }
                    column(Telefonnr_BenutzerER; BenutzerER."Telefonnr.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_BenutzerER; user."Full Name")
                    {
                        IncludeCaption = false;
                    }
                    column(PhoneNo_SalesPurchPerson; SalesPurchPerson."Phone No.")
                    {
                        IncludeCaption = false;
                    }
                    column(Name_SalesPurchPerson; SalesPurchPerson.Name)
                    {
                        IncludeCaption = false;
                    }
                    column(WebTxt; WebTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(MailTxt; MailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(wwwTxt; wwwTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(EMailTxt; EMailTxt)
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr7; ShipToAddr[7])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr6; ShipToAddr[6])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr5; ShipToAddr[5])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr4; ShipToAddr[4])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr3; ShipToAddr[3])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr2; ShipToAddr[2])
                    {
                        IncludeCaption = false;
                    }
                    column(ShipToAddr1; ShipToAddr[1])
                    {
                        IncludeCaption = false;
                    }
                    column(DUE001; DUE001)
                    {
                        IncludeCaption = false;
                    }
                    column(FirmenAnschr1; FirmenAnschr1)
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_DUE004_PurchCrMemoHdrNo; StrSubstNo(DUE004, "Purch. Cr. Memo Hdr."."No."))
                    {
                        IncludeCaption = false;
                    }
                    column(STRSUBSTNO_Text005_FORMAT_ReportForNavPageNo_; StrSubstNo(Text005, Format(ReportForNav.PagePlaceHolder)))
                    {
                        IncludeCaption = false;
                    }
                    dataitem(DimensionLoop1; Integer)
                    {
                        DataItemLinkReference = "Purch. Cr. Memo Hdr.";
                        DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                        column(ReportForNavId_72; 72) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_DimensionLoop1; ReportForNavWriteDataItem('DimensionLoop1', DimensionLoop1)) { }
                        column(DimText; DimText)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnPreDataItem();
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('DimensionLoop1', DimensionLoop1);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if Number = 1 then begin
                                if not PostedDocDim1.Find('-') then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;
                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo(
                                      '%1 %2', PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1, %2 %3', DimText,
                                        PostedDocDim1."Dimension Code", PostedDocDim1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until (PostedDocDim1.Next = 0);
                        end;

                    }
                    dataitem("Purch. Cr. Memo Line"; "Purch. Cr. Memo Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemLinkReference = "Purch. Cr. Memo Hdr.";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_74; 74) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_PurchCrMemoLine; ReportForNavWriteDataItem('PurchCrMemoLine', "Purch. Cr. Memo Line")) { }
                        column(WahrTxt; WährTxt)
                        {
                            IncludeCaption = false;
                        }
                        column(LineAmount_PurchCrMemoLine; "Purch. Cr. Memo Line"."Line Amount")
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Line".GetCurrencyCode;
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(Description_PurchCrMemoLine; "Purch. Cr. Memo Line".Description)
                        {
                            IncludeCaption = false;
                        }
                        column(Position_PurchCrMemoLine; "Purch. Cr. Memo Line".Position)
                        {
                            IncludeCaption = false;
                        }
                        column(LineDiscountPct_PurchCrMemoLine; "Purch. Cr. Memo Line"."Line Discount %")
                        {
                            IncludeCaption = false;
                        }
                        column(DirectUnitCost_PurchCrMemoLine; "Purch. Cr. Memo Line"."Direct Unit Cost")
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Line".GetCurrencyCode;
                            AutoFormatType = 2;
                            IncludeCaption = false;
                        }
                        column(UnitofMeasure_PurchCrMemoLine; "Purch. Cr. Memo Line"."Unit of Measure")
                        {
                            IncludeCaption = false;
                        }
                        column(Quantity_PurchCrMemoLine; "Purch. Cr. Memo Line".Quantity)
                        {
                            IncludeCaption = false;
                        }
                        column(No___VendorItemNo; "No." + '   /   ' + "Vendor Item No.")
                        {
                            IncludeCaption = false;
                        }
                        column(Description2_PurchCrMemoLine; "Purch. Cr. Memo Line"."Description 2")
                        {
                            IncludeCaption = false;
                        }
                        column(LineAmount_PurchCrMemoLine5; "Purch. Cr. Memo Line"."Line Amount")
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Hdr."."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(InvDiscountAmount_PurchCrMemoLine; -"Inv. Discount Amount")
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Line".GetCurrencyCode;
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(Amount_PurchCrMemoLine; "Purch. Cr. Memo Line".Amount)
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Line".GetCurrencyCode;
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalText; TotalText)
                        {
                            IncludeCaption = false;
                        }
                        column(VATAmountLineVATAmountText; VATAmountLine.VATAmountText)
                        {
                            IncludeCaption = false;
                        }
                        column(AmountIncludingVAT_Amount; "Amount Including VAT" - Amount)
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Line".GetCurrencyCode;
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(AmountIncludingVAT_PurchCrMemoLine; "Purch. Cr. Memo Line"."Amount Including VAT")
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Line".GetCurrencyCode;
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        column(TotalInclVATText; TotalInclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalExclVATText; TotalExclVATText)
                        {
                            IncludeCaption = false;
                        }
                        column(LineAmount_InvDiscountAmount_AmountIncludingVAT; -("Line Amount" - "Inv. Discount Amount" - "Amount Including VAT"))
                        {
                            AutoFormatExpression = "Purch. Cr. Memo Hdr."."Currency Code";
                            AutoFormatType = 1;
                            IncludeCaption = false;
                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_95; 95) { } // Autogenerated by ForNav - Do not delete
                            column(ReportForNav_DimensionLoop2; ReportForNavWriteDataItem('DimensionLoop2', DimensionLoop2)) { }
                            column(DimText3; DimText)
                            {
                                IncludeCaption = false;
                            }
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                                // PostedDocDim2.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Line");
                                // PostedDocDim2.SETRANGE("Document No.","Purch. Cr. Memo Line"."Document No.");
                                // PostedDocDim2.SETRANGE("Line No.","Purch. Cr. Memo Line"."Line No.");
                                PostedDocDim2.SetRange("Dimension Set ID", "Purch. Cr. Memo Line"."Dimension Set ID");
                                ReportForNav.OnPreDataItem('DimensionLoop2', DimensionLoop2);
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                if Number = 1 then begin
                                    if not PostedDocDim2.Find('-') then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;
                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo(
                                          '%1 %2', PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1, %2 %3', DimText,
                                            PostedDocDim2."Dimension Code", PostedDocDim2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until (PostedDocDim2.Next = 0);
                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            VATAmountLine.DeleteAll;
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) and (Amount = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            ReportForNav.OnPreDataItem('PurchCrMemoLine', "Purch. Cr. Memo Line");
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if (Type = Type::"G/L Account") and (not ShowInternalInfo) then
                                "No." := '';
                            VATAmountLine.Init;
                            VATAmountLine."VAT Identifier" := "Purch. Cr. Memo Line"."VAT Identifier";
                            VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                            VATAmountLine."Tax Group Code" := "Tax Group Code";
                            VATAmountLine."Use Tax" := "Use Tax";
                            VATAmountLine."VAT %" := "VAT %";
                            VATAmountLine."VAT Base" := Amount;
                            VATAmountLine."Amount Including VAT" := "Amount Including VAT";
                            VATAmountLine."Line Amount" := "Line Amount";
                            if "Allow Invoice Disc." then
                                VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
                            VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
                            VATAmountLine.InsertLine;
                        end;

                    }
                    dataitem(VATCounter; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_97; 97) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounter; ReportForNavWriteDataItem('VATCounter', VATCounter)) { }
                        trigger OnPreDataItem();
                        begin
                            CurrReport.Break;
                            if VATAmountLine.GetTotalVATAmount = 0 then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            ReportForNav.OnPreDataItem('VATCounter', VATCounter);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                        end;

                    }
                    dataitem(VATCounterLCY; Integer)
                    {
                        DataItemTableView = sorting(Number);
                        column(ReportForNavId_98; 98) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_VATCounterLCY; ReportForNavWriteDataItem('VATCounterLCY', VATCounterLCY)) { }
                        trigger OnPreDataItem();
                        begin
                            CurrReport.Break;
                            if (not GLSetup."Print VAT specification in LCY") or
                               ("Purch. Cr. Memo Hdr."."Currency Code" = '') or
                               (VATAmountLine.GetTotalVATAmount = 0) then
                                CurrReport.Break;
                            SetRange(Number, 1, VATAmountLine.Count);
                            if GLSetup."LCY Code" = '' then
                                VALSpecLCYHeader := Text008 + Text009
                            else
                                VALSpecLCYHeader := Text008 + Format(GLSetup."LCY Code");
                            CurrExchRate.FindCurrency("Purch. Cr. Memo Hdr."."Posting Date", "Purch. Cr. Memo Hdr."."Currency Code", 1);
                            CalculatedExchRate := ROUND(1 / "Purch. Cr. Memo Hdr."."Currency Factor" * CurrExchRate."Exchange Rate Amount", 0.000001);
                            VALExchRate := StrSubstNo(Text010, CalculatedExchRate, CurrExchRate."Exchange Rate Amount");
                            ReportForNav.OnPreDataItem('VATCounterLCY', VATCounterLCY);
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            VATAmountLine.GetLine(Number);
                            VALVATBaseLCY := ROUND(VATAmountLine."VAT Base" / "Purch. Cr. Memo Hdr."."Currency Factor");
                            VALVATAmountLCY := ROUND(VATAmountLine."VAT Amount" / "Purch. Cr. Memo Hdr."."Currency Factor");
                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_99; 99) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total; ReportForNavWriteDataItem('Total', Total)) { }
                        trigger OnPreDataItem();
                        begin
                            if "Purch. Cr. Memo Hdr."."Buy-from Vendor No." = "Purch. Cr. Memo Hdr."."Pay-to Vendor No." then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total', Total);
                        end;

                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_100; 100) { } // Autogenerated by ForNav - Do not delete
                        column(ReportForNav_Total2; ReportForNavWriteDataItem('Total2', Total2)) { }
                        trigger OnPreDataItem();
                        begin
                            if ShipToAddr[1] = '' then
                                CurrReport.Break;
                            ReportForNav.OnPreDataItem('Total2', Total2);
                        end;

                    }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('PageLoop', PageLoop);
                    end;
                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    ReportForNav.OnPreDataItem('CopyLoop', CopyLoop);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then
                        CopyText := Text004;

                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        PurchCrMemoCountPrinted.Run("Purch. Cr. Memo Hdr.");
                    CompanyInfo.CalcFields("Picture 3", Picture);
                end;

            }
            trigger OnPreDataItem();
            begin
                EMailTxt := '';
                wwwTxt := '';
                CompanyInfo.Get;
                if MitLogo then
                    CompanyInfo.CalcFields("Picture 3", Picture);
                //CompanyInfo.CALCFIELDS(Logo);
                ReportForNav.OnPreDataItem('PurchCrMemoHdr', "Purch. Cr. Memo Hdr.");
            end;

            trigger OnAfterGetRecord();
            begin
                CurrReport.Language := Language2.GetLanguageIdOrDefault("Language Code");
                //CompanyInfo.GET;
                /*---original---
							IF RespCenter.GET("Responsibility Center") THEN BEGIN
							  FormatAddr.RespCenter(CompanyAddr,RespCenter);
							  CompanyInfo."Phone No." := RespCenter."Phone No.";
							  CompanyInfo."Fax No." := RespCenter."Fax No.";
							END ELSE BEGIN
							  FormatAddr.Company(CompanyAddr,CompanyInfo);
							END;
							----*/
                //DUE
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                    FirmenAnschr1 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    FirmenAnschr2 := RespCenter.Name + ' ' + RespCenter."Name 2" + ' - ' + RespCenter."Address 2" + ' - ' +
                                     RespCenter."Post Code" + ' ' + RespCenter.City;
                    MailTxt := RespCenter."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := RespCenter."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := RespCenter."Phone No.";
                    faxTxt := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                    FirmenAnschr1 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    FirmenAnschr2 := CompanyInfo.Name + ' ' + CompanyInfo."Name 2" + ' - ' + CompanyInfo."Address 2" + ' - ' +
                                     CompanyInfo."Post Code" + ' ' + CompanyInfo.City;
                    MailTxt := CompanyInfo."E-Mail";
                    if MailTxt <> '' then
                        EMailTxt := DUE002;
                    WebTxt := CompanyInfo."Home Page";
                    if WebTxt <> '' then
                        wwwTxt := DUE003;
                    FonTxt := CompanyInfo."Phone No.";
                    faxTxt := CompanyInfo."Fax No.";
                end;
                if not BenutzerER.Get(UserId) then
                    Clear(BenutzerER);

                Clear(User);
                if User.Get(UserId) then;
                // PostedDocDim1.SETRANGE("Table ID",DATABASE::"Purch. Cr. Memo Hdr.");
                // PostedDocDim1.SETRANGE("Document No.","Purch. Cr. Memo Hdr."."No.");
                PostedDocDim1.SetRange("Dimension Set ID", "Purch. Cr. Memo Hdr."."Dimension Set ID");

                if "Return Order No." = '' then
                    ReturnOrderNoText := ''
                else
                    ReturnOrderNoText := FieldCaption("Return Order No.");
                if "Purchaser Code" = '' then begin
                    SalesPurchPerson.Init;
                    PurchaserText := '';
                end else begin
                    SalesPurchPerson.Get("Purchaser Code");
                    PurchaserText := Text000
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                if "VAT Registration No." = '' then
                    VATNoText := ''
                else
                    VATNoText := FieldCaption("VAT Registration No.");
                if "Registration No." = '' then
                    RegNoText := ''
                else
                    RegNoText := FieldCaption("Registration No.");
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    TotalText := StrSubstNo(Text001, GLSetup."LCY Code");
                    TotalInclVATText := StrSubstNo(Text002, GLSetup."LCY Code");
                    TotalExclVATText := StrSubstNo(Text007, GLSetup."LCY Code");
                end else begin
                    TotalText := StrSubstNo(Text001, "Currency Code");
                    TotalInclVATText := StrSubstNo(Text002, "Currency Code");
                    TotalExclVATText := StrSubstNo(Text007, "Currency Code");
                end;
                FormatAddr.PurchCrMemoPayTo(VendAddr, "Purch. Cr. Memo Hdr.");
                if "Applies-to Doc. No." = '' then
                    AppliedToText := ''
                else
                    AppliedToText := StrSubstNo(Text003, "Applies-to Doc. Type", "Applies-to Doc. No.");
                FormatAddr.PurchCrMemoShipTo(ShipToAddr, "Purch. Cr. Memo Hdr.");
                if LogInteraction then
                    if not CurrReport.Preview then
                        SegManagement.LogDocument(
                          16, "No.", 0, 0, Database::Vendor, "Buy-from Vendor No.", "Purchaser Code", '', "Posting Description", '');
                if "Currency Code" = '' then begin
                    GLSetup.TestField("LCY Code");
                    WährTxt := GLSetup."LCY Code";
                end else begin
                    WährTxt := "Currency Code";
                end;

            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. of Copies';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Show Internal Information';
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Log Interaction';
                    }
                }
            }
        }

        trigger OnOpenPage()
        var
            DocumentType: Enum "Interaction Log Entry Document Type";
        begin
            LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Purch. Cr. Memo") <> '';
        end;

    }

    trigger OnInitReport()
    begin
        GLSetup.Get;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        if not CurrReport.UseRequestPage then
            InitLogInteraction;
        ///c/AW/110705: - wegen Druck ohne Requestform
        if not FormOpened then
            MitLogo := true;
        ///AW End
        ;
        ReportsForNavPre;
    end;

    var
        Text000: label 'Purchaser';
        Text001: label 'Total %1';
        Text002: label 'Total %1 Incl. VAT';
        Text003: label '(Applies to %1 %2)';
        Text004: label 'COPY';
        Text005: label 'Purchase - Credit Memo %1';
        Text006: label 'Page %1';
        Text007: label 'Total %1 Excl. VAT';
        GLSetup: Record "General Ledger Setup";
        CompanyInfo: Record "Company Information";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        VATAmountLine: Record "VAT Amount Line" temporary;
        PostedDocDim1: Record "Dimension Set Entry";
        PostedDocDim2: Record "Dimension Set Entry";
        RespCenter: Record "Responsibility Center";
        Language2: Codeunit Language;
        CurrExchRate: Record "Currency Exchange Rate";
        PurchCrMemoCountPrinted: Codeunit "PurchCrMemo-Printed";
        FormatAddr: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        VendAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        ReturnOrderNoText: Text[30];
        PurchaserText: Text[30];
        VATNoText: Text[30];
        ReferenceText: Text[30];
        AppliedToText: Text[40];
        TotalText: Text[50];
        TotalInclVATText: Text[50];
        TotalExclVATText: Text[50];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        VALVATBaseLCY: Decimal;
        VALVATAmountLCY: Decimal;
        VALSpecLCYHeader: Text[80];
        VALExchRate: Text[50];
        Text008: label 'VAT Amount Specification in ';
        Text009: label 'Local Currency';
        Text010: label 'Exchange rate: %1/%2';
        CalculatedExchRate: Decimal;
        RegNoText: Text[20];
        "---DUE...": Integer;
        BenutzerER: Record "User Setup";
        User: Record User;
        DebitorR: Record Customer;
        ZeilenDuplikatRecSet: Record "Sales Line";
        Kundendienst: Record "Salesperson/Purchaser";
        FirmenAnschr1: Text[120];
        FirmenAnschr2: Text[120];
        MailTxt: Text[30];
        WebTxt: Text[30];
        FonTxt: Text[30];
        faxTxt: Text[30];
        "WährTxt": Text[10];
        EMailTxt: Text[30];
        wwwTxt: Text[30];
        LieferTerminK: Text[20];
        LieferTerminZ: Text[30];
        AusgKalkStatus: Text[30];
        AusgAngKalkStatus: Text[30];
        "AusgÜbSchrEinzelpreis/P.E.": Text[30];
        MitLogo: Boolean;
        FormOpened: Boolean;
        verwenden: Boolean;
        FrachtJN: Boolean;
        FrachtKost: Decimal;
        VerpackKost: Decimal;
        GesKorrSumme: Decimal;
        BelegZwNetto: Decimal;
        AktuellerPosWert: array[3] of Decimal;
        "xPos.-Zus.-Zähl-Summen drucken": Boolean;
        "ZusammenzählungsText": Text[50];
        "NächsterZusammenzählungsText": Text[50];
        "PosZusammenzählungsSumme": array[3] of Decimal;
        "LetzterZusammenzählungsText": Text[50];
        "LetztePosZusammenzählungsSumme": array[3] of Decimal;
        AusgVKPreis: Decimal;
        "AusgWährTxt": Text[10];
        AusgBetragRechnsUndRabBetrag: Decimal;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        ArtInfoText: Text[120];
        ArtInfoZeichn: Text[80];
        ArtInfoAbm: Text[80];
        Item: Record Item;
        DUE001: label 'Ship-to Address:';
        DUE002: label 'E-mail:';
        DUE003: label 'Web:';
        DUE004: label 'Order No. %1';
        DUE005: label 'Please state this no. on requests and orders.';
        DUE006: label 'We qote to our known conditions and subject to technical changes.';
        DUE007: label 'Unit Price';
        DUE008: label 'see down';
        DUE009: label 'Deliv.: %1%2';
        DUE010: label 'Your No.: %1';
        DUE011: label 'Discount %1%';
        DUE012: label 'ALTERNATIVE - %1';
        DUE013: label 'OPTIONAL - %1';
        DUE014: label 'Charge';
        DUE015: label 'Package';
        DUE016: label 'It applies at the time of the supply the valid value added tax.';
        DUE017: label 'We hope that our offer assures to you. With all suggestions for improvement and further inquiries we are to you gladly ';
        DUE018: label 'at the disposal and assure to you in the case of order a correct execution.';
        DUE019: label 'Best regards';
        DUE020: label 'Zeichnungsnr. %1';
        DUE021: label 'Abm. %1 x %2 x %3';

    procedure InitLogInteraction()
    var
        DocumentType: Enum "Interaction Log Entry Document Type";
    begin
        LogInteraction := SegManagement.FindInteractionTemplateCode(DocumentType::"Purch. Cr. Memo") <> '';
    end;

    local procedure OnPreSectionDimensionLoop1_Body7(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number = 1);
        end;
    end;

    local procedure OnPreSectionDimensionLoop1_Body8(var DimensionLoop1: Record Integer);
    begin
        with DimensionLoop1 do begin
            ReportForNavSetShowOutput(Number > 1);
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Body11(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput(Type.AsInteger() = 0);
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Body12(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput((Type.AsInteger() > 0) and (Type <> Type::Item));
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Body13(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput(Type = Type::Item);
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Body14(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput("Description 2" <> '');
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Footer17(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput("Inv. Discount Amount" <> 0);
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Footer18(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput("Amount Including VAT" = Amount);
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Footer19(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput(
              not "Purch. Cr. Memo Hdr."."Prices Including VAT" and ("Amount Including VAT" <> Amount));
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Footer20(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput(
              "Purch. Cr. Memo Hdr."."Prices Including VAT" and
              ("Amount Including VAT" <> Amount) and
              ("Purch. Cr. Memo Hdr."."VAT Base Discount %" <> 0));
        end;
    end;

    local procedure OnPreSectionPurchCrMemoLine_Footer21(var "Purch. Cr. Memo Line": Record "Purch. Cr. Memo Line");
    begin
        with "Purch. Cr. Memo Line" do begin
            ReportForNavSetShowOutput(
              "Purch. Cr. Memo Hdr."."Prices Including VAT" and ("Amount Including VAT" <> Amount));
        end;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

        ReportForNavPurchCrMemoLineBuffer: Array[5] of Decimal;
        ReportForNavPurchCrMemoLineTotals: Array[5] of Decimal;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'PurchCrMemoHdr':
                begin
                    jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);
                end;
            'PageLoop':
                begin
                    ReportForNavPurchCrMemoLineTotals[1] := 0;
                    ReportForNavPurchCrMemoLineTotals[2] := 0;
                    ReportForNavPurchCrMemoLineTotals[3] := 0;
                    ReportForNavPurchCrMemoLineTotals[4] := 0;
                    ReportForNavPurchCrMemoLineTotals[5] := 0;
                end;
            'DimensionLoop1':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body7(DimensionLoop1);
                    jsonObject.Add('$Body7$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionDimensionLoop1_Body8(DimensionLoop1);
                    jsonObject.Add('$Body8$Pre', ReportForNavShowOutput);
                end;
            'PurchCrMemoLine':
                begin
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchCrMemoLine_Body11("Purch. Cr. Memo Line");
                    jsonObject.Add('$Body11$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchCrMemoLine_Body12("Purch. Cr. Memo Line");
                    jsonObject.Add('$Body12$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchCrMemoLine_Body13("Purch. Cr. Memo Line");
                    jsonObject.Add('$Body13$Pre', ReportForNavShowOutput);
                    ReportForNavShowOutput := true;
                    OnPreSectionPurchCrMemoLine_Body14("Purch. Cr. Memo Line");
                    jsonObject.Add('$Body14$Pre', ReportForNavShowOutput);
                    with "Purch. Cr. Memo Line" do begin
                        ReportForNavPurchCrMemoLineTotals[1] += "Line Amount";
                        ReportForNavPurchCrMemoLineBuffer[1] := "Line Amount";
                        "Line Amount" := ReportForNavPurchCrMemoLineTotals[1];
                        ReportForNavPurchCrMemoLineTotals[2] += "Line Amount";
                        ReportForNavPurchCrMemoLineBuffer[2] := "Line Amount";
                        "Line Amount" := ReportForNavPurchCrMemoLineTotals[2];
                        ReportForNavPurchCrMemoLineTotals[3] += Amount;
                        ReportForNavPurchCrMemoLineBuffer[3] := Amount;
                        Amount := ReportForNavPurchCrMemoLineTotals[3];
                        ReportForNavPurchCrMemoLineTotals[4] += "Amount Including VAT";
                        ReportForNavPurchCrMemoLineBuffer[4] := "Amount Including VAT";
                        "Amount Including VAT" := ReportForNavPurchCrMemoLineTotals[4];
                        ReportForNavPurchCrMemoLineTotals[5] += "Inv. Discount Amount";
                        ReportForNavPurchCrMemoLineBuffer[5] := "Inv. Discount Amount";
                        "Inv. Discount Amount" := ReportForNavPurchCrMemoLineTotals[5];
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchCrMemoLine_Footer17("Purch. Cr. Memo Line");
                        jsonObject.Add('$Footer17$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchCrMemoLine_Footer18("Purch. Cr. Memo Line");
                        jsonObject.Add('$Footer18$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchCrMemoLine_Footer19("Purch. Cr. Memo Line");
                        jsonObject.Add('$Footer19$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchCrMemoLine_Footer20("Purch. Cr. Memo Line");
                        jsonObject.Add('$Footer20$Pre', ReportForNavShowOutput);
                        ReportForNavShowOutput := true;
                        OnPreSectionPurchCrMemoLine_Footer21("Purch. Cr. Memo Line");
                        jsonObject.Add('$Footer21$Pre', ReportForNavShowOutput);
                        "Line Amount" := ReportForNavPurchCrMemoLineBuffer[1];
                        "Line Amount" := ReportForNavPurchCrMemoLineBuffer[2];
                        Amount := ReportForNavPurchCrMemoLineBuffer[3];
                        "Amount Including VAT" := ReportForNavPurchCrMemoLineBuffer[4];
                        "Inv. Discount Amount" := ReportForNavPurchCrMemoLineBuffer[5];
                    end;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
