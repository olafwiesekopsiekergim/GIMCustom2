#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 60017 "CCO Service Contract"
{
	Caption = 'Service Contract';
	WordLayout = './Layouts/CCOServiceContract.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(SalesHeader;"Sales Header")
		{
			PrintOnlyIfDetail = true;
			RequestFilterFields = "No.", "Sell-to Customer No.";
			column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
			column(ReportForNav_SalesHeader; ReportForNavWriteDataItem('SalesHeader',SalesHeader)) {}
			dataitem(CopyLoop;Integer)
			{
				DataItemTableView = sorting(Number);
				PrintOnlyIfDetail = true;
				column(ReportForNavId_1106900022; 1106900022) {} // Autogenerated by ForNav - Do not delete
				column(ReportForNav_CopyLoop; ReportForNavWriteDataItem('CopyLoop',CopyLoop)) {}
				dataitem(PageLoop;Integer)
				{
					DataItemTableView = sorting(Number) where(Number = const(1));
					PrintOnlyIfDetail = true;
					column(ReportForNavId_1106900021; 1106900021) {} // Autogenerated by ForNav - Do not delete
					column(ReportForNav_PageLoop; ReportForNavWriteDataItem('PageLoop',PageLoop)) {}
					column(DUE001; DUE001)
					{
					}
					column(DUE002; DUE002)
					{
					}
					column(PageNo; Format(ReportForNav.PagePlaceHolder))
					{
					}
					column(CustAddr8; CustAddr[8])
					{
					}
					column(CustAddr7; CustAddr[7])
					{
					}
					column(CustAddr6; CustAddr[6])
					{
					}
					column(CustAddr5; CustAddr[5])
					{
					}
					column(CustAddr4; CustAddr[4])
					{
					}
					column(CustAddr3; CustAddr[3])
					{
					}
					column(CustAddr2; CustAddr[2])
					{
					}
					column(CustAddr1; CustAddr[1])
					{
					}
					column(Servicevertragsnr; SalesHeader."Servicecontractno.")
					{
					}
					column(CompanyInfo_Picture; CompanyInfo.Picture)
					{
					}
					column(CompanyInfo_Picture2; CompanyInfo."Picture 2")
					{
					}
					column(CompanyInfo_Name; CompanyInfo.Name)
					{
					}
					column(Salesperson_Name; Salesperson.Name)
					{
					}
					column(Salesperson_Telefon; Salesperson."Phone No.")
					{
					}
					column(CompanyInfo_Fax; Salesperson."E-Mail")
					{
					}
					column(Today; Today)
					{
					}
					column(Header1Cpt; Header1Cpt)
					{
					}
					column(Salesperson_Unterschrift; Salesperson.Signature)
					{
					}
					column(ServiceVertragCpt; ServicevertragCpt)
					{
					}
					column(CompanyInfo_Address; CompanyInfo.Address)
					{
					}
					column(CompanyInfo_PLZ; CompanyInfo."Post Code")
					{
					}
					column(CompanyInfo_Ort; CompanyInfo.City)
					{
					}
					column(TelefonCpt; TelefonCpt)
					{
					}
					column(DatumCpt; DatumCpt)
					{
					}
					column(FaxCpt; FaxCpt)
					{
					}
					column(komfort; Komfort)
					{
					}
					column(Salesperson2_Name; SalesPerson2.Name)
					{
					}
					column(Salesperson2_Unterschrift; SalesPerson2.Signature)
					{
					}
					dataitem(SalesLine;"Sales Line")
					{
						DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
						DataItemLinkReference = SalesHeader;
						DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
						PrintOnlyIfDetail = true;
						column(ReportForNavId_1106900013; 1106900013) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_SalesLine; ReportForNavWriteDataItem('SalesLine',SalesLine)) {}
						column(Salesline_Qty; SalesLine.Quantity)
						{
						}
						column(SalesLine_Description2; SalesLine."Description 2")
						{
						}
						trigger OnPreDataItem();
						begin
							SalesLine.SetRange(Type, SalesLine.Type::Item);
							//SalesLine.SETRANGE("No.", 'MONTAGE');
							ReportForNav.OnPreDataItem('SalesLine',SalesLine);
						end;
						
						trigger OnAfterGetRecord();
						begin
							//Item.GET(SalesLine."No.");
							if SalesLine."No." <> 'MONTAGE' then
								SalesLine."Description 2" := SalesLine.Description + ' ' + SalesLine."No.";
						end;
						
					}
					dataitem(SalesLine2;"Sales Line")
					{
						DataItemLink = "Document Type" = FIELD("Document Type"), "Document No." = FIELD("No.");
						DataItemLinkReference = SalesHeader;
						DataItemTableView = sorting("Document Type", "Document No.", "Line No.");
						PrintOnlyIfDetail = true;
						column(ReportForNavId_1000000002; 1000000002) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_SalesLine2; ReportForNavWriteDataItem('SalesLine2',SalesLine2)) {}
						column(SalesLine_UnitPrice; SalesLine2."Unit Price")
						{
							DecimalPlaces = 2 : 2;
						}
						column(SalesLine_Description22; SalesLine2."Description 2")
						{
						}
						column(Item_Description3; Item."CCS DM Description 3")
						{
						}
						column(Item_Description4; Item."CCS DM Description 4")
						{
						}
						column(DUE003; DUE003)
						{
						}
						column(Item_Description5; Item."CCS DM Description 5")
						{
						}
						trigger OnPreDataItem();
						begin
							SalesLine2.SetRange(Type, SalesLine2.Type::Item);
							ReportForNav.OnPreDataItem('SalesLine2',SalesLine2);
						end;
						
						trigger OnAfterGetRecord();
						begin
							if SalesLine2."No." <> 'MONTAGE' then begin
								SalesLine2."Description 2" := SalesLine2.Description + ' ' + SalesLine2."No."
							end else begin
								Item.Get(SalesLine2."No.");
							end;
						end;
						
					}
					dataitem(AGB;Integer)
					{
						DataItemTableView = sorting(Number) order(ascending) where(Number = filter(1));
						MaxIteration = 1;
						PrintOnlyIfDetail = true;
						column(ReportForNavId_1106900024; 1106900024) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_AGB; ReportForNavWriteDataItem('AGB',AGB)) {}
						trigger OnPreDataItem();
						begin
							if Komfort then
								CurrReport.Break;
							ReportForNav.OnPreDataItem('AGB',AGB);
						end;
						
					}
					dataitem(AGB2;Integer)
					{
						PrintOnlyIfDetail = true;
						DataItemTableView = sorting(Number) where(Number=FILTER(1));
						column(ReportForNavId_1000000010; 1000000010) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_AGB2; ReportForNavWriteDataItem('AGB2',AGB2)) {}
						trigger OnPreDataItem();
						begin
							if not Komfort then
								CurrReport.Break;
							ReportForNav.OnPreDataItem('AGB2',AGB2);
						end;
						
					}
					dataitem("Location Service-DS";"Location Service-DS")
					{
						DataItemLink = "Customer No." = FIELD("Sell-to Customer No.");
						DataItemLinkReference = SalesHeader;
						DataItemTableView = sorting("Lfd.-Nr");
						column(ReportForNavId_1106900027; 1106900027) {} // Autogenerated by ForNav - Do not delete
						column(ReportForNav_LocationService_DS; ReportForNavWriteDataItem('LocationService_DS',"Location Service-DS")) {}
						column(ItemNoSV; "Location Service-DS"."Item No.")
						{
						}
						column(LocationSV; "Location Service-DS".Location)
						{
						}
						column(ProdOrderSV; "Location Service-DS"."Prod. Order No.")
						{
						}
						column(ItemNoSVCap; "Location Service-DS".FieldCaption("Item No."))
						{
						}
						column(LocationSVCap; "Location Service-DS".FieldCaption(Location))
						{
						}
						column(ProdOrderSVCap; "Location Service-DS".FieldCaption("Prod. Order No."))
						{
						}
						trigger OnPreDataItem();
						begin
							FindeSchrank.CopyFilters("Location Service-DS");
							ReportForNav.OnPreDataItem('LocationService_DS',"Location Service-DS");
						end;
						
					}
					trigger OnPreDataItem();
					begin
						ReportForNav.OnPreDataItem('PageLoop',PageLoop);
					end;
				}
				trigger OnPreDataItem();
				begin
					SetRange(Number, 1, 6);
					ReportForNav.OnPreDataItem('CopyLoop',CopyLoop);
				end;
				
				trigger OnAfterGetRecord();
				begin
					//
				end;
				
			}
			trigger OnPreDataItem();
			begin
				ReportForNav.OnPreDataItem('SalesHeader',SalesHeader);
			end;
			trigger OnAfterGetRecord();
			begin
				TestField("Servicecontractno.");
			
				FormatAddr.SalesHeaderSellTo(CustAddr, SalesHeader);
				Salesperson.Get(SalesHeader."Salesperson Code");
				Salesperson.CalcFields(Signature);
				SalesPerson2.Get('TF');
				SalesPerson2.CalcFields(Signature);
			end;
			
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(Komfortvertrag; Komfort)
					{
						ApplicationArea = Basic;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
	end;

	trigger OnPreReport()
	begin
		CompanyInfo.Get;
		CompanyInfo.CalcFields(Picture, "Picture 2");
		;ReportsForNavPre;
	end;
	var
		DUE003: Text[50];
		Komfort: Boolean;
		DUE002: Text[40];
		DUE001: Text[20];
		CustAddr: array[8] of Text[50];
		FormatAddr: Codeunit "Format Address";
		CompanyInfo: Record "Company Information";
		Item: Record Item;
		Salesperson: Record "Salesperson/Purchaser";
		Header1Cpt: label 'Es schreibt Ihnen:';
		ServicevertragCpt: label 'Servicevertrag-Nr.:';
		TelefonCpt: label 'Tel.:';
		FaxCpt: label 'E-Mail:';
		DatumCpt: label 'Datum:';
		FindeSchrank: Record "Location Service-DS";
		SalesPerson2: Record "Salesperson/Purchaser";

	local procedure OnPreSectionSalesHeader_Footer1(var SalesHeader : Record "Sales Header");
	begin
		with SalesHeader do begin
		end;// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionSalesLine_Body2(var SalesLine : Record "Sales Line");
	begin
		ReportForNavSetShowOutput((CopyLoop.Number = 2) or (CopyLoop.Number = 4));
		if (SalesLine.Quantity = 1) and (SalesLine."Description 2" = 'Sicherheitsschränken') then
			SalesLine."Description 2" := 'Sicherheitsschrank';
		if (SalesLine.Quantity = 1) and (SalesLine."Description 2" = 'Filteraufsätzen') then
			SalesLine."Description 2" := 'Filteraufsatz';
		if (SalesLine.Quantity = 1) and (SalesLine."Description 2" = 'Laborabzügen') then
			SalesLine."Description 2" := 'Laborabzug';
		if (SalesLine.Quantity > 1) and (SalesLine."Description 2" = 'Sicherheitsschränken') then
			SalesLine."Description 2" := 'Sicherheitsschränke';
		if (SalesLine.Quantity > 1) and (SalesLine."Description 2" = 'Filteraufsätzen') then
			SalesLine."Description 2" := 'Filteraufsätze';
		if (SalesLine.Quantity > 1) and (SalesLine."Description 2" = 'Laborabzügen') then
			SalesLine."Description 2" := 'Laborabzüge';
		// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionSalesLine2_Body6(var SalesLine2 : Record "Sales Line");
	begin
		ReportForNavSetShowOutput((SalesLine2."No." <> 'MONTAGE') and ((CopyLoop.Number = 2) or (CopyLoop.Number = 4)));
		DUE003 := 'Preis gem. aktueller Preisliste';
	end;
	local procedure OnPreSectionAGB_Body1(var AGB : Record Integer);
	begin
		ReportForNavSetShowOutput((CopyLoop.Number = 5) and (not Komfort));
		// Autogenerated by ForNav;
	end;
	local procedure OnPreSectionLocationService_DS_Body5(var "Location Service-DS" : Record "Location Service-DS");
	begin
		ReportForNavSetShowOutput((CopyLoop.Number > 5) and ((FindeSchrank.Next > 0) or (FindeSchrank.Next = 0)));
	end;
	local procedure OnPreSectionLocationService_DS_Header2(var "Location Service-DS" : Record "Location Service-DS");
	begin
		ReportForNavSetShowOutput((CopyLoop.Number > 5) and (FindeSchrank.FindSet));
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var
		ReportForNav: Codeunit "ForNAV Report Management";
		ReportForNavTotalsCausedBy: Integer;
		ReportForNavInitialized: Boolean;
		ReportForNavShowOutput: Boolean;

	local procedure ReportsForNavInit() var id: Integer; begin Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1)); ReportForNav.OnInit(id); end;
	local procedure ReportsForNavPre() begin end;
	local procedure ReportForNavSetTotalsCausedBy(value : Integer) begin ReportForNavTotalsCausedBy := value; end;
	local procedure ReportForNavSetShowOutput(value : Boolean) begin ReportForNavShowOutput := value; end;
	local procedure ReportForNavInit(jsonObject : JsonObject) begin ReportForNav.Init(jsonObject, CurrReport.ObjectId); end;
	local procedure ReportForNavWriteDataItem(dataItemId: Text; rec : Variant) : Text
	var
		values: Text;
		jsonObject: JsonObject;
		currLanguage: Integer;
	begin
		if not ReportForNavInitialized then begin
			ReportForNavInit(jsonObject);
			ReportForNavInitialized := true;
		end;

		case (dataItemId) of
			'SalesHeader':
				begin
					currLanguage := GlobalLanguage; GlobalLanguage := 1033; jsonObject.Add('DataItem$SalesHeader$CurrentKey$Text',SalesHeader.CurrentKey); GlobalLanguage := currLanguage;
						ReportForNavShowOutput := true; OnPreSectionSalesHeader_Footer1(SalesHeader); jsonObject.Add('$Footer1$Pre',ReportForNavShowOutput);
				end;
			'SalesLine':
				begin
					ReportForNavShowOutput := true; OnPreSectionSalesLine_Body2(SalesLine); jsonObject.Add('$Body2$Pre',ReportForNavShowOutput);
				end;
			'SalesLine2':
				begin
					ReportForNavShowOutput := true; OnPreSectionSalesLine2_Body6(SalesLine2); jsonObject.Add('$Body6$Pre',ReportForNavShowOutput);
				end;
			'AGB':
				begin
					ReportForNavShowOutput := true; OnPreSectionAGB_Body1(AGB); jsonObject.Add('$Body1$Pre',ReportForNavShowOutput);
				end;
			'LocationService_DS':
				begin
					ReportForNavShowOutput := true; OnPreSectionLocationService_DS_Body5("Location Service-DS"); jsonObject.Add('$Body5$Pre',ReportForNavShowOutput);
						ReportForNavShowOutput := true; OnPreSectionLocationService_DS_Header2("Location Service-DS"); jsonObject.Add('$Header2$Pre',ReportForNavShowOutput);
				end;
		end;
		ReportForNav.AddDataItemValues(jsonObject,dataItemId,rec);
		jsonObject.WriteTo(values);
		exit(values);
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
